
BMP280_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800e4b0  0800e4b0  0001e4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8ec  0800e8ec  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8f4  0800e8f4  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8f4  0800e8f4  0001e8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f8  0800e8f8  0001e8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800e8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001430  20000358  0800ec50  00020358  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001788  0800ec50  00021788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ed9  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bf7  00000000  00000000  0003a256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  0003de50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  0003f188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b5a4  00000000  00000000  00040320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a14  00000000  00000000  0005b8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d64c  00000000  00000000  0006e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db8  00000000  00000000  000fb9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e498 	.word	0x0800e498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800e498 	.word	0x0800e498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_ldivmod>:
 8000f44:	b97b      	cbnz	r3, 8000f66 <__aeabi_ldivmod+0x22>
 8000f46:	b972      	cbnz	r2, 8000f66 <__aeabi_ldivmod+0x22>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bfbe      	ittt	lt
 8000f4c:	2000      	movlt	r0, #0
 8000f4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f52:	e006      	blt.n	8000f62 <__aeabi_ldivmod+0x1e>
 8000f54:	bf08      	it	eq
 8000f56:	2800      	cmpeq	r0, #0
 8000f58:	bf1c      	itt	ne
 8000f5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f5e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f62:	f000 b9a7 	b.w	80012b4 <__aeabi_idiv0>
 8000f66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	db09      	blt.n	8000f86 <__aeabi_ldivmod+0x42>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db1a      	blt.n	8000fac <__aeabi_ldivmod+0x68>
 8000f76:	f000 f835 	bl	8000fe4 <__udivmoddi4>
 8000f7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f82:	b004      	add	sp, #16
 8000f84:	4770      	bx	lr
 8000f86:	4240      	negs	r0, r0
 8000f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db1b      	blt.n	8000fc8 <__aeabi_ldivmod+0x84>
 8000f90:	f000 f828 	bl	8000fe4 <__udivmoddi4>
 8000f94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9c:	b004      	add	sp, #16
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa4:	4252      	negs	r2, r2
 8000fa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000faa:	4770      	bx	lr
 8000fac:	4252      	negs	r2, r2
 8000fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb2:	f000 f817 	bl	8000fe4 <__udivmoddi4>
 8000fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc6:	4770      	bx	lr
 8000fc8:	4252      	negs	r2, r2
 8000fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fce:	f000 f809 	bl	8000fe4 <__udivmoddi4>
 8000fd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fda:	b004      	add	sp, #16
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	4770      	bx	lr

08000fe4 <__udivmoddi4>:
 8000fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe8:	468c      	mov	ip, r1
 8000fea:	4604      	mov	r4, r0
 8000fec:	9e08      	ldr	r6, [sp, #32]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d14b      	bne.n	800108a <__udivmoddi4+0xa6>
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	d967      	bls.n	80010c8 <__udivmoddi4+0xe4>
 8000ff8:	fab2 f282 	clz	r2, r2
 8000ffc:	b14a      	cbz	r2, 8001012 <__udivmoddi4+0x2e>
 8000ffe:	f1c2 0720 	rsb	r7, r2, #32
 8001002:	fa01 f302 	lsl.w	r3, r1, r2
 8001006:	fa20 f707 	lsr.w	r7, r0, r7
 800100a:	4095      	lsls	r5, r2
 800100c:	ea47 0c03 	orr.w	ip, r7, r3
 8001010:	4094      	lsls	r4, r2
 8001012:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001016:	fbbc f7fe 	udiv	r7, ip, lr
 800101a:	fa1f f885 	uxth.w	r8, r5
 800101e:	fb0e c317 	mls	r3, lr, r7, ip
 8001022:	fb07 f908 	mul.w	r9, r7, r8
 8001026:	0c21      	lsrs	r1, r4, #16
 8001028:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800102c:	4599      	cmp	r9, r3
 800102e:	d909      	bls.n	8001044 <__udivmoddi4+0x60>
 8001030:	18eb      	adds	r3, r5, r3
 8001032:	f107 31ff 	add.w	r1, r7, #4294967295
 8001036:	f080 811c 	bcs.w	8001272 <__udivmoddi4+0x28e>
 800103a:	4599      	cmp	r9, r3
 800103c:	f240 8119 	bls.w	8001272 <__udivmoddi4+0x28e>
 8001040:	3f02      	subs	r7, #2
 8001042:	442b      	add	r3, r5
 8001044:	eba3 0309 	sub.w	r3, r3, r9
 8001048:	fbb3 f0fe 	udiv	r0, r3, lr
 800104c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001050:	fb00 f108 	mul.w	r1, r0, r8
 8001054:	b2a4      	uxth	r4, r4
 8001056:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800105a:	42a1      	cmp	r1, r4
 800105c:	d909      	bls.n	8001072 <__udivmoddi4+0x8e>
 800105e:	192c      	adds	r4, r5, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 8107 	bcs.w	8001276 <__udivmoddi4+0x292>
 8001068:	42a1      	cmp	r1, r4
 800106a:	f240 8104 	bls.w	8001276 <__udivmoddi4+0x292>
 800106e:	3802      	subs	r0, #2
 8001070:	442c      	add	r4, r5
 8001072:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001076:	2700      	movs	r7, #0
 8001078:	1a64      	subs	r4, r4, r1
 800107a:	b11e      	cbz	r6, 8001084 <__udivmoddi4+0xa0>
 800107c:	2300      	movs	r3, #0
 800107e:	40d4      	lsrs	r4, r2
 8001080:	e9c6 4300 	strd	r4, r3, [r6]
 8001084:	4639      	mov	r1, r7
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xbe>
 800108e:	2e00      	cmp	r6, #0
 8001090:	f000 80ec 	beq.w	800126c <__udivmoddi4+0x288>
 8001094:	2700      	movs	r7, #0
 8001096:	e9c6 0100 	strd	r0, r1, [r6]
 800109a:	4638      	mov	r0, r7
 800109c:	4639      	mov	r1, r7
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f783 	clz	r7, r3
 80010a6:	2f00      	cmp	r7, #0
 80010a8:	d148      	bne.n	800113c <__udivmoddi4+0x158>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd0>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80fb 	bhi.w	80012aa <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469c      	mov	ip, r3
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa0>
 80010c2:	e9c6 4c00 	strd	r4, ip, [r6]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa0>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xe8>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 808f 	bne.w	80011f4 <__udivmoddi4+0x210>
 80010d6:	2701      	movs	r7, #1
 80010d8:	1b49      	subs	r1, r1, r5
 80010da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010de:	fa1f f985 	uxth.w	r9, r5
 80010e2:	fbb1 fef8 	udiv	lr, r1, r8
 80010e6:	fb08 111e 	mls	r1, r8, lr, r1
 80010ea:	fb09 f00e 	mul.w	r0, r9, lr
 80010ee:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80010f2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d907      	bls.n	800110a <__udivmoddi4+0x126>
 80010fa:	18eb      	adds	r3, r5, r3
 80010fc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0x124>
 8001102:	4298      	cmp	r0, r3
 8001104:	f200 80cd 	bhi.w	80012a2 <__udivmoddi4+0x2be>
 8001108:	468e      	mov	lr, r1
 800110a:	1a1b      	subs	r3, r3, r0
 800110c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001110:	fb08 3310 	mls	r3, r8, r0, r3
 8001114:	fb09 f900 	mul.w	r9, r9, r0
 8001118:	b2a4      	uxth	r4, r4
 800111a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800111e:	45a1      	cmp	r9, r4
 8001120:	d907      	bls.n	8001132 <__udivmoddi4+0x14e>
 8001122:	192c      	adds	r4, r5, r4
 8001124:	f100 33ff 	add.w	r3, r0, #4294967295
 8001128:	d202      	bcs.n	8001130 <__udivmoddi4+0x14c>
 800112a:	45a1      	cmp	r9, r4
 800112c:	f200 80b6 	bhi.w	800129c <__udivmoddi4+0x2b8>
 8001130:	4618      	mov	r0, r3
 8001132:	eba4 0409 	sub.w	r4, r4, r9
 8001136:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800113a:	e79e      	b.n	800107a <__udivmoddi4+0x96>
 800113c:	f1c7 0520 	rsb	r5, r7, #32
 8001140:	40bb      	lsls	r3, r7
 8001142:	fa22 fc05 	lsr.w	ip, r2, r5
 8001146:	ea4c 0c03 	orr.w	ip, ip, r3
 800114a:	fa21 f405 	lsr.w	r4, r1, r5
 800114e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001152:	fbb4 f9fe 	udiv	r9, r4, lr
 8001156:	fa1f f88c 	uxth.w	r8, ip
 800115a:	fb0e 4419 	mls	r4, lr, r9, r4
 800115e:	fa20 f305 	lsr.w	r3, r0, r5
 8001162:	40b9      	lsls	r1, r7
 8001164:	fb09 fa08 	mul.w	sl, r9, r8
 8001168:	4319      	orrs	r1, r3
 800116a:	0c0b      	lsrs	r3, r1, #16
 800116c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001170:	45a2      	cmp	sl, r4
 8001172:	fa02 f207 	lsl.w	r2, r2, r7
 8001176:	fa00 f307 	lsl.w	r3, r0, r7
 800117a:	d90b      	bls.n	8001194 <__udivmoddi4+0x1b0>
 800117c:	eb1c 0404 	adds.w	r4, ip, r4
 8001180:	f109 30ff 	add.w	r0, r9, #4294967295
 8001184:	f080 8088 	bcs.w	8001298 <__udivmoddi4+0x2b4>
 8001188:	45a2      	cmp	sl, r4
 800118a:	f240 8085 	bls.w	8001298 <__udivmoddi4+0x2b4>
 800118e:	f1a9 0902 	sub.w	r9, r9, #2
 8001192:	4464      	add	r4, ip
 8001194:	eba4 040a 	sub.w	r4, r4, sl
 8001198:	fbb4 f0fe 	udiv	r0, r4, lr
 800119c:	fb0e 4410 	mls	r4, lr, r0, r4
 80011a0:	fb00 fa08 	mul.w	sl, r0, r8
 80011a4:	b289      	uxth	r1, r1
 80011a6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80011aa:	45a2      	cmp	sl, r4
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x1dc>
 80011ae:	eb1c 0404 	adds.w	r4, ip, r4
 80011b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b6:	d26b      	bcs.n	8001290 <__udivmoddi4+0x2ac>
 80011b8:	45a2      	cmp	sl, r4
 80011ba:	d969      	bls.n	8001290 <__udivmoddi4+0x2ac>
 80011bc:	3802      	subs	r0, #2
 80011be:	4464      	add	r4, ip
 80011c0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011c4:	fba0 8902 	umull	r8, r9, r0, r2
 80011c8:	eba4 040a 	sub.w	r4, r4, sl
 80011cc:	454c      	cmp	r4, r9
 80011ce:	4641      	mov	r1, r8
 80011d0:	46ce      	mov	lr, r9
 80011d2:	d354      	bcc.n	800127e <__udivmoddi4+0x29a>
 80011d4:	d051      	beq.n	800127a <__udivmoddi4+0x296>
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d069      	beq.n	80012ae <__udivmoddi4+0x2ca>
 80011da:	1a5a      	subs	r2, r3, r1
 80011dc:	eb64 040e 	sbc.w	r4, r4, lr
 80011e0:	fa04 f505 	lsl.w	r5, r4, r5
 80011e4:	fa22 f307 	lsr.w	r3, r2, r7
 80011e8:	40fc      	lsrs	r4, r7
 80011ea:	431d      	orrs	r5, r3
 80011ec:	e9c6 5400 	strd	r5, r4, [r6]
 80011f0:	2700      	movs	r7, #0
 80011f2:	e747      	b.n	8001084 <__udivmoddi4+0xa0>
 80011f4:	4095      	lsls	r5, r2
 80011f6:	f1c2 0320 	rsb	r3, r2, #32
 80011fa:	fa21 f003 	lsr.w	r0, r1, r3
 80011fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001202:	fbb0 f7f8 	udiv	r7, r0, r8
 8001206:	fa1f f985 	uxth.w	r9, r5
 800120a:	fb08 0017 	mls	r0, r8, r7, r0
 800120e:	fa24 f303 	lsr.w	r3, r4, r3
 8001212:	4091      	lsls	r1, r2
 8001214:	fb07 fc09 	mul.w	ip, r7, r9
 8001218:	430b      	orrs	r3, r1
 800121a:	0c19      	lsrs	r1, r3, #16
 800121c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001220:	458c      	cmp	ip, r1
 8001222:	fa04 f402 	lsl.w	r4, r4, r2
 8001226:	d907      	bls.n	8001238 <__udivmoddi4+0x254>
 8001228:	1869      	adds	r1, r5, r1
 800122a:	f107 30ff 	add.w	r0, r7, #4294967295
 800122e:	d231      	bcs.n	8001294 <__udivmoddi4+0x2b0>
 8001230:	458c      	cmp	ip, r1
 8001232:	d92f      	bls.n	8001294 <__udivmoddi4+0x2b0>
 8001234:	3f02      	subs	r7, #2
 8001236:	4429      	add	r1, r5
 8001238:	eba1 010c 	sub.w	r1, r1, ip
 800123c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001240:	fb08 1c10 	mls	ip, r8, r0, r1
 8001244:	fb00 fe09 	mul.w	lr, r0, r9
 8001248:	b299      	uxth	r1, r3
 800124a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124e:	458e      	cmp	lr, r1
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0x27e>
 8001252:	1869      	adds	r1, r5, r1
 8001254:	f100 33ff 	add.w	r3, r0, #4294967295
 8001258:	d218      	bcs.n	800128c <__udivmoddi4+0x2a8>
 800125a:	458e      	cmp	lr, r1
 800125c:	d916      	bls.n	800128c <__udivmoddi4+0x2a8>
 800125e:	3802      	subs	r0, #2
 8001260:	4429      	add	r1, r5
 8001262:	eba1 010e 	sub.w	r1, r1, lr
 8001266:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800126a:	e73a      	b.n	80010e2 <__udivmoddi4+0xfe>
 800126c:	4637      	mov	r7, r6
 800126e:	4630      	mov	r0, r6
 8001270:	e708      	b.n	8001084 <__udivmoddi4+0xa0>
 8001272:	460f      	mov	r7, r1
 8001274:	e6e6      	b.n	8001044 <__udivmoddi4+0x60>
 8001276:	4618      	mov	r0, r3
 8001278:	e6fb      	b.n	8001072 <__udivmoddi4+0x8e>
 800127a:	4543      	cmp	r3, r8
 800127c:	d2ab      	bcs.n	80011d6 <__udivmoddi4+0x1f2>
 800127e:	ebb8 0102 	subs.w	r1, r8, r2
 8001282:	eb69 020c 	sbc.w	r2, r9, ip
 8001286:	3801      	subs	r0, #1
 8001288:	4696      	mov	lr, r2
 800128a:	e7a4      	b.n	80011d6 <__udivmoddi4+0x1f2>
 800128c:	4618      	mov	r0, r3
 800128e:	e7e8      	b.n	8001262 <__udivmoddi4+0x27e>
 8001290:	4608      	mov	r0, r1
 8001292:	e795      	b.n	80011c0 <__udivmoddi4+0x1dc>
 8001294:	4607      	mov	r7, r0
 8001296:	e7cf      	b.n	8001238 <__udivmoddi4+0x254>
 8001298:	4681      	mov	r9, r0
 800129a:	e77b      	b.n	8001194 <__udivmoddi4+0x1b0>
 800129c:	3802      	subs	r0, #2
 800129e:	442c      	add	r4, r5
 80012a0:	e747      	b.n	8001132 <__udivmoddi4+0x14e>
 80012a2:	f1ae 0e02 	sub.w	lr, lr, #2
 80012a6:	442b      	add	r3, r5
 80012a8:	e72f      	b.n	800110a <__udivmoddi4+0x126>
 80012aa:	4638      	mov	r0, r7
 80012ac:	e707      	b.n	80010be <__udivmoddi4+0xda>
 80012ae:	4637      	mov	r7, r6
 80012b0:	e6e8      	b.n	8001084 <__udivmoddi4+0xa0>
 80012b2:	bf00      	nop

080012b4 <__aeabi_idiv0>:
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	715a      	strb	r2, [r3, #5]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b08a      	sub	sp, #40	; 0x28
 80012f2:	af04      	add	r7, sp, #16
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	460b      	mov	r3, r1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	b29a      	uxth	r2, r3
 800130c:	8af9      	ldrh	r1, [r7, #22]
 800130e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2302      	movs	r3, #2
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	f002 fc42 	bl	8003ba8 <HAL_I2C_Mem_Read>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10b      	bne.n	8001342 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800132a:	7d7b      	ldrb	r3, [r7, #21]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	7d3b      	ldrb	r3, [r7, #20]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	801a      	strh	r2, [r3, #0]
		return true;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <read_register16+0x56>
	} else
		return false;
 8001342:	2300      	movs	r3, #0

}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08b      	sub	sp, #44	; 0x2c
 8001350:	af04      	add	r7, sp, #16
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	461a      	mov	r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	72fb      	strb	r3, [r7, #11]
 800135c:	4613      	mov	r3, r2
 800135e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	b29c      	uxth	r4, r3
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	b29b      	uxth	r3, r3
 8001374:	8af9      	ldrh	r1, [r7, #22]
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	9202      	str	r2, [sp, #8]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	4622      	mov	r2, r4
 8001386:	f002 fc0f 	bl	8003ba8 <HAL_I2C_Mem_Read>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <read_data+0x48>
		return 0;
 8001390:	2300      	movs	r3, #0
 8001392:	e000      	b.n	8001396 <read_data+0x4a>
	else
		return 1;
 8001394:	2301      	movs	r3, #1

}
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}

0800139e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	461a      	mov	r2, r3
 80013aa:	2188      	movs	r1, #136	; 0x88
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff9e 	bl	80012ee <read_register16>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d06f      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3302      	adds	r3, #2
 80013bc:	461a      	mov	r2, r3
 80013be:	218a      	movs	r1, #138	; 0x8a
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff94 	bl	80012ee <read_register16>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d065      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3304      	adds	r3, #4
 80013d0:	461a      	mov	r2, r3
 80013d2:	218c      	movs	r1, #140	; 0x8c
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff8a 	bl	80012ee <read_register16>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d05b      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3306      	adds	r3, #6
 80013e4:	461a      	mov	r2, r3
 80013e6:	218e      	movs	r1, #142	; 0x8e
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff80 	bl	80012ee <read_register16>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d051      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3308      	adds	r3, #8
 80013f8:	461a      	mov	r2, r3
 80013fa:	2190      	movs	r1, #144	; 0x90
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff76 	bl	80012ee <read_register16>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d047      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	330a      	adds	r3, #10
 800140c:	461a      	mov	r2, r3
 800140e:	2192      	movs	r1, #146	; 0x92
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff6c 	bl	80012ee <read_register16>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d03d      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	330c      	adds	r3, #12
 8001420:	461a      	mov	r2, r3
 8001422:	2194      	movs	r1, #148	; 0x94
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff62 	bl	80012ee <read_register16>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d033      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	330e      	adds	r3, #14
 8001434:	461a      	mov	r2, r3
 8001436:	2196      	movs	r1, #150	; 0x96
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff58 	bl	80012ee <read_register16>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d029      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3310      	adds	r3, #16
 8001448:	461a      	mov	r2, r3
 800144a:	2198      	movs	r1, #152	; 0x98
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff4e 	bl	80012ee <read_register16>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01f      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3312      	adds	r3, #18
 800145c:	461a      	mov	r2, r3
 800145e:	219a      	movs	r1, #154	; 0x9a
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff44 	bl	80012ee <read_register16>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d015      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3314      	adds	r3, #20
 8001470:	461a      	mov	r2, r3
 8001472:	219c      	movs	r1, #156	; 0x9c
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff3a 	bl	80012ee <read_register16>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001484:	461a      	mov	r2, r3
 8001486:	219e      	movs	r1, #158	; 0x9e
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff30 	bl	80012ee <read_register16>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <read_calibration_data+0xfa>

		return true;
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <read_calibration_data+0xfc>
	}

	return false;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0218 	add.w	r2, r3, #24
 80014b0:	2301      	movs	r3, #1
 80014b2:	21a1      	movs	r1, #161	; 0xa1
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff49 	bl	800134c <read_data>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d14b      	bne.n	8001558 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	331a      	adds	r3, #26
 80014c4:	461a      	mov	r2, r3
 80014c6:	21e1      	movs	r1, #225	; 0xe1
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff10 	bl	80012ee <read_register16>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d041      	beq.n	8001558 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f103 021c 	add.w	r2, r3, #28
 80014da:	2301      	movs	r3, #1
 80014dc:	21e3      	movs	r1, #227	; 0xe3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff34 	bl	800134c <read_data>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d136      	bne.n	8001558 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80014ea:	f107 030e 	add.w	r3, r7, #14
 80014ee:	461a      	mov	r2, r3
 80014f0:	21e4      	movs	r1, #228	; 0xe4
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fefb 	bl	80012ee <read_register16>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d02c      	beq.n	8001558 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	461a      	mov	r2, r3
 8001504:	21e5      	movs	r1, #229	; 0xe5
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fef1 	bl	80012ee <read_register16>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d022      	beq.n	8001558 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001518:	2301      	movs	r3, #1
 800151a:	21e7      	movs	r1, #231	; 0xe7
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff15 	bl	800134c <read_data>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d117      	bne.n	8001558 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	b21b      	sxth	r3, r3
 800152e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001532:	b21a      	sxth	r2, r3
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	121b      	asrs	r3, r3, #8
 8001538:	b21b      	sxth	r3, r3
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	b29b      	uxth	r3, r3
 800154e:	b21a      	sxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	841a      	strh	r2, [r3, #32]

		return true;
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b088      	sub	sp, #32
 8001566:	af04      	add	r7, sp, #16
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	70fb      	strb	r3, [r7, #3]
 800156e:	4613      	mov	r3, r2
 8001570:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	b29a      	uxth	r2, r3
 8001582:	89f9      	ldrh	r1, [r7, #14]
 8001584:	f242 7310 	movw	r3, #10000	; 0x2710
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	2301      	movs	r3, #1
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	1cbb      	adds	r3, r7, #2
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	f002 fa0e 	bl	80039b4 <HAL_I2C_Mem_Write>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <write_register8+0x40>
		return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <write_register8+0x42>
	else
		return true;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015ba:	2b76      	cmp	r3, #118	; 0x76
 80015bc:	d005      	beq.n	80015ca <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015c2:	2b77      	cmp	r3, #119	; 0x77
 80015c4:	d001      	beq.n	80015ca <bmp280_init+0x1e>

		return false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e099      	b.n	80016fe <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015d0:	2301      	movs	r3, #1
 80015d2:	21d0      	movs	r1, #208	; 0xd0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff feb9 	bl	800134c <read_data>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <bmp280_init+0x38>
		return false;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e08c      	b.n	80016fe <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015ea:	2b58      	cmp	r3, #88	; 0x58
 80015ec:	d006      	beq.n	80015fc <bmp280_init+0x50>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015f4:	2b60      	cmp	r3, #96	; 0x60
 80015f6:	d001      	beq.n	80015fc <bmp280_init+0x50>

		return false;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e080      	b.n	80016fe <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80015fc:	22b6      	movs	r2, #182	; 0xb6
 80015fe:	21e0      	movs	r1, #224	; 0xe0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffae 	bl	8001562 <write_register8>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <bmp280_init+0x64>
		return false;
 800160c:	2300      	movs	r3, #0
 800160e:	e076      	b.n	80016fe <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001610:	f107 020c 	add.w	r2, r7, #12
 8001614:	2301      	movs	r3, #1
 8001616:	21f3      	movs	r1, #243	; 0xf3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe97 	bl	800134c <read_data>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f5      	bne.n	8001610 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff feb5 	bl	800139e <read_calibration_data>
 8001634:	4603      	mov	r3, r0
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d100      	bne.n	8001642 <bmp280_init+0x96>
 8001640:	e001      	b.n	8001646 <bmp280_init+0x9a>
		return false;
 8001642:	2300      	movs	r3, #0
 8001644:	e05b      	b.n	80016fe <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800164c:	2b60      	cmp	r3, #96	; 0x60
 800164e:	d10a      	bne.n	8001666 <bmp280_init+0xba>
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff26 	bl	80014a2 <read_hum_calibration_data>
 8001656:	4603      	mov	r3, r0
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <bmp280_init+0xba>
		return false;
 8001662:	2300      	movs	r3, #0
 8001664:	e04b      	b.n	80016fe <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	795b      	ldrb	r3, [r3, #5]
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	461a      	mov	r2, r3
 8001680:	21f5      	movs	r1, #245	; 0xf5
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff6d 	bl	8001562 <write_register8>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <bmp280_init+0xe6>
		return false;
 800168e:	2300      	movs	r3, #0
 8001690:	e035      	b.n	80016fe <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016be:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016c6:	2b60      	cmp	r3, #96	; 0x60
 80016c8:	d10d      	bne.n	80016e6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	461a      	mov	r2, r3
 80016d4:	21f2      	movs	r1, #242	; 0xf2
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff43 	bl	8001562 <write_register8>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <bmp280_init+0x13a>
			return false;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e00b      	b.n	80016fe <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80016e6:	7bbb      	ldrb	r3, [r7, #14]
 80016e8:	461a      	mov	r2, r3
 80016ea:	21f4      	movs	r1, #244	; 0xf4
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff38 	bl	8001562 <write_register8>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <bmp280_init+0x150>
		return false;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <bmp280_init+0x152>
	}

	return true;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001706:	b480      	push	{r7}
 8001708:	b087      	sub	sp, #28
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	10da      	asrs	r2, r3, #3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001728:	12db      	asrs	r3, r3, #11
 800172a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	111b      	asrs	r3, r3, #4
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	8812      	ldrh	r2, [r2, #0]
 8001734:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	1112      	asrs	r2, r2, #4
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	8809      	ldrh	r1, [r1, #0]
 800173e:	1a52      	subs	r2, r2, r1
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800174c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001750:	139b      	asrs	r3, r3, #14
 8001752:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	441a      	add	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3380      	adds	r3, #128	; 0x80
 800176a:	121b      	asrs	r3, r3, #8
}
 800176c:	4618      	mov	r0, r3
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001776:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4619      	mov	r1, r3
 8001788:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800178c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001790:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001794:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	6a3a      	ldr	r2, [r7, #32]
 800179c:	fb02 f203 	mul.w	r2, r2, r3
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	6a39      	ldr	r1, [r7, #32]
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	441a      	add	r2, r3
 80017aa:	6a39      	ldr	r1, [r7, #32]
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	fba1 3403 	umull	r3, r4, r1, r3
 80017b2:	4422      	add	r2, r4
 80017b4:	4614      	mov	r4, r2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80017bc:	b211      	sxth	r1, r2
 80017be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017c2:	fb01 f504 	mul.w	r5, r1, r4
 80017c6:	fb03 f002 	mul.w	r0, r3, r2
 80017ca:	4428      	add	r0, r5
 80017cc:	fba3 3401 	umull	r3, r4, r3, r1
 80017d0:	1902      	adds	r2, r0, r4
 80017d2:	4614      	mov	r4, r2
 80017d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80017d8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	fb04 f102 	mul.w	r1, r4, r2
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	fb03 f202 	mul.w	r2, r3, r2
 80017f4:	1888      	adds	r0, r1, r2
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	fba2 1203 	umull	r1, r2, r2, r3
 80017fc:	1883      	adds	r3, r0, r2
 80017fe:	461a      	mov	r2, r3
 8001800:	f04f 0500 	mov.w	r5, #0
 8001804:	f04f 0600 	mov.w	r6, #0
 8001808:	0456      	lsls	r6, r2, #17
 800180a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800180e:	044d      	lsls	r5, r1, #17
 8001810:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001814:	186b      	adds	r3, r5, r1
 8001816:	eb46 0402 	adc.w	r4, r6, r2
 800181a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001824:	b219      	sxth	r1, r3
 8001826:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800182a:	f04f 0500 	mov.w	r5, #0
 800182e:	f04f 0600 	mov.w	r6, #0
 8001832:	00ce      	lsls	r6, r1, #3
 8001834:	2500      	movs	r5, #0
 8001836:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800183a:	186b      	adds	r3, r5, r1
 800183c:	eb46 0402 	adc.w	r4, r6, r2
 8001840:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	6a3a      	ldr	r2, [r7, #32]
 8001848:	fb02 f203 	mul.w	r2, r2, r3
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	6a39      	ldr	r1, [r7, #32]
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	441a      	add	r2, r3
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	fba1 3403 	umull	r3, r4, r1, r3
 800185e:	4422      	add	r2, r4
 8001860:	4614      	mov	r4, r2
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001868:	b211      	sxth	r1, r2
 800186a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800186e:	fb01 f504 	mul.w	r5, r1, r4
 8001872:	fb03 f002 	mul.w	r0, r3, r2
 8001876:	4428      	add	r0, r5
 8001878:	fba3 3401 	umull	r3, r4, r3, r1
 800187c:	1902      	adds	r2, r0, r4
 800187e:	4614      	mov	r4, r2
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	0a19      	lsrs	r1, r3, #8
 800188a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800188e:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001896:	b21b      	sxth	r3, r3
 8001898:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800189c:	6a38      	ldr	r0, [r7, #32]
 800189e:	fb04 f500 	mul.w	r5, r4, r0
 80018a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018a4:	fb03 f000 	mul.w	r0, r3, r0
 80018a8:	4428      	add	r0, r5
 80018aa:	6a3d      	ldr	r5, [r7, #32]
 80018ac:	fba5 5603 	umull	r5, r6, r5, r3
 80018b0:	1983      	adds	r3, r0, r6
 80018b2:	461e      	mov	r6, r3
 80018b4:	f04f 0b00 	mov.w	fp, #0
 80018b8:	f04f 0c00 	mov.w	ip, #0
 80018bc:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80018c0:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80018c4:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018c8:	eb1b 0301 	adds.w	r3, fp, r1
 80018cc:	eb4c 0402 	adc.w	r4, ip, r2
 80018d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80018d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80018d8:	1c19      	adds	r1, r3, #0
 80018da:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	88db      	ldrh	r3, [r3, #6]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	fb03 f502 	mul.w	r5, r3, r2
 80018ec:	fb01 f004 	mul.w	r0, r1, r4
 80018f0:	4428      	add	r0, r5
 80018f2:	fba1 3403 	umull	r3, r4, r1, r3
 80018f6:	1902      	adds	r2, r0, r4
 80018f8:	4614      	mov	r4, r2
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	1061      	asrs	r1, r4, #1
 8001904:	17e2      	asrs	r2, r4, #31
 8001906:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800190a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800190e:	4323      	orrs	r3, r4
 8001910:	d101      	bne.n	8001916 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001912:	2300      	movs	r3, #0
 8001914:	e0d4      	b.n	8001ac0 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800191c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001920:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	ea4f 0963 	mov.w	r9, r3, asr #1
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001930:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001934:	4645      	mov	r5, r8
 8001936:	464e      	mov	r6, r9
 8001938:	1aed      	subs	r5, r5, r3
 800193a:	eb66 0604 	sbc.w	r6, r6, r4
 800193e:	46a8      	mov	r8, r5
 8001940:	46b1      	mov	r9, r6
 8001942:	eb18 0308 	adds.w	r3, r8, r8
 8001946:	eb49 0409 	adc.w	r4, r9, r9
 800194a:	4698      	mov	r8, r3
 800194c:	46a1      	mov	r9, r4
 800194e:	eb18 0805 	adds.w	r8, r8, r5
 8001952:	eb49 0906 	adc.w	r9, r9, r6
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001962:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001966:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800196a:	eb18 0801 	adds.w	r8, r8, r1
 800196e:	eb49 0902 	adc.w	r9, r9, r2
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800197e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001982:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001986:	4688      	mov	r8, r1
 8001988:	4691      	mov	r9, r2
 800198a:	eb18 0805 	adds.w	r8, r8, r5
 800198e:	eb49 0906 	adc.w	r9, r9, r6
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800199e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80019a2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80019a6:	4688      	mov	r8, r1
 80019a8:	4691      	mov	r9, r2
 80019aa:	eb18 0005 	adds.w	r0, r8, r5
 80019ae:	eb49 0106 	adc.w	r1, r9, r6
 80019b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019b6:	f7ff fac5 	bl	8000f44 <__aeabi_ldivmod>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80019c8:	b219      	sxth	r1, r3
 80019ca:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019ce:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	f04f 0400 	mov.w	r4, #0
 80019da:	0b6b      	lsrs	r3, r5, #13
 80019dc:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80019e0:	1374      	asrs	r4, r6, #13
 80019e2:	fb03 f502 	mul.w	r5, r3, r2
 80019e6:	fb01 f004 	mul.w	r0, r1, r4
 80019ea:	4428      	add	r0, r5
 80019ec:	fba1 1203 	umull	r1, r2, r1, r3
 80019f0:	1883      	adds	r3, r0, r2
 80019f2:	461a      	mov	r2, r3
 80019f4:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	0b6b      	lsrs	r3, r5, #13
 8001a02:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001a06:	1374      	asrs	r4, r6, #13
 8001a08:	fb03 f502 	mul.w	r5, r3, r2
 8001a0c:	fb01 f004 	mul.w	r0, r1, r4
 8001a10:	4428      	add	r0, r5
 8001a12:	fba1 1203 	umull	r1, r2, r1, r3
 8001a16:	1883      	adds	r3, r0, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f04f 0400 	mov.w	r4, #0
 8001a22:	0e4b      	lsrs	r3, r1, #25
 8001a24:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001a28:	1654      	asrs	r4, r2, #25
 8001a2a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	fb04 f102 	mul.w	r1, r4, r2
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	fb03 f202 	mul.w	r2, r3, r2
 8001a46:	1888      	adds	r0, r1, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	fba2 1203 	umull	r1, r2, r2, r3
 8001a4e:	1883      	adds	r3, r0, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	f04f 0400 	mov.w	r4, #0
 8001a5a:	0ccb      	lsrs	r3, r1, #19
 8001a5c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001a60:	14d4      	asrs	r4, r2, #19
 8001a62:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a6a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a6e:	eb11 0803 	adds.w	r8, r1, r3
 8001a72:	eb42 0904 	adc.w	r9, r2, r4
 8001a76:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a7a:	eb13 0508 	adds.w	r5, r3, r8
 8001a7e:	eb44 0609 	adc.w	r6, r4, r9
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	0a29      	lsrs	r1, r5, #8
 8001a8c:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001a90:	1232      	asrs	r2, r6, #8
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a98:	b21d      	sxth	r5, r3
 8001a9a:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001a9e:	f04f 0800 	mov.w	r8, #0
 8001aa2:	f04f 0900 	mov.w	r9, #0
 8001aa6:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001aaa:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001aae:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001ab2:	eb18 0301 	adds.w	r3, r8, r1
 8001ab6:	eb49 0402 	adc.w	r4, r9, r2
 8001aba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001abe:	693b      	ldr	r3, [r7, #16]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001aca <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001adc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	039a      	lsls	r2, r3, #14
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001ae8:	051b      	lsls	r3, r3, #20
 8001aea:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001af2:	4619      	mov	r1, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fb03 f301 	mul.w	r3, r3, r1
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b00:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b08:	4611      	mov	r1, r2
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	fb02 f201 	mul.w	r2, r2, r1
 8001b10:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	7f09      	ldrb	r1, [r1, #28]
 8001b16:	4608      	mov	r0, r1
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	fb01 f100 	mul.w	r1, r1, r0
 8001b1e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b20:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b24:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b28:	1292      	asrs	r2, r2, #10
 8001b2a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b2e:	68f9      	ldr	r1, [r7, #12]
 8001b30:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b34:	fb01 f202 	mul.w	r2, r1, r2
 8001b38:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b3c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	13db      	asrs	r3, r3, #15
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	13d2      	asrs	r2, r2, #15
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	7e12      	ldrb	r2, [r2, #24]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b68:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b70:	bfa8      	it	ge
 8001b72:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b76:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	131b      	asrs	r3, r3, #12
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b08c      	sub	sp, #48	; 0x30
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b9a:	2b60      	cmp	r3, #96	; 0x60
 8001b9c:	d007      	beq.n	8001bae <bmp280_read_fixed+0x28>
		if (humidity)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <bmp280_read_fixed+0x32>
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	e000      	b.n	8001bba <bmp280_read_fixed+0x34>
 8001bb8:	2306      	movs	r3, #6
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f107 0218 	add.w	r2, r7, #24
 8001bc4:	21f7      	movs	r1, #247	; 0xf7
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fbc0 	bl	800134c <read_data>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <bmp280_read_fixed+0x50>
		return false;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e038      	b.n	8001c48 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001bd6:	7e3b      	ldrb	r3, [r7, #24]
 8001bd8:	031a      	lsls	r2, r3, #12
 8001bda:	7e7b      	ldrb	r3, [r7, #25]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4313      	orrs	r3, r2
 8001be0:	7eba      	ldrb	r2, [r7, #26]
 8001be2:	0912      	lsrs	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	4313      	orrs	r3, r2
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001bea:	7efb      	ldrb	r3, [r7, #27]
 8001bec:	031a      	lsls	r2, r3, #12
 8001bee:	7f3b      	ldrb	r3, [r7, #28]
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	7f7a      	ldrb	r2, [r7, #29]
 8001bf6:	0912      	lsrs	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	461a      	mov	r2, r3
 8001c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fd7d 	bl	8001706 <compensate_temperature>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	461a      	mov	r2, r3
 8001c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7ff fdac 	bl	8001776 <compensate_pressure>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c2a:	7fbb      	ldrb	r3, [r7, #30]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	7ffa      	ldrb	r2, [r7, #31]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	461a      	mov	r2, r3
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff ff45 	bl	8001aca <compensate_humidity>
 8001c40:	4602      	mov	r2, r0
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3730      	adds	r7, #48	; 0x30
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4906      	ldr	r1, [pc, #24]	; (8001c84 <__NVIC_EnableIRQ+0x34>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db10      	blt.n	8001cbc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <__NVIC_DisableIRQ+0x40>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	3320      	adds	r3, #32
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cb8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd2:	f001 f825 	bl	8002d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd6:	f000 f97f 	bl	8001fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cda:	f000 fa4f 	bl	800217c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cde:	f000 f9db 	bl	8002098 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ce2:	f000 fa21 	bl	8002128 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001ce6:	f009 f9c3 	bl	800b070 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8001cea:	f000 fa03 	bl	80020f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	const uint16_t DELAY_TIME = 1000;
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	827b      	strh	r3, [r7, #18]

	uint32_t data;
	data = readFlash(current_address);
 8001cf4:	4ba2      	ldr	r3, [pc, #648]	; (8001f80 <main+0x2b4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fd01 	bl	8002700 <readFlash>
 8001cfe:	6178      	str	r0, [r7, #20]

	while ((data != 0xFFFFFFFF) && (current_address < FLASH_DATA_END_ADDR))
 8001d00:	e00a      	b.n	8001d18 <main+0x4c>
	{
		current_address += 4;
 8001d02:	4b9f      	ldr	r3, [pc, #636]	; (8001f80 <main+0x2b4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4a9d      	ldr	r2, [pc, #628]	; (8001f80 <main+0x2b4>)
 8001d0a:	6013      	str	r3, [r2, #0]
		data = readFlash(current_address);
 8001d0c:	4b9c      	ldr	r3, [pc, #624]	; (8001f80 <main+0x2b4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fcf5 	bl	8002700 <readFlash>
 8001d16:	6178      	str	r0, [r7, #20]
	while ((data != 0xFFFFFFFF) && (current_address < FLASH_DATA_END_ADDR))
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d004      	beq.n	8001d2a <main+0x5e>
 8001d20:	4b97      	ldr	r3, [pc, #604]	; (8001f80 <main+0x2b4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a97      	ldr	r2, [pc, #604]	; (8001f84 <main+0x2b8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d9eb      	bls.n	8001d02 <main+0x36>
	}

	resetTime();
 8001d2a:	f000 fe35 	bl	8002998 <resetTime>

	BMP280_ON();
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2102      	movs	r1, #2
 8001d32:	4895      	ldr	r0, [pc, #596]	; (8001f88 <main+0x2bc>)
 8001d34:	f001 fcee 	bl	8003714 <HAL_GPIO_WritePin>

	LED_ON();
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3e:	4893      	ldr	r0, [pc, #588]	; (8001f8c <main+0x2c0>)
 8001d40:	f001 fce8 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(DELAY_TIME);
 8001d44:	8a7b      	ldrh	r3, [r7, #18]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 f84c 	bl	8002de4 <HAL_Delay>
	LED_OFF();
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d52:	488e      	ldr	r0, [pc, #568]	; (8001f8c <main+0x2c0>)
 8001d54:	f001 fcde 	bl	8003714 <HAL_GPIO_WritePin>

	bmp280_init_default_params(&bmp280.params);
 8001d58:	488d      	ldr	r0, [pc, #564]	; (8001f90 <main+0x2c4>)
 8001d5a:	f7ff faad 	bl	80012b8 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	; (8001f94 <main+0x2c8>)
 8001d60:	2276      	movs	r2, #118	; 0x76
 8001d62:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8001d64:	4b8b      	ldr	r3, [pc, #556]	; (8001f94 <main+0x2c8>)
 8001d66:	4a8c      	ldr	r2, [pc, #560]	; (8001f98 <main+0x2cc>)
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params))
 8001d6a:	e028      	b.n	8001dbe <main+0xf2>
	{
		size = sprintf((char*) Data, "BMP280 initialization failed\r\n");
 8001d6c:	4a8b      	ldr	r2, [pc, #556]	; (8001f9c <main+0x2d0>)
 8001d6e:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <main+0x2d4>)
 8001d70:	4615      	mov	r5, r2
 8001d72:	461c      	mov	r4, r3
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	6028      	str	r0, [r5, #0]
 8001d78:	6069      	str	r1, [r5, #4]
 8001d7a:	60aa      	str	r2, [r5, #8]
 8001d7c:	60eb      	str	r3, [r5, #12]
 8001d7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001d80:	6128      	str	r0, [r5, #16]
 8001d82:	6169      	str	r1, [r5, #20]
 8001d84:	61aa      	str	r2, [r5, #24]
 8001d86:	8823      	ldrh	r3, [r4, #0]
 8001d88:	78a2      	ldrb	r2, [r4, #2]
 8001d8a:	83ab      	strh	r3, [r5, #28]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	77ab      	strb	r3, [r5, #30]
 8001d90:	231e      	movs	r3, #30
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b83      	ldr	r3, [pc, #524]	; (8001fa4 <main+0x2d8>)
 8001d96:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Data, size, HAL_MAX_DELAY);
 8001d98:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <main+0x2d8>)
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001da0:	497e      	ldr	r1, [pc, #504]	; (8001f9c <main+0x2d0>)
 8001da2:	4881      	ldr	r0, [pc, #516]	; (8001fa8 <main+0x2dc>)
 8001da4:	f005 fbd1 	bl	800754a <HAL_UART_Transmit>
		CDC_Transmit_FS(Data, size);
 8001da8:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <main+0x2d8>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	487b      	ldr	r0, [pc, #492]	; (8001f9c <main+0x2d0>)
 8001db0:	f009 fa48 	bl	800b244 <CDC_Transmit_FS>
		HAL_Delay(DELAY_TIME * 2);
 8001db4:	8a7b      	ldrh	r3, [r7, #18]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 f813 	bl	8002de4 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params))
 8001dbe:	4974      	ldr	r1, [pc, #464]	; (8001f90 <main+0x2c4>)
 8001dc0:	4874      	ldr	r0, [pc, #464]	; (8001f94 <main+0x2c8>)
 8001dc2:	f7ff fbf3 	bl	80015ac <bmp280_init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1cc      	bne.n	8001d6c <main+0xa0>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (current_state == STATE_MEMORY_FULL)
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <main+0x2e0>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d11d      	bne.n	8001e18 <main+0x14c>
		{
			char msg[] = "Memory full\r\n";
 8001ddc:	4b74      	ldr	r3, [pc, #464]	; (8001fb0 <main+0x2e4>)
 8001dde:	1d3c      	adds	r4, r7, #4
 8001de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de2:	c407      	stmia	r4!, {r0, r1, r2}
 8001de4:	8023      	strh	r3, [r4, #0]
			while (CDC_Transmit_FS((uint8_t*) msg, strlen(msg)) != USBD_OK)
 8001de6:	e002      	b.n	8001dee <main+0x122>
			{
				HAL_Delay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f000 fffb 	bl	8002de4 <HAL_Delay>
			while (CDC_Transmit_FS((uint8_t*) msg, strlen(msg)) != USBD_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe f9ad 	bl	8000150 <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f009 fa20 	bl	800b244 <CDC_Transmit_FS>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ee      	bne.n	8001de8 <main+0x11c>
			}
			serial_menu_usb();
 8001e0a:	f000 fa97 	bl	800233c <serial_menu_usb>
			HAL_Delay(DELAY_TIME);
 8001e0e:	8a7b      	ldrh	r3, [r7, #18]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 ffe7 	bl	8002de4 <HAL_Delay>
 8001e16:	e025      	b.n	8001e64 <main+0x198>
		}
		else
		{
			if (alarm_flag)
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <main+0x2e8>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d021      	beq.n	8001e64 <main+0x198>
			{
				alarm_flag = 0;
 8001e20:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <main+0x2e8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
				LED_ON();
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e2c:	4857      	ldr	r0, [pc, #348]	; (8001f8c <main+0x2c0>)
 8001e2e:	f001 fc71 	bl	8003714 <HAL_GPIO_WritePin>
				resetTime();
 8001e32:	f000 fdb1 	bl	8002998 <resetTime>
				setAlarm();
 8001e36:	f000 fd93 	bl	8002960 <setAlarm>
				// Read sensor
				bmp280_read_fixed(&bmp280, &i32temperature, &u32pressure,
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <main+0x2ec>)
 8001e3c:	4a5f      	ldr	r2, [pc, #380]	; (8001fbc <main+0x2f0>)
 8001e3e:	4960      	ldr	r1, [pc, #384]	; (8001fc0 <main+0x2f4>)
 8001e40:	4854      	ldr	r0, [pc, #336]	; (8001f94 <main+0x2c8>)
 8001e42:	f7ff fea0 	bl	8001b86 <bmp280_read_fixed>
						&u32humidity);

				// Write to flash
				current_address += writeFlashU16(current_address,
 8001e46:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <main+0x2b4>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <main+0x2f4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f000 fc86 	bl	8002764 <writeFlashU16>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <main+0x2b4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <main+0x2b4>)
 8001e62:	6013      	str	r3, [r2, #0]
						(uint16_t) i32temperature);
			}
		}

		// Check if memory is full
		if (current_address >= FLASH_DATA_END_ADDR + 0x0E)
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <main+0x2b4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a56      	ldr	r2, [pc, #344]	; (8001fc4 <main+0x2f8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d902      	bls.n	8001e74 <main+0x1a8>
		{
			current_state = STATE_MEMORY_FULL;
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <main+0x2e0>)
 8001e70:	2205      	movs	r2, #5
 8001e72:	701a      	strb	r2, [r3, #0]
		}

		if (usb_cdc_open == 1)
 8001e74:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <main+0x2fc>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <main+0x1b6>
		{
			serial_menu_usb();
 8001e7e:	f000 fa5d 	bl	800233c <serial_menu_usb>
		}

		sleep_enable = !(isUSBConnected());
 8001e82:	f000 fa33 	bl	80022ec <isUSBConnected>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <main+0x300>)
 8001e96:	701a      	strb	r2, [r3, #0]

		if (sleep_enable)
 8001e98:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <main+0x300>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d062      	beq.n	8001f68 <main+0x29c>
		{
			usb_connected = 0;
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <main+0x304>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
			USBD_Stop(&hUsbDeviceFS);
 8001ea8:	484a      	ldr	r0, [pc, #296]	; (8001fd4 <main+0x308>)
 8001eaa:	f008 f88e 	bl	8009fca <USBD_Stop>
			configurePA11Interrupt();
 8001eae:	f000 f9ef 	bl	8002290 <configurePA11Interrupt>
			LED_OFF();
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb8:	4834      	ldr	r0, [pc, #208]	; (8001f8c <main+0x2c0>)
 8001eba:	f001 fc2b 	bl	8003714 <HAL_GPIO_WritePin>
			BMP280_OFF();
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4831      	ldr	r0, [pc, #196]	; (8001f88 <main+0x2bc>)
 8001ec4:	f001 fc26 	bl	8003714 <HAL_GPIO_WritePin>
			enterStopMode();			// ~100uA
 8001ec8:	f000 fcaa 	bl	8002820 <enterStopMode>
			// System clock set to HSI RC after waking from stop mode
			SystemClock_Config();
 8001ecc:	f000 f884 	bl	8001fd8 <SystemClock_Config>
			HAL_ResumeTick();
 8001ed0:	f000 ffaa 	bl	8002e28 <HAL_ResumeTick>
			MX_USB_DEVICE_Init();
 8001ed4:	f009 f8cc 	bl	800b070 <MX_USB_DEVICE_Init>
			LED_ON();
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ede:	482b      	ldr	r0, [pc, #172]	; (8001f8c <main+0x2c0>)
 8001ee0:	f001 fc18 	bl	8003714 <HAL_GPIO_WritePin>
			BMP280_ON();
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4827      	ldr	r0, [pc, #156]	; (8001f88 <main+0x2bc>)
 8001eea:	f001 fc13 	bl	8003714 <HAL_GPIO_WritePin>
			MX_I2C1_Init();
 8001eee:	f000 f8d3 	bl	8002098 <MX_I2C1_Init>
			// Initialize sensor after stop mode
			bmp280_init_default_params(&bmp280.params);
 8001ef2:	4827      	ldr	r0, [pc, #156]	; (8001f90 <main+0x2c4>)
 8001ef4:	f7ff f9e0 	bl	80012b8 <bmp280_init_default_params>
			bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <main+0x2c8>)
 8001efa:	2276      	movs	r2, #118	; 0x76
 8001efc:	849a      	strh	r2, [r3, #36]	; 0x24
			bmp280.i2c = &hi2c1;
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <main+0x2c8>)
 8001f00:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <main+0x2cc>)
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

			while (!bmp280_init(&bmp280, &bmp280.params))
 8001f04:	e01e      	b.n	8001f44 <main+0x278>
			{
				size = sprintf((char*) Data, "BMP280 initialization failed\r\n");
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <main+0x2d0>)
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <main+0x2d4>)
 8001f0a:	4615      	mov	r5, r2
 8001f0c:	461c      	mov	r4, r3
 8001f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f10:	6028      	str	r0, [r5, #0]
 8001f12:	6069      	str	r1, [r5, #4]
 8001f14:	60aa      	str	r2, [r5, #8]
 8001f16:	60eb      	str	r3, [r5, #12]
 8001f18:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001f1a:	6128      	str	r0, [r5, #16]
 8001f1c:	6169      	str	r1, [r5, #20]
 8001f1e:	61aa      	str	r2, [r5, #24]
 8001f20:	8823      	ldrh	r3, [r4, #0]
 8001f22:	78a2      	ldrb	r2, [r4, #2]
 8001f24:	83ab      	strh	r3, [r5, #28]
 8001f26:	4613      	mov	r3, r2
 8001f28:	77ab      	strb	r3, [r5, #30]
 8001f2a:	231e      	movs	r3, #30
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <main+0x2d8>)
 8001f30:	801a      	strh	r2, [r3, #0]
				CDC_Transmit_FS(Data, size);
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <main+0x2d8>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4818      	ldr	r0, [pc, #96]	; (8001f9c <main+0x2d0>)
 8001f3a:	f009 f983 	bl	800b244 <CDC_Transmit_FS>
				HAL_Delay(100);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f000 ff50 	bl	8002de4 <HAL_Delay>
			while (!bmp280_init(&bmp280, &bmp280.params))
 8001f44:	4912      	ldr	r1, [pc, #72]	; (8001f90 <main+0x2c4>)
 8001f46:	4813      	ldr	r0, [pc, #76]	; (8001f94 <main+0x2c8>)
 8001f48:	f7ff fb30 	bl	80015ac <bmp280_init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f083 0301 	eor.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1d6      	bne.n	8001f06 <main+0x23a>
			}

			alarm_flag = 1;
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <main+0x2e8>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 8001f5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f62:	f000 ff3f 	bl	8002de4 <HAL_Delay>
 8001f66:	e734      	b.n	8001dd2 <main+0x106>
		}
		else
		{
			LED_ON();
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <main+0x2c0>)
 8001f70:	f001 fbd0 	bl	8003714 <HAL_GPIO_WritePin>
			HAL_Delay(DELAY_TIME);
 8001f74:	8a7b      	ldrh	r3, [r7, #18]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 ff34 	bl	8002de4 <HAL_Delay>
		if (current_state == STATE_MEMORY_FULL)
 8001f7c:	e729      	b.n	8001dd2 <main+0x106>
 8001f7e:	bf00      	nop
 8001f80:	20000004 	.word	0x20000004
 8001f84:	0800ffbf 	.word	0x0800ffbf
 8001f88:	40010c00 	.word	0x40010c00
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	20000a9c 	.word	0x20000a9c
 8001f94:	20000a70 	.word	0x20000a70
 8001f98:	20000870 	.word	0x20000870
 8001f9c:	20000954 	.word	0x20000954
 8001fa0:	0800e4b0 	.word	0x0800e4b0
 8001fa4:	20000a68 	.word	0x20000a68
 8001fa8:	20000914 	.word	0x20000914
 8001fac:	20000376 	.word	0x20000376
 8001fb0:	0800e4d0 	.word	0x0800e4d0
 8001fb4:	20000375 	.word	0x20000375
 8001fb8:	20000a6c 	.word	0x20000a6c
 8001fbc:	2000086c 	.word	0x2000086c
 8001fc0:	20000908 	.word	0x20000908
 8001fc4:	0800ffcd 	.word	0x0800ffcd
 8001fc8:	20000001 	.word	0x20000001
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000374 	.word	0x20000374
 8001fd4:	200005a8 	.word	0x200005a8

08001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b094      	sub	sp, #80	; 0x50
 8001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	2228      	movs	r2, #40	; 0x28
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f009 fd5b 	bl	800baa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002008:	2305      	movs	r3, #5
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002016:	2301      	movs	r3, #1
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201a:	2301      	movs	r3, #1
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201e:	2302      	movs	r3, #2
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002028:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800202c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002032:	4618      	mov	r0, r3
 8002034:	f003 ff2a 	bl	8005e8c <HAL_RCC_OscConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800203e:	f000 fcc5 	bl	80029cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002042:	230f      	movs	r3, #15
 8002044:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	2101      	movs	r1, #1
 800205c:	4618      	mov	r0, r3
 800205e:	f004 f995 	bl	800638c <HAL_RCC_ClockConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002068:	f000 fcb0 	bl	80029cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800206c:	2311      	movs	r3, #17
 800206e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002074:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fb20 	bl	80066c4 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800208a:	f000 fc9f 	bl	80029cc <Error_Handler>
  }
}
 800208e:	bf00      	nop
 8002090:	3750      	adds	r7, #80	; 0x50
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MX_I2C1_Init+0x54>)
 800209e:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <MX_I2C1_Init+0x58>)
 80020a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_I2C1_Init+0x54>)
 80020a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80020a8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_I2C1_Init+0x54>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_I2C1_Init+0x54>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <MX_I2C1_Init+0x54>)
 80020b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_I2C1_Init+0x54>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_I2C1_Init+0x54>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_I2C1_Init+0x54>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_I2C1_Init+0x54>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_I2C1_Init+0x54>)
 80020d8:	f001 fb34 	bl	8003744 <HAL_I2C_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80020e2:	f000 fc73 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000870 	.word	0x20000870
 80020f0:	40005400 	.word	0x40005400

080020f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_RTC_Init+0x2c>)
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <MX_RTC_Init+0x30>)
 80020fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_RTC_Init+0x2c>)
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_RTC_Init+0x2c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_RTC_Init+0x2c>)
 800210e:	f004 fc4b 	bl	80069a8 <HAL_RTC_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_RTC_Init+0x28>
  {
    Error_Handler();
 8002118:	f000 fc58 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000a54 	.word	0x20000a54
 8002124:	40002800 	.word	0x40002800

08002128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_USART1_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002160:	f005 f9a6 	bl	80074b0 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 fc2f 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000914 	.word	0x20000914
 8002178:	40013800 	.word	0x40013800

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <MX_GPIO_Init+0xcc>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <MX_GPIO_Init+0xcc>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <MX_GPIO_Init+0xcc>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021ae:	f043 0320 	orr.w	r3, r3, #32
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a20      	ldr	r2, [pc, #128]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_GPIO_Init+0xcc>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f6:	4815      	ldr	r0, [pc, #84]	; (800224c <MX_GPIO_Init+0xd0>)
 80021f8:	f001 fa8c 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2102      	movs	r1, #2
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <MX_GPIO_Init+0xd4>)
 8002202:	f001 fa87 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	2301      	movs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2302      	movs	r3, #2
 8002216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4619      	mov	r1, r3
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <MX_GPIO_Init+0xd0>)
 8002220:	f001 f91e 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002224:	2302      	movs	r3, #2
 8002226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2302      	movs	r3, #2
 8002232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_GPIO_Init+0xd4>)
 800223c:	f001 f910 	bl	8003460 <HAL_GPIO_Init>

}
 8002240:	bf00      	nop
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	40011000 	.word	0x40011000
 8002250:	40010c00 	.word	0x40010c00

08002254 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
//	if ((EXTI->PR & EXTI_PR_PR14) != 0 || (EXTI->PR & EXTI_PR_PR11) != 0) /* Check line 11 has triggered the IT */
	if ((EXTI->PR & EXTI_PR_PR11) != 0) /* Check line 11 has triggered the IT */
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <EXTI15_10_IRQHandler+0x34>)
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <EXTI15_10_IRQHandler+0x22>
	{
		usb_connected = 1;
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <EXTI15_10_IRQHandler+0x38>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
//		EXTI->PR |= EXTI_PR_PR14; /* Clear the pending bit */
		EXTI->PR |= EXTI_PR_PR11; /* Clear the pending bit */
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <EXTI15_10_IRQHandler+0x34>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	4a06      	ldr	r2, [pc, #24]	; (8002288 <EXTI15_10_IRQHandler+0x34>)
 8002270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002274:	6153      	str	r3, [r2, #20]
	}
	EXTI->PR |= 0U;
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <EXTI15_10_IRQHandler+0x34>)
 8002278:	4a03      	ldr	r2, [pc, #12]	; (8002288 <EXTI15_10_IRQHandler+0x34>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	6153      	str	r3, [r2, #20]
	NVIC_DisableIRQ(EXTI15_10_IRQn);
 800227e:	2028      	movs	r0, #40	; 0x28
 8002280:	f7ff fd02 	bl	8001c88 <__NVIC_DisableIRQ>
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010400 	.word	0x40010400
 800228c:	20000374 	.word	0x20000374

08002290 <configurePA11Interrupt>:

static void configurePA11Interrupt(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8002296:	463b      	mov	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
	{ 0 };

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022a6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <configurePA11Interrupt+0x4c>)
 80022aa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ac:	2302      	movs	r3, #2
 80022ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2302      	movs	r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	4809      	ldr	r0, [pc, #36]	; (80022e0 <configurePA11Interrupt+0x50>)
 80022ba:	f001 f8d1 	bl	8003460 <HAL_GPIO_Init>

	AFIO->EXTICR[3] = AFIO_EXTICR3_EXTI11_PA;
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <configurePA11Interrupt+0x54>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]

	EXTI->IMR = EXTI_IMR_MR11;
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <configurePA11Interrupt+0x58>)
 80022c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ca:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022cc:	2028      	movs	r0, #40	; 0x28
 80022ce:	f7ff fcbf 	bl	8001c50 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	10320000 	.word	0x10320000
 80022e0:	40010800 	.word	0x40010800
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40010400 	.word	0x40010400

080022ec <isUSBConnected>:

uint8_t isUSBConnected()
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
	uint8_t connected = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	71fb      	strb	r3, [r7, #7]
	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <isUSBConnected+0x24>)
 80022f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d101      	bne.n	8002304 <isUSBConnected+0x18>
	{
		connected = 1;
 8002300:	2301      	movs	r3, #1
 8002302:	71fb      	strb	r3, [r7, #7]
	}
	return (connected);
 8002304:	79fb      	ldrb	r3, [r7, #7]
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	200005a8 	.word	0x200005a8

08002314 <writeEpochToFlash>:

void writeEpochToFlash(uint32_t epoch_time)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	writeFlashU32(EPOCH_ADDR, epoch_time);
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <writeEpochToFlash+0x20>)
 8002320:	f000 fa48 	bl	80027b4 <writeFlashU32>
	writeFlashU32(EPOCH_ADDR_BACKUP, epoch_time);
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <writeEpochToFlash+0x24>)
 8002328:	f000 fa44 	bl	80027b4 <writeFlashU32>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800ffd0 	.word	0x0800ffd0
 8002338:	0800ffe0 	.word	0x0800ffe0

0800233c <serial_menu_usb>:


void serial_menu_usb()
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af00      	add	r7, sp, #0
	char menu[] = "d - Download data\r\nl - Start logging\r\n";
 8002342:	4b9f      	ldr	r3, [pc, #636]	; (80025c0 <serial_menu_usb+0x284>)
 8002344:	f107 0408 	add.w	r4, r7, #8
 8002348:	461d      	mov	r5, r3
 800234a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002352:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002356:	6020      	str	r0, [r4, #0]
 8002358:	3404      	adds	r4, #4
 800235a:	8021      	strh	r1, [r4, #0]
 800235c:	3402      	adds	r4, #2
 800235e:	0c0b      	lsrs	r3, r1, #16
 8002360:	7023      	strb	r3, [r4, #0]

	CDC_Transmit_FS((uint8_t*) menu, strlen(menu));
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	4618      	mov	r0, r3
 8002368:	f7fd fef2 	bl	8000150 <strlen>
 800236c:	4603      	mov	r3, r0
 800236e:	b29a      	uxth	r2, r3
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f008 ff64 	bl	800b244 <CDC_Transmit_FS>

	size = strlen(usb_buffer);
 800237c:	4891      	ldr	r0, [pc, #580]	; (80025c4 <serial_menu_usb+0x288>)
 800237e:	f7fd fee7 	bl	8000150 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b90      	ldr	r3, [pc, #576]	; (80025c8 <serial_menu_usb+0x28c>)
 8002388:	801a      	strh	r2, [r3, #0]

	if (size != 0)
 800238a:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <serial_menu_usb+0x28c>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8110 	beq.w	80025b4 <serial_menu_usb+0x278>
	{
//		enum STATE previous_state;
		switch (usb_buffer[0])
 8002394:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <serial_menu_usb+0x288>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d002      	beq.n	80023a4 <serial_menu_usb+0x68>
 800239e:	2b6c      	cmp	r3, #108	; 0x6c
 80023a0:	d019      	beq.n	80023d6 <serial_menu_usb+0x9a>
				// Debugging
				sample = 1;
			}
			break;
		default:
			break;
 80023a2:	e108      	b.n	80025b6 <serial_menu_usb+0x27a>
			sendStoredData(FLASH_USER_START_ADDR, current_address);
 80023a4:	4b89      	ldr	r3, [pc, #548]	; (80025cc <serial_menu_usb+0x290>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4889      	ldr	r0, [pc, #548]	; (80025d0 <serial_menu_usb+0x294>)
 80023ac:	f000 f928 	bl	8002600 <sendStoredData>
			memset(Data, 0, DATA_BUFF_SIZE);
 80023b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b4:	2100      	movs	r1, #0
 80023b6:	4887      	ldr	r0, [pc, #540]	; (80025d4 <serial_menu_usb+0x298>)
 80023b8:	f009 fb73 	bl	800baa2 <memset>
			memset(usb_buffer, 0, RX_BUFF_SIZE);
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	2100      	movs	r1, #0
 80023c0:	4880      	ldr	r0, [pc, #512]	; (80025c4 <serial_menu_usb+0x288>)
 80023c2:	f009 fb6e 	bl	800baa2 <memset>
			eraseFlash(FLASH_USER_START_ADDR, END_OF_FLASH);
 80023c6:	4984      	ldr	r1, [pc, #528]	; (80025d8 <serial_menu_usb+0x29c>)
 80023c8:	4881      	ldr	r0, [pc, #516]	; (80025d0 <serial_menu_usb+0x294>)
 80023ca:	f000 f9a6 	bl	800271a <eraseFlash>
			current_address = FLASH_USER_START_ADDR;
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <serial_menu_usb+0x290>)
 80023d0:	4a7f      	ldr	r2, [pc, #508]	; (80025d0 <serial_menu_usb+0x294>)
 80023d2:	601a      	str	r2, [r3, #0]
			break;
 80023d4:	e0ef      	b.n	80025b6 <serial_menu_usb+0x27a>
			size = sprintf(Data, "Set time\r\nEnter epoch time: ");
 80023d6:	4a7f      	ldr	r2, [pc, #508]	; (80025d4 <serial_menu_usb+0x298>)
 80023d8:	4b80      	ldr	r3, [pc, #512]	; (80025dc <serial_menu_usb+0x2a0>)
 80023da:	4615      	mov	r5, r2
 80023dc:	461c      	mov	r4, r3
 80023de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e0:	6028      	str	r0, [r5, #0]
 80023e2:	6069      	str	r1, [r5, #4]
 80023e4:	60aa      	str	r2, [r5, #8]
 80023e6:	60eb      	str	r3, [r5, #12]
 80023e8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80023ea:	6128      	str	r0, [r5, #16]
 80023ec:	6169      	str	r1, [r5, #20]
 80023ee:	61aa      	str	r2, [r5, #24]
 80023f0:	7823      	ldrb	r3, [r4, #0]
 80023f2:	772b      	strb	r3, [r5, #28]
 80023f4:	231c      	movs	r3, #28
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <serial_menu_usb+0x28c>)
 80023fa:	801a      	strh	r2, [r3, #0]
			while (CDC_Transmit_FS(Data, size) != USBD_OK)
 80023fc:	e002      	b.n	8002404 <serial_menu_usb+0xc8>
				HAL_Delay(100);
 80023fe:	2064      	movs	r0, #100	; 0x64
 8002400:	f000 fcf0 	bl	8002de4 <HAL_Delay>
			while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8002404:	4b70      	ldr	r3, [pc, #448]	; (80025c8 <serial_menu_usb+0x28c>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4872      	ldr	r0, [pc, #456]	; (80025d4 <serial_menu_usb+0x298>)
 800240c:	f008 ff1a 	bl	800b244 <CDC_Transmit_FS>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f3      	bne.n	80023fe <serial_menu_usb+0xc2>
			size = sprintf(Data, "\r\n");
 8002416:	4b6f      	ldr	r3, [pc, #444]	; (80025d4 <serial_menu_usb+0x298>)
 8002418:	4a71      	ldr	r2, [pc, #452]	; (80025e0 <serial_menu_usb+0x2a4>)
 800241a:	8811      	ldrh	r1, [r2, #0]
 800241c:	7892      	ldrb	r2, [r2, #2]
 800241e:	8019      	strh	r1, [r3, #0]
 8002420:	709a      	strb	r2, [r3, #2]
 8002422:	2302      	movs	r3, #2
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <serial_menu_usb+0x28c>)
 8002428:	801a      	strh	r2, [r3, #0]
			CDC_Transmit_FS(Data, size);
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <serial_menu_usb+0x28c>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4868      	ldr	r0, [pc, #416]	; (80025d4 <serial_menu_usb+0x298>)
 8002432:	f008 ff07 	bl	800b244 <CDC_Transmit_FS>
			memset(Data, 0, DATA_BUFF_SIZE);
 8002436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243a:	2100      	movs	r1, #0
 800243c:	4865      	ldr	r0, [pc, #404]	; (80025d4 <serial_menu_usb+0x298>)
 800243e:	f009 fb30 	bl	800baa2 <memset>
			memset(usb_buffer, 0, RX_BUFF_SIZE);
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	2100      	movs	r1, #0
 8002446:	485f      	ldr	r0, [pc, #380]	; (80025c4 <serial_menu_usb+0x288>)
 8002448:	f009 fb2b 	bl	800baa2 <memset>
			for (uint8_t i = 0; i < 60; i++)
 800244c:	2300      	movs	r3, #0
 800244e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002452:	e00e      	b.n	8002472 <serial_menu_usb+0x136>
				if (strlen(usb_buffer) > 10)
 8002454:	485b      	ldr	r0, [pc, #364]	; (80025c4 <serial_menu_usb+0x288>)
 8002456:	f7fd fe7b 	bl	8000150 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	2b0a      	cmp	r3, #10
 800245e:	d80d      	bhi.n	800247c <serial_menu_usb+0x140>
				HAL_Delay(1000);
 8002460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002464:	f000 fcbe 	bl	8002de4 <HAL_Delay>
			for (uint8_t i = 0; i < 60; i++)
 8002468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800246c:	3301      	adds	r3, #1
 800246e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002476:	2b3b      	cmp	r3, #59	; 0x3b
 8002478:	d9ec      	bls.n	8002454 <serial_menu_usb+0x118>
 800247a:	e000      	b.n	800247e <serial_menu_usb+0x142>
					break;
 800247c:	bf00      	nop
			if (strlen(usb_buffer) < 10)
 800247e:	4851      	ldr	r0, [pc, #324]	; (80025c4 <serial_menu_usb+0x288>)
 8002480:	f7fd fe66 	bl	8000150 <strlen>
 8002484:	4603      	mov	r3, r0
 8002486:	2b09      	cmp	r3, #9
 8002488:	d81e      	bhi.n	80024c8 <serial_menu_usb+0x18c>
				size = sprintf(Data, "\r\nNo input received\r\n");
 800248a:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <serial_menu_usb+0x298>)
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <serial_menu_usb+0x2a8>)
 800248e:	4615      	mov	r5, r2
 8002490:	461c      	mov	r4, r3
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	6028      	str	r0, [r5, #0]
 8002496:	6069      	str	r1, [r5, #4]
 8002498:	60aa      	str	r2, [r5, #8]
 800249a:	60eb      	str	r3, [r5, #12]
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	6128      	str	r0, [r5, #16]
 80024a0:	88a3      	ldrh	r3, [r4, #4]
 80024a2:	82ab      	strh	r3, [r5, #20]
 80024a4:	2315      	movs	r3, #21
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <serial_menu_usb+0x28c>)
 80024aa:	801a      	strh	r2, [r3, #0]
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 80024ac:	e002      	b.n	80024b4 <serial_menu_usb+0x178>
					HAL_Delay(100);
 80024ae:	2064      	movs	r0, #100	; 0x64
 80024b0:	f000 fc98 	bl	8002de4 <HAL_Delay>
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 80024b4:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <serial_menu_usb+0x28c>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	4619      	mov	r1, r3
 80024ba:	4846      	ldr	r0, [pc, #280]	; (80025d4 <serial_menu_usb+0x298>)
 80024bc:	f008 fec2 	bl	800b244 <CDC_Transmit_FS>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f3      	bne.n	80024ae <serial_menu_usb+0x172>
			break;
 80024c6:	e076      	b.n	80025b6 <serial_menu_usb+0x27a>
				CDC_Transmit_FS(usb_buffer, strlen(usb_buffer));
 80024c8:	483e      	ldr	r0, [pc, #248]	; (80025c4 <serial_menu_usb+0x288>)
 80024ca:	f7fd fe41 	bl	8000150 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	483b      	ldr	r0, [pc, #236]	; (80025c4 <serial_menu_usb+0x288>)
 80024d6:	f008 feb5 	bl	800b244 <CDC_Transmit_FS>
				sscanf(usb_buffer, "%zu", &epoch_time);
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	461a      	mov	r2, r3
 80024de:	4942      	ldr	r1, [pc, #264]	; (80025e8 <serial_menu_usb+0x2ac>)
 80024e0:	4838      	ldr	r0, [pc, #224]	; (80025c4 <serial_menu_usb+0x288>)
 80024e2:	f009 ff55 	bl	800c390 <siscanf>
				current_state = STATE_ERASING_FLASH;
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <serial_menu_usb+0x2b0>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
				size = sprintf(Data, "Erasing flash...\r\n");
 80024ec:	4a39      	ldr	r2, [pc, #228]	; (80025d4 <serial_menu_usb+0x298>)
 80024ee:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <serial_menu_usb+0x2b4>)
 80024f0:	4615      	mov	r5, r2
 80024f2:	461c      	mov	r4, r3
 80024f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f6:	6028      	str	r0, [r5, #0]
 80024f8:	6069      	str	r1, [r5, #4]
 80024fa:	60aa      	str	r2, [r5, #8]
 80024fc:	60eb      	str	r3, [r5, #12]
 80024fe:	8823      	ldrh	r3, [r4, #0]
 8002500:	78a2      	ldrb	r2, [r4, #2]
 8002502:	822b      	strh	r3, [r5, #16]
 8002504:	4613      	mov	r3, r2
 8002506:	74ab      	strb	r3, [r5, #18]
 8002508:	2312      	movs	r3, #18
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <serial_menu_usb+0x28c>)
 800250e:	801a      	strh	r2, [r3, #0]
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8002510:	e002      	b.n	8002518 <serial_menu_usb+0x1dc>
					HAL_Delay(100);
 8002512:	2064      	movs	r0, #100	; 0x64
 8002514:	f000 fc66 	bl	8002de4 <HAL_Delay>
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <serial_menu_usb+0x28c>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	482d      	ldr	r0, [pc, #180]	; (80025d4 <serial_menu_usb+0x298>)
 8002520:	f008 fe90 	bl	800b244 <CDC_Transmit_FS>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f3      	bne.n	8002512 <serial_menu_usb+0x1d6>
				eraseFlash(FLASH_USER_START_ADDR, END_OF_FLASH);
 800252a:	492b      	ldr	r1, [pc, #172]	; (80025d8 <serial_menu_usb+0x29c>)
 800252c:	4828      	ldr	r0, [pc, #160]	; (80025d0 <serial_menu_usb+0x294>)
 800252e:	f000 f8f4 	bl	800271a <eraseFlash>
				writeEpochToFlash(epoch_time);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff feed 	bl	8002314 <writeEpochToFlash>
				size = sprintf(Data, "Time saved! - %u\r\n", epoch_time);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	461a      	mov	r2, r3
 800253e:	492d      	ldr	r1, [pc, #180]	; (80025f4 <serial_menu_usb+0x2b8>)
 8002540:	4824      	ldr	r0, [pc, #144]	; (80025d4 <serial_menu_usb+0x298>)
 8002542:	f009 ff05 	bl	800c350 <siprintf>
 8002546:	4603      	mov	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <serial_menu_usb+0x28c>)
 800254c:	801a      	strh	r2, [r3, #0]
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 800254e:	e002      	b.n	8002556 <serial_menu_usb+0x21a>
					HAL_Delay(100);
 8002550:	2064      	movs	r0, #100	; 0x64
 8002552:	f000 fc47 	bl	8002de4 <HAL_Delay>
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <serial_menu_usb+0x28c>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	481d      	ldr	r0, [pc, #116]	; (80025d4 <serial_menu_usb+0x298>)
 800255e:	f008 fe71 	bl	800b244 <CDC_Transmit_FS>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f3      	bne.n	8002550 <serial_menu_usb+0x214>
				size = sprintf(Data, "Logging started\r\n");
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <serial_menu_usb+0x298>)
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <serial_menu_usb+0x2bc>)
 800256c:	4615      	mov	r5, r2
 800256e:	461c      	mov	r4, r3
 8002570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002572:	6028      	str	r0, [r5, #0]
 8002574:	6069      	str	r1, [r5, #4]
 8002576:	60aa      	str	r2, [r5, #8]
 8002578:	60eb      	str	r3, [r5, #12]
 800257a:	8823      	ldrh	r3, [r4, #0]
 800257c:	822b      	strh	r3, [r5, #16]
 800257e:	2311      	movs	r3, #17
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <serial_menu_usb+0x28c>)
 8002584:	801a      	strh	r2, [r3, #0]
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8002586:	e002      	b.n	800258e <serial_menu_usb+0x252>
					HAL_Delay(100);
 8002588:	2064      	movs	r0, #100	; 0x64
 800258a:	f000 fc2b 	bl	8002de4 <HAL_Delay>
				while (CDC_Transmit_FS(Data, size) != USBD_OK)
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <serial_menu_usb+0x28c>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	480f      	ldr	r0, [pc, #60]	; (80025d4 <serial_menu_usb+0x298>)
 8002596:	f008 fe55 	bl	800b244 <CDC_Transmit_FS>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f3      	bne.n	8002588 <serial_menu_usb+0x24c>
				current_state = STATE_LOGGING;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <serial_menu_usb+0x2b0>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
				current_address = FLASH_USER_START_ADDR;
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <serial_menu_usb+0x290>)
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <serial_menu_usb+0x294>)
 80025aa:	601a      	str	r2, [r3, #0]
				sample = 1;
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <serial_menu_usb+0x2c0>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	801a      	strh	r2, [r3, #0]
			break;
 80025b2:	e000      	b.n	80025b6 <serial_menu_usb+0x27a>
		}
	}
 80025b4:	bf00      	nop
}
 80025b6:	bf00      	nop
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bdb0      	pop	{r4, r5, r7, pc}
 80025be:	bf00      	nop
 80025c0:	0800e55c 	.word	0x0800e55c
 80025c4:	200008c4 	.word	0x200008c4
 80025c8:	20000a68 	.word	0x20000a68
 80025cc:	20000004 	.word	0x20000004
 80025d0:	0800f400 	.word	0x0800f400
 80025d4:	20000954 	.word	0x20000954
 80025d8:	08010000 	.word	0x08010000
 80025dc:	0800e4e0 	.word	0x0800e4e0
 80025e0:	0800e500 	.word	0x0800e500
 80025e4:	0800e504 	.word	0x0800e504
 80025e8:	0800e51c 	.word	0x0800e51c
 80025ec:	20000376 	.word	0x20000376
 80025f0:	0800e520 	.word	0x0800e520
 80025f4:	0800e534 	.word	0x0800e534
 80025f8:	0800e548 	.word	0x0800e548
 80025fc:	20000002 	.word	0x20000002

08002600 <sendStoredData>:

void sendStoredData(uint32_t start, uint32_t end)
{
 8002600:	b5b0      	push	{r4, r5, r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
	int32_t data = -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	613b      	str	r3, [r7, #16]
	int16_t temp1;
	int16_t temp2;

	uint16_t sample_no = 1;
 8002610:	2301      	movs	r3, #1
 8002612:	82fb      	strh	r3, [r7, #22]

	while (start < end)
 8002614:	e060      	b.n	80026d8 <sendStoredData+0xd8>
	{
		data = readFlash(start);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f872 	bl	8002700 <readFlash>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]

		temp2 = data >> 16;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	141b      	asrs	r3, r3, #16
 8002624:	81fb      	strh	r3, [r7, #14]
		temp1 = (uint16_t) data;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	81bb      	strh	r3, [r7, #12]

		if (temp1 == -1)
 800262a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d056      	beq.n	80026e2 <sendStoredData+0xe2>
			break;

		size = sprintf((char*) Data, "%d, %.2f\r\n", sample_no,
 8002634:	8afd      	ldrh	r5, [r7, #22]
				(float) (temp1 / 100.0f));
 8002636:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fade 	bl	8000bfc <__aeabi_i2f>
 8002640:	4603      	mov	r3, r0
 8002642:	492b      	ldr	r1, [pc, #172]	; (80026f0 <sendStoredData+0xf0>)
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fbe1 	bl	8000e0c <__aeabi_fdiv>
 800264a:	4603      	mov	r3, r0
		size = sprintf((char*) Data, "%d, %.2f\r\n", sample_no,
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd feeb 	bl	8000428 <__aeabi_f2d>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	e9cd 3400 	strd	r3, r4, [sp]
 800265a:	462a      	mov	r2, r5
 800265c:	4925      	ldr	r1, [pc, #148]	; (80026f4 <sendStoredData+0xf4>)
 800265e:	4826      	ldr	r0, [pc, #152]	; (80026f8 <sendStoredData+0xf8>)
 8002660:	f009 fe76 	bl	800c350 <siprintf>
 8002664:	4603      	mov	r3, r0
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <sendStoredData+0xfc>)
 800266a:	801a      	strh	r2, [r3, #0]
		sample_no++;
 800266c:	8afb      	ldrh	r3, [r7, #22]
 800266e:	3301      	adds	r3, #1
 8002670:	82fb      	strh	r3, [r7, #22]

		CDC_Transmit_FS(Data, size);
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <sendStoredData+0xfc>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	481f      	ldr	r0, [pc, #124]	; (80026f8 <sendStoredData+0xf8>)
 800267a:	f008 fde3 	bl	800b244 <CDC_Transmit_FS>

		if (temp2 == -1)
 800267e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d02e      	beq.n	80026e6 <sendStoredData+0xe6>
			break;

		size = sprintf((char*) Data, "%d, %.2f\r\n", sample_no,
 8002688:	8afd      	ldrh	r5, [r7, #22]
				(float) (temp2 / 100.0f));
 800268a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fab4 	bl	8000bfc <__aeabi_i2f>
 8002694:	4603      	mov	r3, r0
 8002696:	4916      	ldr	r1, [pc, #88]	; (80026f0 <sendStoredData+0xf0>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fbb7 	bl	8000e0c <__aeabi_fdiv>
 800269e:	4603      	mov	r3, r0
		size = sprintf((char*) Data, "%d, %.2f\r\n", sample_no,
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fec1 	bl	8000428 <__aeabi_f2d>
 80026a6:	4603      	mov	r3, r0
 80026a8:	460c      	mov	r4, r1
 80026aa:	e9cd 3400 	strd	r3, r4, [sp]
 80026ae:	462a      	mov	r2, r5
 80026b0:	4910      	ldr	r1, [pc, #64]	; (80026f4 <sendStoredData+0xf4>)
 80026b2:	4811      	ldr	r0, [pc, #68]	; (80026f8 <sendStoredData+0xf8>)
 80026b4:	f009 fe4c 	bl	800c350 <siprintf>
 80026b8:	4603      	mov	r3, r0
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <sendStoredData+0xfc>)
 80026be:	801a      	strh	r2, [r3, #0]
		sample_no++;
 80026c0:	8afb      	ldrh	r3, [r7, #22]
 80026c2:	3301      	adds	r3, #1
 80026c4:	82fb      	strh	r3, [r7, #22]

		CDC_Transmit_FS(Data, size);
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <sendStoredData+0xfc>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	480a      	ldr	r0, [pc, #40]	; (80026f8 <sendStoredData+0xf8>)
 80026ce:	f008 fdb9 	bl	800b244 <CDC_Transmit_FS>

		start += 4;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	607b      	str	r3, [r7, #4]
	while (start < end)
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d39a      	bcc.n	8002616 <sendStoredData+0x16>
	}
}
 80026e0:	e002      	b.n	80026e8 <sendStoredData+0xe8>
			break;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <sendStoredData+0xe8>
			break;
 80026e6:	bf00      	nop
}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bdb0      	pop	{r4, r5, r7, pc}
 80026f0:	42c80000 	.word	0x42c80000
 80026f4:	0800e584 	.word	0x0800e584
 80026f8:	20000954 	.word	0x20000954
 80026fc:	20000a68 	.word	0x20000a68

08002700 <readFlash>:
		enterStopMode();
	}
}

uint32_t readFlash(uint32_t addr)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	uint32_t data = *(__IO uint32_t*) (addr);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
	return data;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <eraseFlash>:
	//	eraseFlash();
	writeFlashU32(FLASH_CURRENT_ADDR, addr);
}

HAL_StatusTypeDef eraseFlash(uint32_t startAddress, uint32_t endAddress)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8002724:	f000 fd0c 	bl	8003140 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	77fb      	strb	r3, [r7, #31]

	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = startAddress;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages = (endAddress - startAddress) / FLASH_PAGE_SIZE;
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	0a9b      	lsrs	r3, r3, #10
 800273c:	61bb      	str	r3, [r7, #24]
	uint32_t PAGEError = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]

	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);//Fill FF, as -1.
 8002742:	f107 0208 	add.w	r2, r7, #8
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fddf 	bl	8003310 <HAL_FLASHEx_Erase>
 8002752:	4603      	mov	r3, r0
 8002754:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8002756:	f000 fd19 	bl	800318c <HAL_FLASH_Lock>
	return status;
 800275a:	7ffb      	ldrb	r3, [r7, #31]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <writeFlashU16>:

uint32_t writeFlashU16(uint32_t startAddress, uint16_t data)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
	uint32_t return_value = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
	if (startAddress + 2 >= END_OF_FLASH) { return (0); }
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3302      	adds	r3, #2
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <writeFlashU16+0x4c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <writeFlashU16+0x1e>
 800277e:	2300      	movs	r3, #0
 8002780:	e012      	b.n	80027a8 <writeFlashU16+0x44>
	HAL_FLASH_Unlock();
 8002782:	f000 fcdd 	bl	8003140 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, startAddress, data)
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	f04f 0400 	mov.w	r4, #0
 800278c:	461a      	mov	r2, r3
 800278e:	4623      	mov	r3, r4
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	2001      	movs	r0, #1
 8002794:	f000 fc64 	bl	8003060 <HAL_FLASH_Program>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <writeFlashU16+0x3e>
			== HAL_OK)
	{
		return_value = 2;
 800279e:	2302      	movs	r3, #2
 80027a0:	60fb      	str	r3, [r7, #12]
	}

	HAL_FLASH_Lock();
 80027a2:	f000 fcf3 	bl	800318c <HAL_FLASH_Lock>
	return (return_value);
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	0800ffff 	.word	0x0800ffff

080027b4 <writeFlashU32>:

uint32_t writeFlashU32(uint32_t startAddress, uint32_t data)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	uint32_t return_value = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
	if (startAddress + 4 >= END_OF_FLASH) { return (0); }
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <writeFlashU32+0x4c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <writeFlashU32+0x1c>
 80027cc:	2300      	movs	r3, #0
 80027ce:	e012      	b.n	80027f6 <writeFlashU32+0x42>
	HAL_FLASH_Unlock();
 80027d0:	f000 fcb6 	bl	8003140 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddress, data) == HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f04f 0400 	mov.w	r4, #0
 80027da:	461a      	mov	r2, r3
 80027dc:	4623      	mov	r3, r4
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	2002      	movs	r0, #2
 80027e2:	f000 fc3d 	bl	8003060 <HAL_FLASH_Program>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <writeFlashU32+0x3c>
	{
		return_value = 4;
 80027ec:	2304      	movs	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
	}

	HAL_FLASH_Lock();
 80027f0:	f000 fccc 	bl	800318c <HAL_FLASH_Lock>
	return (return_value);
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd90      	pop	{r4, r7, pc}
 80027fe:	bf00      	nop
 8002800:	0800ffff 	.word	0x0800ffff

08002804 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RTC_AlarmAEventCallback+0x18>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000375 	.word	0x20000375

08002820 <enterStopMode>:
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFE);
}

void enterStopMode(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	EXTI->EMR = EXTI_EMR_MR17;				// event unmask line 17 (RTC)
 8002824:	4b49      	ldr	r3, [pc, #292]	; (800294c <enterStopMode+0x12c>)
 8002826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282a:	605a      	str	r2, [r3, #4]
	EXTI->RTSR = EXTI_RTSR_TR17;			// rising edge detection
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <enterStopMode+0x12c>)
 800282e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002832:	609a      	str	r2, [r3, #8]

	PWR->CR &= ~PWR_CR_PDDS;				// Enter stop mode when the CPU enters deepsleep.
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <enterStopMode+0x130>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a45      	ldr	r2, [pc, #276]	; (8002950 <enterStopMode+0x130>)
 800283a:	f023 0302 	bic.w	r3, r3, #2
 800283e:	6013      	str	r3, [r2, #0]
	PWR->CR |= PWR_CR_LPDS; 				// Voltage regulator in low-power mode during Stop mode
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <enterStopMode+0x130>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a42      	ldr	r2, [pc, #264]	; (8002950 <enterStopMode+0x130>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6013      	str	r3, [r2, #0]
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;			// sleep mode
 800284c:	4b41      	ldr	r3, [pc, #260]	; (8002954 <enterStopMode+0x134>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	4a40      	ldr	r2, [pc, #256]	; (8002954 <enterStopMode+0x134>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6113      	str	r3, [r2, #16]

	RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN); //Enable the power and backup interface clocks
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <enterStopMode+0x138>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a3e      	ldr	r2, [pc, #248]	; (8002958 <enterStopMode+0x138>)
 800285e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8002862:	61d3      	str	r3, [r2, #28]
    RCC->BDCR |=  RCC_BDCR_BDRST;			// reset backup domain
 8002864:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <enterStopMode+0x138>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <enterStopMode+0x138>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6213      	str	r3, [r2, #32]
    RCC->BDCR &= ~RCC_BDCR_BDRST;			// reset backup domain
 8002870:	4b39      	ldr	r3, [pc, #228]	; (8002958 <enterStopMode+0x138>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a38      	ldr	r2, [pc, #224]	; (8002958 <enterStopMode+0x138>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6213      	str	r3, [r2, #32]

	PWR->CR |= PWR_CR_DBP;             	  	// enable access to the backup registers and the RTC.
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <enterStopMode+0x130>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a33      	ldr	r2, [pc, #204]	; (8002950 <enterStopMode+0x130>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	6013      	str	r3, [r2, #0]
	 * are in the Backup domain. As a result, after Reset, these bits are write- protected and the DBP bit
	 * in the Power control register (PWR_CR) has to be set before these can be modified.
	 * These bits are only reset after a Backup domain Reset. Any internal or external Reset will not have
	 * any effect on these bits. */

	RCC->BDCR |= RCC_BDCR_LSEON;			// external low freq oscillator
 8002888:	4b33      	ldr	r3, [pc, #204]	; (8002958 <enterStopMode+0x138>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a32      	ldr	r2, [pc, #200]	; (8002958 <enterStopMode+0x138>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
	while(!(RCC->BDCR & RCC_BDCR_LSERDY)) asm("nop"); 	// Wait for LSE ready
 8002894:	e000      	b.n	8002898 <enterStopMode+0x78>
 8002896:	bf00      	nop
 8002898:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <enterStopMode+0x138>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f8      	beq.n	8002896 <enterStopMode+0x76>

//	RCC->CSR |= RCC_CSR_LSION;				// internal low freq oscillator
//	while(!(RCC->CSR & RCC_CSR_LSIRDY)); 	// Wait for LSI ready

//	RCC->BDCR |= RCC_BDCR_RTCSEL_LSI;		// LSI source
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;		// LSE source
 80028a4:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <enterStopMode+0x138>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <enterStopMode+0x138>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;			// RTC on
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <enterStopMode+0x138>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a28      	ldr	r2, [pc, #160]	; (8002958 <enterStopMode+0x138>)
 80028b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ba:	6213      	str	r3, [r2, #32]

	RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;	// clear RSF flag
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <enterStopMode+0x13c>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4926      	ldr	r1, [pc, #152]	; (800295c <enterStopMode+0x13c>)
 80028c2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80028c6:	4013      	ands	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
	while (!(RTC->CRL & RTC_CRL_RSF));		// Wait for the RSF to be set by hardware
 80028ca:	bf00      	nop
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <enterStopMode+0x13c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f9      	beq.n	80028cc <enterStopMode+0xac>

	// config mode to set prescaler and alarm setting
	while (!(RTC->CRL & RTC_CRL_RTOFF));			// wait until RTOFF = 1
 80028d8:	bf00      	nop
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <enterStopMode+0x13c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f9      	beq.n	80028da <enterStopMode+0xba>
	RTC->CRL |= RTC_CRL_CNF;						// enter configuration mode
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <enterStopMode+0x13c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a1c      	ldr	r2, [pc, #112]	; (800295c <enterStopMode+0x13c>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6053      	str	r3, [r2, #4]
	RTC->PRLH = (uint16_t)0;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <enterStopMode+0x13c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
	RTC->PRLL = (uint16_t)32767;					// RTC prescaler - RTCCLK = 32.768 kHz = 0x7FFF = 1 second
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <enterStopMode+0x13c>)
 80028fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80028fe:	60da      	str	r2, [r3, #12]
	RTC->ALRH = (uint16_t)0;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <enterStopMode+0x13c>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
	RTC->ALRL = (uint16_t)SLEEP_TIME;						// alarm N seconds
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <enterStopMode+0x13c>)
 8002908:	223c      	movs	r2, #60	; 0x3c
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); // exit configuration mode
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <enterStopMode+0x13c>)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4912      	ldr	r1, [pc, #72]	; (800295c <enterStopMode+0x13c>)
 8002912:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002916:	4013      	ands	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
	while (!(RTC->CRL & RTC_CRL_RTOFF));			// wait until RTOFF = 1
 800291a:	bf00      	nop
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <enterStopMode+0x13c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f9      	beq.n	800291c <enterStopMode+0xfc>

	EXTI->PR &= EXTI_PR_PR17;							// reset pending interrupts
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <enterStopMode+0x12c>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <enterStopMode+0x12c>)
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	6153      	str	r3, [r2, #20]
	RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_ALRF);	// clear alarm flag
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <enterStopMode+0x13c>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4908      	ldr	r1, [pc, #32]	; (800295c <enterStopMode+0x13c>)
 800293a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800293e:	4013      	ands	r3, r2
 8002940:	604b      	str	r3, [r1, #4]

	__WFE();								// enter stop mode
 8002942:	bf20      	wfe
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	40010400 	.word	0x40010400
 8002950:	40007000 	.word	0x40007000
 8002954:	e000ed00 	.word	0xe000ed00
 8002958:	40021000 	.word	0x40021000
 800295c:	40002800 	.word	0x40002800

08002960 <setAlarm>:
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	HAL_PWR_EnterSTANDBYMode();
}

void setAlarm(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = SLEEP_TIME;
 800296e:	233c      	movs	r3, #60	; 0x3c
 8002970:	70bb      	strb	r3, [r7, #2]
	sAlarm.Alarm = RTC_ALARM_A;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002976:	463b      	mov	r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <setAlarm+0x34>)
 800297e:	f004 fa19 	bl	8006db4 <HAL_RTC_SetAlarm_IT>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <setAlarm+0x2c>
	{
		Error_Handler();
 8002988:	f000 f820 	bl	80029cc <Error_Handler>
	}
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000a54 	.word	0x20000a54

08002998 <resetTime>:

void resetTime(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;

	sTime.Hours = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2201      	movs	r2, #1
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <resetTime+0x30>)
 80029b2:	f004 f88f 	bl	8006ad4 <HAL_RTC_SetTime>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <resetTime+0x28>
	{
		Error_Handler();
 80029bc:	f000 f806 	bl	80029cc <Error_Handler>
	}
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000a54 	.word	0x20000a54

080029cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80029d2:	e7fe      	b.n	80029d2 <Error_Handler+0x6>

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_MspInit+0x5c>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_MspInit+0x5c>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6193      	str	r3, [r2, #24]
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_MspInit+0x5c>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_MspInit+0x5c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_MspInit+0x5c>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_MspInit+0x5c>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_MspInit+0x60>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_MspInit+0x60>)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010000 	.word	0x40010000

08002a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_I2C_MspInit+0x90>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d132      	bne.n	8002abe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_I2C_MspInit+0x94>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_I2C_MspInit+0x94>)
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_I2C_MspInit+0x94>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a76:	2312      	movs	r3, #18
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <HAL_I2C_MspInit+0x98>)
 8002a86:	f000 fceb 	bl	8003460 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_I2C_MspInit+0x9c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <HAL_I2C_MspInit+0x9c>)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_I2C_MspInit+0x94>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_I2C_MspInit+0x94>)
 8002aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_I2C_MspInit+0x94>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40010c00 	.word	0x40010c00
 8002ad4:	40010000 	.word	0x40010000

08002ad8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_RTC_MspInit+0x4c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d118      	bne.n	8002b1c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002aea:	f003 f9c3 	bl	8005e74 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_RTC_MspInit+0x50>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_RTC_MspInit+0x50>)
 8002af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002af8:	61d3      	str	r3, [r2, #28]
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RTC_MspInit+0x50>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RTC_MspInit+0x54>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2029      	movs	r0, #41	; 0x29
 8002b12:	f000 fa6e 	bl	8002ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002b16:	2029      	movs	r0, #41	; 0x29
 8002b18:	f000 fa87 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40002800 	.word	0x40002800
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	4242043c 	.word	0x4242043c

08002b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_UART_MspInit+0xa4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d13d      	bne.n	8002bcc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_UART_MspInit+0xa8>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <HAL_UART_MspInit+0xa8>)
 8002b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_UART_MspInit+0xa8>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_UART_MspInit+0xa8>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_UART_MspInit+0xa8>)
 8002b6e:	f043 0308 	orr.w	r3, r3, #8
 8002b72:	6193      	str	r3, [r2, #24]
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_UART_MspInit+0xa8>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b80:	2340      	movs	r3, #64	; 0x40
 8002b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4812      	ldr	r0, [pc, #72]	; (8002bdc <HAL_UART_MspInit+0xac>)
 8002b94:	f000 fc64 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480c      	ldr	r0, [pc, #48]	; (8002bdc <HAL_UART_MspInit+0xac>)
 8002bac:	f000 fc58 	bl	8003460 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_UART_MspInit+0xb0>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <HAL_UART_MspInit+0xb0>)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010c00 	.word	0x40010c00
 8002be0:	40010000 	.word	0x40010000

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <NMI_Handler+0x4>

08002bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <HardFault_Handler+0x4>

08002bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler+0x4>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2a:	f000 f8bf 	bl	8002dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c3a:	f001 fec8 	bl	80049ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20001498 	.word	0x20001498

08002c48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <RTC_Alarm_IRQHandler+0x10>)
 8002c4e:	f004 f965 	bl	8006f1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000a54 	.word	0x20000a54

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f008 fed4 	bl	800ba38 <__errno>
 8002c90:	4602      	mov	r2, r0
 8002c92:	230c      	movs	r3, #12
 8002c94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <_sbrk+0x64>)
 8002cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20005000 	.word	0x20005000
 8002cbc:	00000400 	.word	0x00000400
 8002cc0:	20000378 	.word	0x20000378
 8002cc4:	20001788 	.word	0x20001788

08002cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cd6:	e003      	b.n	8002ce0 <LoopCopyDataInit>

08002cd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cde:	3104      	adds	r1, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ce0:	480a      	ldr	r0, [pc, #40]	; (8002d0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ce4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ce6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ce8:	d3f6      	bcc.n	8002cd8 <CopyDataInit>
  ldr r2, =_sbss
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cec:	e002      	b.n	8002cf4 <LoopFillZerobss>

08002cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cf0:	f842 3b04 	str.w	r3, [r2], #4

08002cf4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cf6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002cf8:	d3f9      	bcc.n	8002cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cfa:	f7ff ffe5 	bl	8002cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfe:	f008 fea1 	bl	800ba44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d02:	f7fe ffe3 	bl	8001ccc <main>
  bx lr
 8002d06:	4770      	bx	lr
  ldr r3, =_sidata
 8002d08:	0800e8fc 	.word	0x0800e8fc
  ldr r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d10:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 8002d14:	20000358 	.word	0x20000358
  ldr r3, = _ebss
 8002d18:	20001788 	.word	0x20001788

08002d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC1_2_IRQHandler>
	...

08002d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_Init+0x28>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_Init+0x28>)
 8002d2a:	f043 0310 	orr.w	r3, r3, #16
 8002d2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d30:	2003      	movs	r0, #3
 8002d32:	f000 f953 	bl	8002fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 f808 	bl	8002d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d3c:	f7ff fe4a 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40022000 	.word	0x40022000

08002d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_InitTick+0x54>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_InitTick+0x58>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f96b 	bl	8003046 <HAL_SYSTICK_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00e      	b.n	8002d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d80a      	bhi.n	8002d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d80:	2200      	movs	r2, #0
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f000 f933 	bl	8002ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d8c:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <HAL_InitTick+0x5c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000008 	.word	0x20000008
 8002da4:	20000010 	.word	0x20000010
 8002da8:	2000000c 	.word	0x2000000c

08002dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_IncTick+0x1c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_IncTick+0x20>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_IncTick+0x20>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	20000aa4 	.word	0x20000aa4

08002dd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd4:	4b02      	ldr	r3, [pc, #8]	; (8002de0 <HAL_GetTick+0x10>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	20000aa4 	.word	0x20000aa4

08002de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d005      	beq.n	8002e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_Delay+0x40>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e0a:	bf00      	nop
 8002e0c:	f7ff ffe0 	bl	8002dd0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f7      	bhi.n	8002e0c <HAL_Delay+0x28>
  {
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000010 	.word	0x20000010

08002e28 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_ResumeTick+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <HAL_ResumeTick+0x18>)
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <__NVIC_SetPriorityGrouping>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4906      	ldr	r1, [pc, #24]	; (8002edc <__NVIC_EnableIRQ+0x34>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100

08002ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	db0a      	blt.n	8002f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	490c      	ldr	r1, [pc, #48]	; (8002f2c <__NVIC_SetPriority+0x4c>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	0112      	lsls	r2, r2, #4
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	440b      	add	r3, r1
 8002f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f08:	e00a      	b.n	8002f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4908      	ldr	r1, [pc, #32]	; (8002f30 <__NVIC_SetPriority+0x50>)
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	3b04      	subs	r3, #4
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	761a      	strb	r2, [r3, #24]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f1c3 0307 	rsb	r3, r3, #7
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	bf28      	it	cs
 8002f52:	2304      	movcs	r3, #4
 8002f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d902      	bls.n	8002f64 <NVIC_EncodePriority+0x30>
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3b03      	subs	r3, #3
 8002f62:	e000      	b.n	8002f66 <NVIC_EncodePriority+0x32>
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	401a      	ands	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	43d9      	mvns	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	4313      	orrs	r3, r2
         );
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3724      	adds	r7, #36	; 0x24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d301      	bcc.n	8002fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00f      	b.n	8002fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <SysTick_Config+0x40>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb6:	210f      	movs	r1, #15
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f7ff ff90 	bl	8002ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc8:	2207      	movs	r2, #7
 8002fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	e000e010 	.word	0xe000e010

08002fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff2d 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003004:	f7ff ff42 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8003008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff90 	bl	8002f34 <NVIC_EncodePriority>
 8003014:	4602      	mov	r2, r0
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff5f 	bl	8002ee0 <__NVIC_SetPriority>
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff35 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffa2 	bl	8002f98 <SysTick_Config>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_FLASH_Program+0xd8>)
 800307c:	7e1b      	ldrb	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_FLASH_Program+0x26>
 8003082:	2302      	movs	r3, #2
 8003084:	e054      	b.n	8003130 <HAL_FLASH_Program+0xd0>
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <HAL_FLASH_Program+0xd8>)
 8003088:	2201      	movs	r2, #1
 800308a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800308c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003090:	f000 f8a8 	bl	80031e4 <FLASH_WaitForLastOperation>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d144      	bne.n	8003128 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80030a4:	2301      	movs	r3, #1
 80030a6:	757b      	strb	r3, [r7, #21]
 80030a8:	e007      	b.n	80030ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d102      	bne.n	80030b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80030b0:	2302      	movs	r3, #2
 80030b2:	757b      	strb	r3, [r7, #21]
 80030b4:	e001      	b.n	80030ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80030b6:	2304      	movs	r3, #4
 80030b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	75bb      	strb	r3, [r7, #22]
 80030be:	e02d      	b.n	800311c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80030c0:	7dbb      	ldrb	r3, [r7, #22]
 80030c2:	005a      	lsls	r2, r3, #1
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	eb02 0c03 	add.w	ip, r2, r3
 80030ca:	7dbb      	ldrb	r3, [r7, #22]
 80030cc:	0119      	lsls	r1, r3, #4
 80030ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d2:	f1c1 0620 	rsb	r6, r1, #32
 80030d6:	f1a1 0020 	sub.w	r0, r1, #32
 80030da:	fa22 f401 	lsr.w	r4, r2, r1
 80030de:	fa03 f606 	lsl.w	r6, r3, r6
 80030e2:	4334      	orrs	r4, r6
 80030e4:	fa23 f000 	lsr.w	r0, r3, r0
 80030e8:	4304      	orrs	r4, r0
 80030ea:	fa23 f501 	lsr.w	r5, r3, r1
 80030ee:	b2a3      	uxth	r3, r4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4660      	mov	r0, ip
 80030f4:	f000 f85a 	bl	80031ac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030fc:	f000 f872 	bl	80031e4 <FLASH_WaitForLastOperation>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_FLASH_Program+0xdc>)
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	4a0c      	ldr	r2, [pc, #48]	; (800313c <HAL_FLASH_Program+0xdc>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003116:	7dbb      	ldrb	r3, [r7, #22]
 8003118:	3301      	adds	r3, #1
 800311a:	75bb      	strb	r3, [r7, #22]
 800311c:	7dba      	ldrb	r2, [r7, #22]
 800311e:	7d7b      	ldrb	r3, [r7, #21]
 8003120:	429a      	cmp	r2, r3
 8003122:	d3cd      	bcc.n	80030c0 <HAL_FLASH_Program+0x60>
 8003124:	e000      	b.n	8003128 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003126:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_FLASH_Program+0xd8>)
 800312a:	2200      	movs	r2, #0
 800312c:	761a      	strb	r2, [r3, #24]

  return status;
 800312e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003130:	4618      	mov	r0, r3
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003138:	20000aa8 	.word	0x20000aa8
 800313c:	40022000 	.word	0x40022000

08003140 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_FLASH_Unlock+0x40>)
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_FLASH_Unlock+0x40>)
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_FLASH_Unlock+0x44>)
 800315a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_FLASH_Unlock+0x40>)
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_FLASH_Unlock+0x48>)
 8003160:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_FLASH_Unlock+0x40>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003172:	79fb      	ldrb	r3, [r7, #7]
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40022000 	.word	0x40022000
 8003184:	45670123 	.word	0x45670123
 8003188:	cdef89ab 	.word	0xcdef89ab

0800318c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_FLASH_Lock+0x1c>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_FLASH_Lock+0x1c>)
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000

080031ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <FLASH_Program_HalfWord+0x30>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <FLASH_Program_HalfWord+0x34>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <FLASH_Program_HalfWord+0x34>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	887a      	ldrh	r2, [r7, #2]
 80031ce:	801a      	strh	r2, [r3, #0]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000aa8 	.word	0x20000aa8
 80031e0:	40022000 	.word	0x40022000

080031e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff fdf0 	bl	8002dd0 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80031f2:	e010      	b.n	8003216 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d00c      	beq.n	8003216 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <FLASH_WaitForLastOperation+0x2e>
 8003202:	f7ff fde5 	bl	8002dd0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d201      	bcs.n	8003216 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e025      	b.n	8003262 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <FLASH_WaitForLastOperation+0x88>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e8      	bne.n	80031f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <FLASH_WaitForLastOperation+0x88>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <FLASH_WaitForLastOperation+0x88>)
 8003230:	2220      	movs	r2, #32
 8003232:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <FLASH_WaitForLastOperation+0x88>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <FLASH_WaitForLastOperation+0x88>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <FLASH_WaitForLastOperation+0x88>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003258:	f000 f80a 	bl	8003270 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40022000 	.word	0x40022000

08003270 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <FLASH_SetErrorCode+0x98>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <FLASH_SetErrorCode+0x9c>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f043 0302 	orr.w	r3, r3, #2
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <FLASH_SetErrorCode+0x9c>)
 8003290:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f043 0310 	orr.w	r3, r3, #16
 8003298:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <FLASH_SetErrorCode+0x98>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <FLASH_SetErrorCode+0x9c>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <FLASH_SetErrorCode+0x9c>)
 80032b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <FLASH_SetErrorCode+0x98>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <FLASH_SetErrorCode+0x9c>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <FLASH_SetErrorCode+0x9c>)
 80032d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <FLASH_SetErrorCode+0x98>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <FLASH_SetErrorCode+0x98>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f240 1201 	movw	r2, #257	; 0x101
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d106      	bne.n	80032f6 <FLASH_SetErrorCode+0x86>
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <FLASH_SetErrorCode+0x98>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <FLASH_SetErrorCode+0x98>)
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	61d3      	str	r3, [r2, #28]
}  
 80032f4:	e002      	b.n	80032fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80032f6:	4a04      	ldr	r2, [pc, #16]	; (8003308 <FLASH_SetErrorCode+0x98>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60d3      	str	r3, [r2, #12]
}  
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40022000 	.word	0x40022000
 800330c:	20000aa8 	.word	0x20000aa8

08003310 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003322:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_FLASHEx_Erase+0xd0>)
 8003324:	7e1b      	ldrb	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_FLASHEx_Erase+0x1e>
 800332a:	2302      	movs	r3, #2
 800332c:	e053      	b.n	80033d6 <HAL_FLASHEx_Erase+0xc6>
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_FLASHEx_Erase+0xd0>)
 8003330:	2201      	movs	r2, #1
 8003332:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d116      	bne.n	800336a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800333c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003340:	f7ff ff50 	bl	80031e4 <FLASH_WaitForLastOperation>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d141      	bne.n	80033ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800334a:	2001      	movs	r0, #1
 800334c:	f000 f84c 	bl	80033e8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003350:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003354:	f7ff ff46 	bl	80031e4 <FLASH_WaitForLastOperation>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_FLASHEx_Erase+0xd4>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <HAL_FLASHEx_Erase+0xd4>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6113      	str	r3, [r2, #16]
 8003368:	e031      	b.n	80033ce <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800336a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800336e:	f7ff ff39 	bl	80031e4 <FLASH_WaitForLastOperation>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d12a      	bne.n	80033ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	e019      	b.n	80033bc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	f000 f849 	bl	8003420 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800338e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003392:	f7ff ff27 	bl	80031e4 <FLASH_WaitForLastOperation>
 8003396:	4603      	mov	r3, r0
 8003398:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_FLASHEx_Erase+0xd4>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	4a11      	ldr	r2, [pc, #68]	; (80033e4 <HAL_FLASHEx_Erase+0xd4>)
 80033a0:	f023 0302 	bic.w	r3, r3, #2
 80033a4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	601a      	str	r2, [r3, #0]
            break;
 80033b2:	e00c      	b.n	80033ce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	029a      	lsls	r2, r3, #10
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3dc      	bcc.n	8003388 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_FLASHEx_Erase+0xd0>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	761a      	strb	r2, [r3, #24]

  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000aa8 	.word	0x20000aa8
 80033e4:	40022000 	.word	0x40022000

080033e8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <FLASH_MassErase+0x30>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <FLASH_MassErase+0x34>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <FLASH_MassErase+0x34>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <FLASH_MassErase+0x34>)
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <FLASH_MassErase+0x34>)
 8003408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000aa8 	.word	0x20000aa8
 800341c:	40022000 	.word	0x40022000

08003420 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <FLASH_PageErase+0x38>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <FLASH_PageErase+0x3c>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <FLASH_PageErase+0x3c>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <FLASH_PageErase+0x3c>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <FLASH_PageErase+0x3c>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	4a05      	ldr	r2, [pc, #20]	; (800345c <FLASH_PageErase+0x3c>)
 8003446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000aa8 	.word	0x20000aa8
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b08b      	sub	sp, #44	; 0x2c
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800346a:	2300      	movs	r3, #0
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003472:	e127      	b.n	80036c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003474:	2201      	movs	r2, #1
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	429a      	cmp	r2, r3
 800348e:	f040 8116 	bne.w	80036be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b12      	cmp	r3, #18
 8003498:	d034      	beq.n	8003504 <HAL_GPIO_Init+0xa4>
 800349a:	2b12      	cmp	r3, #18
 800349c:	d80d      	bhi.n	80034ba <HAL_GPIO_Init+0x5a>
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d02b      	beq.n	80034fa <HAL_GPIO_Init+0x9a>
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d804      	bhi.n	80034b0 <HAL_GPIO_Init+0x50>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d031      	beq.n	800350e <HAL_GPIO_Init+0xae>
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d01c      	beq.n	80034e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ae:	e048      	b.n	8003542 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d043      	beq.n	800353c <HAL_GPIO_Init+0xdc>
 80034b4:	2b11      	cmp	r3, #17
 80034b6:	d01b      	beq.n	80034f0 <HAL_GPIO_Init+0x90>
          break;
 80034b8:	e043      	b.n	8003542 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034ba:	4a89      	ldr	r2, [pc, #548]	; (80036e0 <HAL_GPIO_Init+0x280>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d026      	beq.n	800350e <HAL_GPIO_Init+0xae>
 80034c0:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_GPIO_Init+0x280>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d806      	bhi.n	80034d4 <HAL_GPIO_Init+0x74>
 80034c6:	4a87      	ldr	r2, [pc, #540]	; (80036e4 <HAL_GPIO_Init+0x284>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d020      	beq.n	800350e <HAL_GPIO_Init+0xae>
 80034cc:	4a86      	ldr	r2, [pc, #536]	; (80036e8 <HAL_GPIO_Init+0x288>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01d      	beq.n	800350e <HAL_GPIO_Init+0xae>
          break;
 80034d2:	e036      	b.n	8003542 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80034d4:	4a85      	ldr	r2, [pc, #532]	; (80036ec <HAL_GPIO_Init+0x28c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d019      	beq.n	800350e <HAL_GPIO_Init+0xae>
 80034da:	4a85      	ldr	r2, [pc, #532]	; (80036f0 <HAL_GPIO_Init+0x290>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d016      	beq.n	800350e <HAL_GPIO_Init+0xae>
 80034e0:	4a84      	ldr	r2, [pc, #528]	; (80036f4 <HAL_GPIO_Init+0x294>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0xae>
          break;
 80034e6:	e02c      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	623b      	str	r3, [r7, #32]
          break;
 80034ee:	e028      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	3304      	adds	r3, #4
 80034f6:	623b      	str	r3, [r7, #32]
          break;
 80034f8:	e023      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	3308      	adds	r3, #8
 8003500:	623b      	str	r3, [r7, #32]
          break;
 8003502:	e01e      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	330c      	adds	r3, #12
 800350a:	623b      	str	r3, [r7, #32]
          break;
 800350c:	e019      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003516:	2304      	movs	r3, #4
 8003518:	623b      	str	r3, [r7, #32]
          break;
 800351a:	e012      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003524:	2308      	movs	r3, #8
 8003526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	611a      	str	r2, [r3, #16]
          break;
 800352e:	e008      	b.n	8003542 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003530:	2308      	movs	r3, #8
 8003532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	615a      	str	r2, [r3, #20]
          break;
 800353a:	e002      	b.n	8003542 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800353c:	2300      	movs	r3, #0
 800353e:	623b      	str	r3, [r7, #32]
          break;
 8003540:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2bff      	cmp	r3, #255	; 0xff
 8003546:	d801      	bhi.n	800354c <HAL_GPIO_Init+0xec>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	e001      	b.n	8003550 <HAL_GPIO_Init+0xf0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2bff      	cmp	r3, #255	; 0xff
 8003556:	d802      	bhi.n	800355e <HAL_GPIO_Init+0xfe>
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	e002      	b.n	8003564 <HAL_GPIO_Init+0x104>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	3b08      	subs	r3, #8
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	210f      	movs	r1, #15
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	6a39      	ldr	r1, [r7, #32]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	431a      	orrs	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8096 	beq.w	80036be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003592:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_GPIO_Init+0x298>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_GPIO_Init+0x298>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6193      	str	r3, [r2, #24]
 800359e:	4b56      	ldr	r3, [pc, #344]	; (80036f8 <HAL_GPIO_Init+0x298>)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035aa:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_GPIO_Init+0x29c>)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4b      	ldr	r2, [pc, #300]	; (8003700 <HAL_GPIO_Init+0x2a0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_GPIO_Init+0x19e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4a      	ldr	r2, [pc, #296]	; (8003704 <HAL_GPIO_Init+0x2a4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00d      	beq.n	80035fa <HAL_GPIO_Init+0x19a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a49      	ldr	r2, [pc, #292]	; (8003708 <HAL_GPIO_Init+0x2a8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x196>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_GPIO_Init+0x2ac>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_Init+0x192>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e006      	b.n	8003600 <HAL_GPIO_Init+0x1a0>
 80035f2:	2304      	movs	r3, #4
 80035f4:	e004      	b.n	8003600 <HAL_GPIO_Init+0x1a0>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_Init+0x1a0>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_GPIO_Init+0x1a0>
 80035fe:	2300      	movs	r3, #0
 8003600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003602:	f002 0203 	and.w	r2, r2, #3
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	4093      	lsls	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003610:	493a      	ldr	r1, [pc, #232]	; (80036fc <HAL_GPIO_Init+0x29c>)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800362a:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4938      	ldr	r1, [pc, #224]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
 8003636:	e006      	b.n	8003646 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003638:	4b35      	ldr	r3, [pc, #212]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	43db      	mvns	r3, r3
 8003640:	4933      	ldr	r1, [pc, #204]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003642:	4013      	ands	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003652:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	492e      	ldr	r1, [pc, #184]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
 800365e:	e006      	b.n	800366e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	43db      	mvns	r3, r3
 8003668:	4929      	ldr	r1, [pc, #164]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 800366a:	4013      	ands	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	4924      	ldr	r1, [pc, #144]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	43db      	mvns	r3, r3
 8003690:	491f      	ldr	r1, [pc, #124]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 8003692:	4013      	ands	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	491a      	ldr	r1, [pc, #104]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60cb      	str	r3, [r1, #12]
 80036ae:	e006      	b.n	80036be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	4915      	ldr	r1, [pc, #84]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	3301      	adds	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f47f aed0 	bne.w	8003474 <HAL_GPIO_Init+0x14>
  }
}
 80036d4:	bf00      	nop
 80036d6:	372c      	adds	r7, #44	; 0x2c
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	10210000 	.word	0x10210000
 80036e4:	10110000 	.word	0x10110000
 80036e8:	10120000 	.word	0x10120000
 80036ec:	10310000 	.word	0x10310000
 80036f0:	10320000 	.word	0x10320000
 80036f4:	10220000 	.word	0x10220000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010800 	.word	0x40010800
 8003704:	40010c00 	.word	0x40010c00
 8003708:	40011000 	.word	0x40011000
 800370c:	40011400 	.word	0x40011400
 8003710:	40010400 	.word	0x40010400

08003714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
 8003720:	4613      	mov	r3, r2
 8003722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003724:	787b      	ldrb	r3, [r7, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003730:	e003      	b.n	800373a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e11f      	b.n	8003996 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff f964 	bl	8002a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f002 ff46 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a7b      	ldr	r2, [pc, #492]	; (80039a0 <HAL_I2C_Init+0x25c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a7a      	ldr	r2, [pc, #488]	; (80039a4 <HAL_I2C_Init+0x260>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a77      	ldr	r2, [pc, #476]	; (80039a8 <HAL_I2C_Init+0x264>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0db      	b.n	8003996 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a72      	ldr	r2, [pc, #456]	; (80039ac <HAL_I2C_Init+0x268>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a64      	ldr	r2, [pc, #400]	; (80039a0 <HAL_I2C_Init+0x25c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a63      	ldr	r2, [pc, #396]	; (80039b0 <HAL_I2C_Init+0x26c>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4956      	ldr	r1, [pc, #344]	; (80039a0 <HAL_I2C_Init+0x25c>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d80d      	bhi.n	8003868 <HAL_I2C_Init+0x124>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	2b04      	cmp	r3, #4
 8003862:	bf38      	it	cc
 8003864:	2304      	movcc	r3, #4
 8003866:	e04f      	b.n	8003908 <HAL_I2C_Init+0x1c4>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <HAL_I2C_Init+0x150>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e012      	b.n	80038ba <HAL_I2C_Init+0x176>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e58      	subs	r0, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	0099      	lsls	r1, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x17e>
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_I2C_Init+0x1c4>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10e      	bne.n	80038e8 <HAL_I2C_Init+0x1a4>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e58      	subs	r0, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	440b      	add	r3, r1
 80038d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Init+0x1c4>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	0099      	lsls	r1, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6911      	ldr	r1, [r2, #16]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	4311      	orrs	r1, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	000186a0 	.word	0x000186a0
 80039a4:	001e847f 	.word	0x001e847f
 80039a8:	003d08ff 	.word	0x003d08ff
 80039ac:	431bde83 	.word	0x431bde83
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	817b      	strh	r3, [r7, #10]
 80039c6:	460b      	mov	r3, r1
 80039c8:	813b      	strh	r3, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ce:	f7ff f9ff 	bl	8002dd0 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b20      	cmp	r3, #32
 80039de:	f040 80d9 	bne.w	8003b94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2319      	movs	r3, #25
 80039e8:	2201      	movs	r2, #1
 80039ea:	496d      	ldr	r1, [pc, #436]	; (8003ba0 <HAL_I2C_Mem_Write+0x1ec>)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fcbb 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0cc      	b.n	8003b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_I2C_Mem_Write+0x56>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0c5      	b.n	8003b96 <HAL_I2C_Mem_Write+0x1e2>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d007      	beq.n	8003a30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	; 0x21
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2240      	movs	r2, #64	; 0x40
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ba4 <HAL_I2C_Mem_Write+0x1f0>)
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a72:	88f8      	ldrh	r0, [r7, #6]
 8003a74:	893a      	ldrh	r2, [r7, #8]
 8003a76:	8979      	ldrh	r1, [r7, #10]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4603      	mov	r3, r0
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 faf2 	bl	800406c <I2C_RequestMemoryWrite>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d052      	beq.n	8003b34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e081      	b.n	8003b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fd3c 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06b      	b.n	8003b96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_I2C_Mem_Write+0x180>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d017      	beq.n	8003b34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1aa      	bne.n	8003a92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fd28 	bl	8004596 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d107      	bne.n	8003b64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e016      	b.n	8003b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	00100002 	.word	0x00100002
 8003ba4:	ffff0000 	.word	0xffff0000

08003ba8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	817b      	strh	r3, [r7, #10]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	813b      	strh	r3, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc6:	f7ff f903 	bl	8002dd0 <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f040 823d 	bne.w	8004054 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2319      	movs	r3, #25
 8003be0:	2201      	movs	r2, #1
 8003be2:	4981      	ldr	r1, [pc, #516]	; (8003de8 <HAL_I2C_Mem_Read+0x240>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fbbf 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e230      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Mem_Read+0x5a>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e229      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d007      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2222      	movs	r2, #34	; 0x22
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a61      	ldr	r2, [pc, #388]	; (8003dec <HAL_I2C_Mem_Read+0x244>)
 8003c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6a:	88f8      	ldrh	r0, [r7, #6]
 8003c6c:	893a      	ldrh	r2, [r7, #8]
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4603      	mov	r3, r0
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa8c 	bl	8004198 <I2C_RequestMemoryRead>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1e5      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e1b9      	b.n	800402e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d11d      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cfa:	b662      	cpsie	i
 8003cfc:	e197      	b.n	800402e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d11d      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d3e:	b662      	cpsie	i
 8003d40:	e175      	b.n	800402e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d68:	e161      	b.n	800402e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f200 811a 	bhi.w	8003fa8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fc49 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e162      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc2:	e134      	b.n	800402e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d150      	bne.n	8003e6e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4906      	ldr	r1, [pc, #24]	; (8003df0 <HAL_I2C_Mem_Read+0x248>)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fac6 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e137      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000
 8003df0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003df4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e38:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e6c:	e0df      	b.n	800402e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2200      	movs	r2, #0
 8003e76:	497a      	ldr	r1, [pc, #488]	; (8004060 <HAL_I2C_Mem_Read+0x4b8>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fa75 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0e6      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e98:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ecc:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_I2C_Mem_Read+0x4bc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	4a65      	ldr	r2, [pc, #404]	; (8004068 <HAL_I2C_Mem_Read+0x4c0>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0a1a      	lsrs	r2, r3, #8
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00da      	lsls	r2, r3, #3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d117      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f14:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e099      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d1da      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f72:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa6:	e042      	b.n	800402e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fb33 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04c      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d118      	bne.n	800402e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	f47f ae99 	bne.w	8003d6a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3728      	adds	r7, #40	; 0x28
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	00010004 	.word	0x00010004
 8004064:	20000008 	.word	0x20000008
 8004068:	14f8b589 	.word	0x14f8b589

0800406c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	2200      	movs	r2, #0
 800409e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f960 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040bc:	d103      	bne.n	80040c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e05f      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	492d      	ldr	r1, [pc, #180]	; (8004194 <I2C_RequestMemoryWrite+0x128>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f998 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04c      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	6a39      	ldr	r1, [r7, #32]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fa02 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e02b      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004138:	893b      	ldrh	r3, [r7, #8]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	e021      	b.n	8004188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f9dc 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d107      	bne.n	800417a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e005      	b.n	800418a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800417e:	893b      	ldrh	r3, [r7, #8]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	00010002 	.word	0x00010002

08004198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2200      	movs	r2, #0
 80041da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f8c2 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d103      	bne.n	8004202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e0aa      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	4952      	ldr	r1, [pc, #328]	; (8004364 <I2C_RequestMemoryRead+0x1cc>)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8fa 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e097      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f964 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b04      	cmp	r3, #4
 8004258:	d107      	bne.n	800426a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e076      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e021      	b.n	80042c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f93e 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d107      	bne.n	80042b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e050      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ba:	893b      	ldrh	r3, [r7, #8]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	6a39      	ldr	r1, [r7, #32]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f923 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d107      	bne.n	80042ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e035      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2200      	movs	r2, #0
 8004308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f82b 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d103      	bne.n	8004330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e013      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	4906      	ldr	r1, [pc, #24]	; (8004364 <I2C_RequestMemoryRead+0x1cc>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f863 	bl	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010002 	.word	0x00010002

08004368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004378:	e025      	b.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d021      	beq.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fe fd25 	bl	8002dd0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d116      	bne.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e023      	b.n	800440e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10d      	bne.n	80043ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	e00c      	b.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	429a      	cmp	r2, r3
 800440a:	d0b6      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004424:	e051      	b.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004434:	d123      	bne.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004444:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800444e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e046      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d021      	beq.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fe fca3 	bl	8002dd0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e020      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d10c      	bne.n	80044ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4013      	ands	r3, r2
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e00b      	b.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d18d      	bne.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004520:	e02d      	b.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8ce 	bl	80046c4 <I2C_IsAcknowledgeFailed>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e02d      	b.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d021      	beq.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe fc49 	bl	8002dd0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e007      	b.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d1ca      	bne.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a2:	e02d      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f88d 	bl	80046c4 <I2C_IsAcknowledgeFailed>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e02d      	b.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d021      	beq.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fe fc08 	bl	8002dd0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e007      	b.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d1ca      	bne.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004624:	e042      	b.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b10      	cmp	r3, #16
 8004632:	d119      	bne.n	8004668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0210 	mvn.w	r2, #16
 800463c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e029      	b.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fe fbb2 	bl	8002dd0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e007      	b.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d1b5      	bne.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d11b      	bne.n	8004714 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f043 0204 	orr.w	r2, r3, #4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004722:	b08b      	sub	sp, #44	; 0x2c
 8004724:	af06      	add	r7, sp, #24
 8004726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e0fd      	b.n	800492e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f006 feb0 	bl	800b4ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2203      	movs	r2, #3
 8004750:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f003 f887 	bl	800786c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	687e      	ldr	r6, [r7, #4]
 8004766:	466d      	mov	r5, sp
 8004768:	f106 0410 	add.w	r4, r6, #16
 800476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	602b      	str	r3, [r5, #0]
 8004774:	1d33      	adds	r3, r6, #4
 8004776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004778:	6838      	ldr	r0, [r7, #0]
 800477a:	f003 f851 	bl	8007820 <USB_CoreInit>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0ce      	b.n	800492e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f003 f882 	bl	80078a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	e04c      	b.n	800483c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	3301      	adds	r3, #1
 80047b4:	2201      	movs	r2, #1
 80047b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	440b      	add	r3, r1
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	b298      	uxth	r0, r3
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	3336      	adds	r3, #54	; 0x36
 80047e0:	4602      	mov	r2, r0
 80047e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	3303      	adds	r3, #3
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	440b      	add	r3, r1
 8004808:	3338      	adds	r3, #56	; 0x38
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	440b      	add	r3, r1
 800481c:	333c      	adds	r3, #60	; 0x3c
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3340      	adds	r3, #64	; 0x40
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	3301      	adds	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3ad      	bcc.n	80047a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	e044      	b.n	80048d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	440b      	add	r3, r1
 8004870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	3301      	adds	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d3b5      	bcc.n	800484c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	687e      	ldr	r6, [r7, #4]
 80048e8:	466d      	mov	r5, sp
 80048ea:	f106 0410 	add.w	r4, r6, #16
 80048ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	1d33      	adds	r3, r6, #4
 80048f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048fa:	6838      	ldr	r0, [r7, #0]
 80048fc:	f002 ffdc 	bl	80078b8 <USB_DevInit>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00d      	b.n	800492e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f004 ff76 	bl	8009818 <USB_DevDisconnect>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004936 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_PCD_Start+0x16>
 8004948:	2302      	movs	r3, #2
 800494a:	e016      	b.n	800497a <HAL_PCD_Start+0x44>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f002 ff71 	bl	8007840 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800495e:	2101      	movs	r1, #1
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f007 f832 	bl	800b9ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f004 ff4a 	bl	8009804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_PCD_Stop+0x16>
 8004994:	2302      	movs	r3, #2
 8004996:	e016      	b.n	80049c6 <HAL_PCD_Stop+0x44>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f002 ff61 	bl	800786c <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 80049aa:	2100      	movs	r1, #0
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f007 f80c 	bl	800b9ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 ff2e 	bl	8009818 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b088      	sub	sp, #32
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 ff26 	bl	800982c <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d102      	bne.n	80049f2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fb61 	bl	80050b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 ff18 	bl	800982c <USB_ReadInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d112      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f006 fdbe 	bl	800b5a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a26:	2100      	movs	r1, #0
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f925 	bl	8004c78 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f004 fefa 	bl	800982c <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a42:	d10b      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a56:	b292      	uxth	r2, r2
 8004a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f004 fee3 	bl	800982c <USB_ReadInterrupts>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d10b      	bne.n	8004a8a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a84:	b292      	uxth	r2, r2
 8004a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fecc 	bl	800982c <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9e:	d126      	bne.n	8004aee <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0208 	bic.w	r2, r2, #8
 8004aca:	b292      	uxth	r2, r2
 8004acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f006 fd9f 	bl	800b614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ae8:	b292      	uxth	r2, r2
 8004aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f004 fe9a 	bl	800982c <USB_ReadInterrupts>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b02:	f040 8084 	bne.w	8004c0e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e011      	b.n	8004b30 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	7ffb      	ldrb	r3, [r7, #31]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	7ffb      	ldrb	r3, [r7, #31]
 8004b1a:	8812      	ldrh	r2, [r2, #0]
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	f107 0120 	add.w	r1, r7, #32
 8004b24:	440b      	add	r3, r1
 8004b26:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004b2a:	7ffb      	ldrb	r3, [r7, #31]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	7ffb      	ldrb	r3, [r7, #31]
 8004b32:	2b07      	cmp	r3, #7
 8004b34:	d9ea      	bls.n	8004b0c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	b292      	uxth	r2, r2
 8004b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004b66:	bf00      	nop
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f6      	beq.n	8004b68 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8c:	b292      	uxth	r2, r2
 8004b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e010      	b.n	8004bba <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004b98:	7ffb      	ldrb	r3, [r7, #31]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	7ffa      	ldrb	r2, [r7, #31]
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	440a      	add	r2, r1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	f107 0120 	add.w	r1, r7, #32
 8004bac:	440b      	add	r3, r1
 8004bae:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004bb2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004bb4:	7ffb      	ldrb	r3, [r7, #31]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	7ffb      	ldrb	r3, [r7, #31]
 8004bbc:	2b07      	cmp	r3, #7
 8004bbe:	d9eb      	bls.n	8004b98 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bea:	b292      	uxth	r2, r2
 8004bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0204 	orr.w	r2, r2, #4
 8004c02:	b292      	uxth	r2, r2
 8004c04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f006 fce9 	bl	800b5e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f004 fe0a 	bl	800982c <USB_ReadInterrupts>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c22:	d10e      	bne.n	8004c42 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c36:	b292      	uxth	r2, r2
 8004c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f006 fca2 	bl	800b586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 fdf0 	bl	800982c <USB_ReadInterrupts>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c56:	d10b      	bne.n	8004c70 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004c70:	bf00      	nop
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_PCD_SetAddress+0x1a>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e013      	b.n	8004cba <HAL_PCD_SetAddress+0x42>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 fd97 	bl	80097de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	4608      	mov	r0, r1
 8004ccc:	4611      	mov	r1, r2
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	70fb      	strb	r3, [r7, #3]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	803b      	strh	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da0e      	bge.n	8004d06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	705a      	strb	r2, [r3, #1]
 8004d04:	e00e      	b.n	8004d24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	f003 0207 	and.w	r2, r3, #7
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d30:	883a      	ldrh	r2, [r7, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	78ba      	ldrb	r2, [r7, #2]
 8004d3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d4e:	78bb      	ldrb	r3, [r7, #2]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d102      	bne.n	8004d5a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_PCD_EP_Open+0xa6>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e00e      	b.n	8004d86 <HAL_PCD_EP_Open+0xc4>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f002 fdbe 	bl	80078f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004d84:	7afb      	ldrb	r3, [r7, #11]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	460b      	mov	r3, r1
 8004d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	da0e      	bge.n	8004dc0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	705a      	strb	r2, [r3, #1]
 8004dbe:	e00e      	b.n	8004dde <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 0207 	and.w	r2, r3, #7
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_PCD_EP_Close+0x6a>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e00e      	b.n	8004e16 <HAL_PCD_EP_Close+0x88>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68f9      	ldr	r1, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f003 f8e0 	bl	8007fcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
 8004e30:	f003 0207 	and.w	r2, r3, #7
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e5e:	7afb      	ldrb	r3, [r7, #11]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6979      	ldr	r1, [r7, #20]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f003 fa92 	bl	80083a4 <USB_EPStartXfer>
 8004e80:	e005      	b.n	8004e8e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f003 fa8b 	bl	80083a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	f003 0207 	and.w	r2, r3, #7
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f1e:	7afb      	ldrb	r3, [r7, #11]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 fa38 	bl	80083a4 <USB_EPStartXfer>
 8004f34:	e005      	b.n	8004f42 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 fa31 	bl	80083a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	f003 0207 	and.w	r2, r3, #7
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d901      	bls.n	8004f6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e04c      	b.n	8005004 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da0e      	bge.n	8004f90 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	705a      	strb	r2, [r3, #1]
 8004f8e:	e00c      	b.n	8004faa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_PCD_EP_SetStall+0x7e>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e01c      	b.n	8005004 <HAL_PCD_EP_SetStall+0xb8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f004 fb03 	bl	80095e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d108      	bne.n	8004ffa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f004 fc28 	bl	800984a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d901      	bls.n	800502a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e040      	b.n	80050ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800502a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800502e:	2b00      	cmp	r3, #0
 8005030:	da0e      	bge.n	8005050 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	705a      	strb	r2, [r3, #1]
 800504e:	e00e      	b.n	800506e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	f003 0207 	and.w	r2, r3, #7
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_PCD_EP_ClrStall+0x82>
 800508a:	2302      	movs	r3, #2
 800508c:	e00e      	b.n	80050ac <HAL_PCD_EP_ClrStall+0xa0>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	4618      	mov	r0, r3
 800509e:	f004 faf1 	bl	8009684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	; 0x38
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050bc:	e2df      	b.n	800567e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80050c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80050d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f040 8158 	bne.w	800538e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80050de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d152      	bne.n	800518e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	81fb      	strh	r3, [r7, #14]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	89fb      	ldrh	r3, [r7, #14]
 8005100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3328      	adds	r3, #40	; 0x28
 8005110:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	3302      	adds	r3, #2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	441a      	add	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800514c:	2100      	movs	r1, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f006 f9ff 	bl	800b552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 828e 	beq.w	800567e <PCD_EP_ISR_Handler+0x5ca>
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 8289 	bne.w	800567e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	b292      	uxth	r2, r2
 8005180:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800518c:	e277      	b.n	800567e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800519e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d034      	beq.n	8005212 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4413      	add	r3, r2
 80051bc:	3306      	adds	r3, #6
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f004 fb7e 	bl	80098e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051f8:	4013      	ands	r3, r2
 80051fa:	823b      	strh	r3, [r7, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	8a3a      	ldrh	r2, [r7, #16]
 8005202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005206:	b292      	uxth	r2, r2
 8005208:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f006 f974 	bl	800b4f8 <HAL_PCD_SetupStageCallback>
 8005210:	e235      	b.n	800567e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005212:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005216:	2b00      	cmp	r3, #0
 8005218:	f280 8231 	bge.w	800567e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29a      	uxth	r2, r3
 8005224:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005228:	4013      	ands	r3, r2
 800522a:	83bb      	strh	r3, [r7, #28]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	8bba      	ldrh	r2, [r7, #28]
 8005232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005236:	b292      	uxth	r2, r2
 8005238:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	3306      	adds	r3, #6
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d019      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x1ee>
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	6959      	ldr	r1, [r3, #20]
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005286:	b29b      	uxth	r3, r3
 8005288:	f004 fb2e 	bl	80098e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	441a      	add	r2, r3
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800529a:	2100      	movs	r1, #0
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f006 f93d 	bl	800b51c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	4413      	add	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d112      	bne.n	80052f0 <PCD_EP_ISR_Handler+0x23c>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e02f      	b.n	8005350 <PCD_EP_ISR_Handler+0x29c>
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b3e      	cmp	r3, #62	; 0x3e
 80052f6:	d813      	bhi.n	8005320 <PCD_EP_ISR_Handler+0x26c>
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <PCD_EP_ISR_Handler+0x25e>
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	3301      	adds	r3, #1
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	b29b      	uxth	r3, r3
 8005316:	029b      	lsls	r3, r3, #10
 8005318:	b29a      	uxth	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e017      	b.n	8005350 <PCD_EP_ISR_Handler+0x29c>
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <PCD_EP_ISR_Handler+0x286>
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	3b01      	subs	r3, #1
 8005338:	633b      	str	r3, [r7, #48]	; 0x30
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	b29b      	uxth	r3, r3
 800533e:	029b      	lsls	r3, r3, #10
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534a:	b29a      	uxth	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	827b      	strh	r3, [r7, #18]
 8005362:	8a7b      	ldrh	r3, [r7, #18]
 8005364:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005368:	827b      	strh	r3, [r7, #18]
 800536a:	8a7b      	ldrh	r3, [r7, #18]
 800536c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005370:	827b      	strh	r3, [r7, #18]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	8a7b      	ldrh	r3, [r7, #18]
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
 800538c:	e177      	b.n	800567e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f280 80ea 	bge.w	800557e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053c0:	4013      	ands	r3, r2
 80053c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053d8:	b292      	uxth	r2, r2
 80053da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	7b1b      	ldrb	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d122      	bne.n	8005440 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	3306      	adds	r3, #6
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005422:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8087 	beq.w	800553a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	6959      	ldr	r1, [r3, #20]
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	88da      	ldrh	r2, [r3, #6]
 8005438:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800543a:	f004 fa55 	bl	80098e8 <USB_ReadPMA>
 800543e:	e07c      	b.n	800553a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d108      	bne.n	800545a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800544a:	461a      	mov	r2, r3
 800544c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f923 	bl	800569a <HAL_PCD_EP_DB_Receive>
 8005454:	4603      	mov	r3, r0
 8005456:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005458:	e06f      	b.n	800553a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	847b      	strh	r3, [r7, #34]	; 0x22
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	441a      	add	r2, r3
 8005484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005496:	b29b      	uxth	r3, r3
 8005498:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d021      	beq.n	80054f8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	3302      	adds	r3, #2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80054de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02a      	beq.n	800553a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	6959      	ldr	r1, [r3, #20]
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	891a      	ldrh	r2, [r3, #8]
 80054f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054f2:	f004 f9f9 	bl	80098e8 <USB_ReadPMA>
 80054f6:	e020      	b.n	800553a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	3306      	adds	r3, #6
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005520:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	6959      	ldr	r1, [r3, #20]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	895a      	ldrh	r2, [r3, #10]
 8005534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005536:	f004 f9d7 	bl	80098e8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005540:	441a      	add	r2, r3
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554c:	441a      	add	r2, r3
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <PCD_EP_ISR_Handler+0x4b0>
 800555a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	429a      	cmp	r2, r3
 8005562:	d206      	bcs.n	8005572 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f005 ffd6 	bl	800b51c <HAL_PCD_DataOutStageCallback>
 8005570:	e005      	b.n	800557e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f002 ff13 	bl	80083a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800557e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d07a      	beq.n	800567e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8005588:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	843b      	strh	r3, [r7, #32]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	8c3b      	ldrh	r3, [r7, #32]
 80055c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d108      	bne.n	80055ee <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d146      	bne.n	8005672 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80055e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d141      	bne.n	8005672 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4413      	add	r3, r2
 8005602:	3302      	adds	r3, #2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005616:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	8bfb      	ldrh	r3, [r7, #30]
 800561e:	429a      	cmp	r2, r3
 8005620:	d906      	bls.n	8005630 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	8bfb      	ldrh	r3, [r7, #30]
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	619a      	str	r2, [r3, #24]
 800562e:	e002      	b.n	8005636 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	2200      	movs	r2, #0
 8005634:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f005 ff84 	bl	800b552 <HAL_PCD_DataInStageCallback>
 800564a:	e018      	b.n	800567e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	8bfb      	ldrh	r3, [r7, #30]
 8005652:	441a      	add	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	8bfb      	ldrh	r3, [r7, #30]
 800565e:	441a      	add	r2, r3
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800566a:	4618      	mov	r0, r3
 800566c:	f002 fe9a 	bl	80083a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005670:	e005      	b.n	800567e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005672:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005674:	461a      	mov	r2, r3
 8005676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f91b 	bl	80058b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005686:	b29b      	uxth	r3, r3
 8005688:	b21b      	sxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	f6ff ad17 	blt.w	80050be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3738      	adds	r7, #56	; 0x38
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b088      	sub	sp, #32
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	4613      	mov	r3, r2
 80056a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d07e      	beq.n	80057b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	3302      	adds	r3, #2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d306      	bcc.n	80056f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	8b7b      	ldrh	r3, [r7, #26]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	619a      	str	r2, [r3, #24]
 80056f2:	e002      	b.n	80056fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d123      	bne.n	800574a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	833b      	strh	r3, [r7, #24]
 800571e:	8b3b      	ldrh	r3, [r7, #24]
 8005720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005724:	833b      	strh	r3, [r7, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8b3b      	ldrh	r3, [r7, #24]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01f      	beq.n	8005794 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	82fb      	strh	r3, [r7, #22]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	8afb      	ldrh	r3, [r7, #22]
 8005780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005794:	8b7b      	ldrh	r3, [r7, #26]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8087 	beq.w	80058aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	891a      	ldrh	r2, [r3, #8]
 80057a8:	8b7b      	ldrh	r3, [r7, #26]
 80057aa:	f004 f89d 	bl	80098e8 <USB_ReadPMA>
 80057ae:	e07c      	b.n	80058aa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	3306      	adds	r3, #6
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	8b7b      	ldrh	r3, [r7, #26]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d306      	bcc.n	80057f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	8b7b      	ldrh	r3, [r7, #26]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	619a      	str	r2, [r3, #24]
 80057f0:	e002      	b.n	80057f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d123      	bne.n	8005848 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	83fb      	strh	r3, [r7, #30]
 800581c:	8bfb      	ldrh	r3, [r7, #30]
 800581e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005822:	83fb      	strh	r3, [r7, #30]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8bfb      	ldrh	r3, [r7, #30]
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11f      	bne.n	8005892 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	83bb      	strh	r3, [r7, #28]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	441a      	add	r2, r3
 800587c:	8bbb      	ldrh	r3, [r7, #28]
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005892:	8b7b      	ldrh	r3, [r7, #26]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6959      	ldr	r1, [r3, #20]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	895a      	ldrh	r2, [r3, #10]
 80058a4:	8b7b      	ldrh	r3, [r7, #26]
 80058a6:	f004 f81f 	bl	80098e8 <USB_ReadPMA>
    }
  }

  return count;
 80058aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b092      	sub	sp, #72	; 0x48
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8132 	beq.w	8005b32 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	3302      	adds	r3, #2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058fe:	429a      	cmp	r2, r3
 8005900:	d906      	bls.n	8005910 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	619a      	str	r2, [r3, #24]
 800590e:	e002      	b.n	8005916 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2200      	movs	r2, #0
 8005914:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12c      	bne.n	8005978 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f005 fe14 	bl	800b552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 822f 	beq.w	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005950:	827b      	strh	r3, [r7, #18]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	8a7b      	ldrh	r3, [r7, #18]
 8005962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800596e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005972:	b29b      	uxth	r3, r3
 8005974:	8013      	strh	r3, [r2, #0]
 8005976:	e20d      	b.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01f      	beq.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	f040 81e3 	bne.w	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059d4:	441a      	add	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059e0:	441a      	add	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d309      	bcc.n	8005a06 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	621a      	str	r2, [r3, #32]
 8005a04:	e014      	b.n	8005a30 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8005a0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a1a:	e009      	b.n	8005a30 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d155      	bne.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x230>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	011a      	lsls	r2, r3, #4
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d112      	bne.n	8005a8c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	e047      	b.n	8005b1c <HAL_PCD_EP_DB_Transmit+0x268>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a90:	d811      	bhi.n	8005ab6 <HAL_PCD_EP_DB_Transmit+0x202>
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e032      	b.n	8005b1c <HAL_PCD_EP_DB_Transmit+0x268>
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <HAL_PCD_EP_DB_Transmit+0x218>
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	e01b      	b.n	8005b1c <HAL_PCD_EP_DB_Transmit+0x268>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d117      	bne.n	8005b1c <HAL_PCD_EP_DB_Transmit+0x268>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	4413      	add	r3, r2
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	011a      	lsls	r2, r3, #4
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6959      	ldr	r1, [r3, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	891a      	ldrh	r2, [r3, #8]
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f003 fe98 	bl	8009860 <USB_WritePMA>
 8005b30:	e130      	b.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	3306      	adds	r3, #6
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b5a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d306      	bcc.n	8005b74 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b6c:	1ad2      	subs	r2, r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	619a      	str	r2, [r3, #24]
 8005b72:	e002      	b.n	8005b7a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12c      	bne.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f005 fce2 	bl	800b552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 80fd 	bne.w	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e0db      	b.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d11f      	bne.n	8005c26 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 80b1 	bne.w	8005d94 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c38:	441a      	add	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c44:	441a      	add	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d309      	bcc.n	8005c6a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6a1a      	ldr	r2, [r3, #32]
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	621a      	str	r2, [r3, #32]
 8005c68:	e014      	b.n	8005c94 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8005c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c7e:	e009      	b.n	8005c94 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d155      	bne.n	8005d4e <HAL_PCD_EP_DB_Transmit+0x49a>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	4413      	add	r3, r2
 8005cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d112      	bne.n	8005cf6 <HAL_PCD_EP_DB_Transmit+0x442>
 8005cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	e044      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfa:	d811      	bhi.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x46c>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x45e>
 8005d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0e:	3301      	adds	r3, #1
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e02f      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	f003 031f 	and.w	r3, r3, #31
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <HAL_PCD_EP_DB_Transmit+0x482>
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	3b01      	subs	r3, #1
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	029b      	lsls	r3, r3, #10
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e018      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d114      	bne.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	4413      	add	r3, r2
 8005d66:	637b      	str	r3, [r7, #52]	; 0x34
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6959      	ldr	r1, [r3, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	895a      	ldrh	r2, [r3, #10]
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f003 fd66 	bl	8009860 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dae:	823b      	strh	r3, [r7, #16]
 8005db0:	8a3b      	ldrh	r3, [r7, #16]
 8005db2:	f083 0310 	eor.w	r3, r3, #16
 8005db6:	823b      	strh	r3, [r7, #16]
 8005db8:	8a3b      	ldrh	r3, [r7, #16]
 8005dba:	f083 0320 	eor.w	r3, r3, #32
 8005dbe:	823b      	strh	r3, [r7, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	8a3b      	ldrh	r3, [r7, #16]
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3748      	adds	r7, #72	; 0x48
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	817b      	strh	r3, [r7, #10]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e00:	897b      	ldrh	r3, [r7, #10]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e0c:	897b      	ldrh	r3, [r7, #10]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e009      	b.n	8005e38 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e24:	897a      	ldrh	r2, [r7, #10]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e38:	893b      	ldrh	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	80da      	strh	r2, [r3, #6]
 8005e4c:	e00b      	b.n	8005e66 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2201      	movs	r2, #1
 8005e52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005e78:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	420e0020 	.word	0x420e0020

08005e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e26c      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8087 	beq.w	8005fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eac:	4b92      	ldr	r3, [pc, #584]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 030c 	and.w	r3, r3, #12
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005eb8:	4b8f      	ldr	r3, [pc, #572]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 030c 	and.w	r3, r3, #12
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d112      	bne.n	8005eea <HAL_RCC_OscConfig+0x5e>
 8005ec4:	4b8c      	ldr	r3, [pc, #560]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d10b      	bne.n	8005eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed2:	4b89      	ldr	r3, [pc, #548]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d06c      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x12c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d168      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e246      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef2:	d106      	bne.n	8005f02 <HAL_RCC_OscConfig+0x76>
 8005ef4:	4b80      	ldr	r3, [pc, #512]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a7f      	ldr	r2, [pc, #508]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	e02e      	b.n	8005f60 <HAL_RCC_OscConfig+0xd4>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10c      	bne.n	8005f24 <HAL_RCC_OscConfig+0x98>
 8005f0a:	4b7b      	ldr	r3, [pc, #492]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a7a      	ldr	r2, [pc, #488]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4b78      	ldr	r3, [pc, #480]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a77      	ldr	r2, [pc, #476]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e01d      	b.n	8005f60 <HAL_RCC_OscConfig+0xd4>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCC_OscConfig+0xbc>
 8005f2e:	4b72      	ldr	r3, [pc, #456]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a71      	ldr	r2, [pc, #452]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6e      	ldr	r2, [pc, #440]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e00b      	b.n	8005f60 <HAL_RCC_OscConfig+0xd4>
 8005f48:	4b6b      	ldr	r3, [pc, #428]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6a      	ldr	r2, [pc, #424]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4b68      	ldr	r3, [pc, #416]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a67      	ldr	r2, [pc, #412]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d013      	beq.n	8005f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fc ff32 	bl	8002dd0 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f70:	f7fc ff2e 	bl	8002dd0 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b64      	cmp	r3, #100	; 0x64
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e1fa      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	4b5d      	ldr	r3, [pc, #372]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0xe4>
 8005f8e:	e014      	b.n	8005fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fc ff1e 	bl	8002dd0 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f98:	f7fc ff1a 	bl	8002dd0 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	; 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e1e6      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005faa:	4b53      	ldr	r3, [pc, #332]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x10c>
 8005fb6:	e000      	b.n	8005fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d063      	beq.n	800608e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fc6:	4b4c      	ldr	r3, [pc, #304]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fd2:	4b49      	ldr	r3, [pc, #292]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d11c      	bne.n	8006018 <HAL_RCC_OscConfig+0x18c>
 8005fde:	4b46      	ldr	r3, [pc, #280]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d116      	bne.n	8006018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fea:	4b43      	ldr	r3, [pc, #268]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_RCC_OscConfig+0x176>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e1ba      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006002:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4939      	ldr	r1, [pc, #228]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006016:	e03a      	b.n	800608e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d020      	beq.n	8006062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006020:	4b36      	ldr	r3, [pc, #216]	; (80060fc <HAL_RCC_OscConfig+0x270>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006026:	f7fc fed3 	bl	8002dd0 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602e:	f7fc fecf 	bl	8002dd0 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e19b      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006040:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604c:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4927      	ldr	r1, [pc, #156]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]
 8006060:	e015      	b.n	800608e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006062:	4b26      	ldr	r3, [pc, #152]	; (80060fc <HAL_RCC_OscConfig+0x270>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006068:	f7fc feb2 	bl	8002dd0 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006070:	f7fc feae 	bl	8002dd0 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e17a      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006082:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d03a      	beq.n	8006110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d019      	beq.n	80060d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_RCC_OscConfig+0x274>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a8:	f7fc fe92 	bl	8002dd0 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b0:	f7fc fe8e 	bl	8002dd0 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e15a      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <HAL_RCC_OscConfig+0x26c>)
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060ce:	2001      	movs	r0, #1
 80060d0:	f000 fada 	bl	8006688 <RCC_Delay>
 80060d4:	e01c      	b.n	8006110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <HAL_RCC_OscConfig+0x274>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060dc:	f7fc fe78 	bl	8002dd0 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e2:	e00f      	b.n	8006104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7fc fe74 	bl	8002dd0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d908      	bls.n	8006104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e140      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
 80060f6:	bf00      	nop
 80060f8:	40021000 	.word	0x40021000
 80060fc:	42420000 	.word	0x42420000
 8006100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006104:	4b9e      	ldr	r3, [pc, #632]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e9      	bne.n	80060e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80a6 	beq.w	800626a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611e:	2300      	movs	r3, #0
 8006120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006122:	4b97      	ldr	r3, [pc, #604]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612e:	4b94      	ldr	r3, [pc, #592]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	4a93      	ldr	r2, [pc, #588]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006138:	61d3      	str	r3, [r2, #28]
 800613a:	4b91      	ldr	r3, [pc, #580]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614a:	4b8e      	ldr	r3, [pc, #568]	; (8006384 <HAL_RCC_OscConfig+0x4f8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d118      	bne.n	8006188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006156:	4b8b      	ldr	r3, [pc, #556]	; (8006384 <HAL_RCC_OscConfig+0x4f8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a8a      	ldr	r2, [pc, #552]	; (8006384 <HAL_RCC_OscConfig+0x4f8>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006162:	f7fc fe35 	bl	8002dd0 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616a:	f7fc fe31 	bl	8002dd0 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b64      	cmp	r3, #100	; 0x64
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e0fd      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617c:	4b81      	ldr	r3, [pc, #516]	; (8006384 <HAL_RCC_OscConfig+0x4f8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d106      	bne.n	800619e <HAL_RCC_OscConfig+0x312>
 8006190:	4b7b      	ldr	r3, [pc, #492]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	4a7a      	ldr	r2, [pc, #488]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6213      	str	r3, [r2, #32]
 800619c:	e02d      	b.n	80061fa <HAL_RCC_OscConfig+0x36e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10c      	bne.n	80061c0 <HAL_RCC_OscConfig+0x334>
 80061a6:	4b76      	ldr	r3, [pc, #472]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	4a75      	ldr	r2, [pc, #468]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	6213      	str	r3, [r2, #32]
 80061b2:	4b73      	ldr	r3, [pc, #460]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	4a72      	ldr	r2, [pc, #456]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	6213      	str	r3, [r2, #32]
 80061be:	e01c      	b.n	80061fa <HAL_RCC_OscConfig+0x36e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d10c      	bne.n	80061e2 <HAL_RCC_OscConfig+0x356>
 80061c8:	4b6d      	ldr	r3, [pc, #436]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	4a6c      	ldr	r2, [pc, #432]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	6213      	str	r3, [r2, #32]
 80061d4:	4b6a      	ldr	r3, [pc, #424]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	4a69      	ldr	r2, [pc, #420]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6213      	str	r3, [r2, #32]
 80061e0:	e00b      	b.n	80061fa <HAL_RCC_OscConfig+0x36e>
 80061e2:	4b67      	ldr	r3, [pc, #412]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	4a66      	ldr	r2, [pc, #408]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	6213      	str	r3, [r2, #32]
 80061ee:	4b64      	ldr	r3, [pc, #400]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	4a63      	ldr	r2, [pc, #396]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d015      	beq.n	800622e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006202:	f7fc fde5 	bl	8002dd0 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006208:	e00a      	b.n	8006220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fc fde1 	bl	8002dd0 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	; 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e0ab      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006220:	4b57      	ldr	r3, [pc, #348]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ee      	beq.n	800620a <HAL_RCC_OscConfig+0x37e>
 800622c:	e014      	b.n	8006258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800622e:	f7fc fdcf 	bl	8002dd0 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fc fdcb 	bl	8002dd0 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e095      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624c:	4b4c      	ldr	r3, [pc, #304]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ee      	bne.n	8006236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625e:	4b48      	ldr	r3, [pc, #288]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	4a47      	ldr	r2, [pc, #284]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8081 	beq.w	8006376 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006274:	4b42      	ldr	r3, [pc, #264]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b08      	cmp	r3, #8
 800627e:	d061      	beq.n	8006344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d146      	bne.n	8006316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006288:	4b3f      	ldr	r3, [pc, #252]	; (8006388 <HAL_RCC_OscConfig+0x4fc>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628e:	f7fc fd9f 	bl	8002dd0 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006296:	f7fc fd9b 	bl	8002dd0 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e067      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062a8:	4b35      	ldr	r3, [pc, #212]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f0      	bne.n	8006296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062bc:	d108      	bne.n	80062d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062be:	4b30      	ldr	r3, [pc, #192]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	492d      	ldr	r1, [pc, #180]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062d0:	4b2b      	ldr	r3, [pc, #172]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a19      	ldr	r1, [r3, #32]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	430b      	orrs	r3, r1
 80062e2:	4927      	ldr	r1, [pc, #156]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062e8:	4b27      	ldr	r3, [pc, #156]	; (8006388 <HAL_RCC_OscConfig+0x4fc>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ee:	f7fc fd6f 	bl	8002dd0 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fc fd6b 	bl	8002dd0 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e037      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006308:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x46a>
 8006314:	e02f      	b.n	8006376 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006316:	4b1c      	ldr	r3, [pc, #112]	; (8006388 <HAL_RCC_OscConfig+0x4fc>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631c:	f7fc fd58 	bl	8002dd0 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006324:	f7fc fd54 	bl	8002dd0 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e020      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006336:	4b12      	ldr	r3, [pc, #72]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x498>
 8006342:	e018      	b.n	8006376 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e013      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <HAL_RCC_OscConfig+0x4f4>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	429a      	cmp	r2, r3
 8006362:	d106      	bne.n	8006372 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d001      	beq.n	8006376 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40021000 	.word	0x40021000
 8006384:	40007000 	.word	0x40007000
 8006388:	42420060 	.word	0x42420060

0800638c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0d0      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063a0:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d910      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b67      	ldr	r3, [pc, #412]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f023 0207 	bic.w	r2, r3, #7
 80063b6:	4965      	ldr	r1, [pc, #404]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b63      	ldr	r3, [pc, #396]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0b8      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d020      	beq.n	800641e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e8:	4b59      	ldr	r3, [pc, #356]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4a58      	ldr	r2, [pc, #352]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80063ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a52      	ldr	r2, [pc, #328]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006406:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800640a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640c:	4b50      	ldr	r3, [pc, #320]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	494d      	ldr	r1, [pc, #308]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d040      	beq.n	80064ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d115      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e07f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b41      	ldr	r3, [pc, #260]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e073      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e06b      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b39      	ldr	r3, [pc, #228]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4936      	ldr	r1, [pc, #216]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	4313      	orrs	r3, r2
 800647a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647c:	f7fc fca8 	bl	8002dd0 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fc fca4 	bl	8002dd0 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e053      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b27      	ldr	r3, [pc, #156]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d210      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 0207 	bic.w	r2, r3, #7
 80064c2:	4922      	ldr	r1, [pc, #136]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e032      	b.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4916      	ldr	r1, [pc, #88]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	490e      	ldr	r1, [pc, #56]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800651a:	f000 f821 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800651e:	4601      	mov	r1, r0
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x1c8>)
 800652c:	5cd3      	ldrb	r3, [r2, r3]
 800652e:	fa21 f303 	lsr.w	r3, r1, r3
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <HAL_RCC_ClockConfig+0x1cc>)
 8006534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <HAL_RCC_ClockConfig+0x1d0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fc fc06 	bl	8002d4c <HAL_InitTick>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40022000 	.word	0x40022000
 8006550:	40021000 	.word	0x40021000
 8006554:	0800e600 	.word	0x0800e600
 8006558:	20000008 	.word	0x20000008
 800655c:	2000000c 	.word	0x2000000c

08006560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	b490      	push	{r4, r7}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006566:	4b2a      	ldr	r3, [pc, #168]	; (8006610 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006568:	1d3c      	adds	r4, r7, #4
 800656a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800656c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006570:	4b28      	ldr	r3, [pc, #160]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	2300      	movs	r3, #0
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800658a:	4b23      	ldr	r3, [pc, #140]	; (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f003 030c 	and.w	r3, r3, #12
 8006596:	2b04      	cmp	r3, #4
 8006598:	d002      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x40>
 800659a:	2b08      	cmp	r3, #8
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_GetSysClockFreq+0x46>
 800659e:	e02d      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065a2:	623b      	str	r3, [r7, #32]
      break;
 80065a4:	e02d      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	0c9b      	lsrs	r3, r3, #18
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80065b2:	4413      	add	r3, r2
 80065b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80065b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80065c4:	4b14      	ldr	r3, [pc, #80]	; (8006618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	0c5b      	lsrs	r3, r3, #17
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80065d2:	4413      	add	r3, r2
 80065d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4a0f      	ldr	r2, [pc, #60]	; (800661c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065de:	fb02 f203 	mul.w	r2, r2, r3
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ea:	e004      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	623b      	str	r3, [r7, #32]
      break;
 80065fa:	e002      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065fe:	623b      	str	r3, [r7, #32]
      break;
 8006600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006602:	6a3b      	ldr	r3, [r7, #32]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3728      	adds	r7, #40	; 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bc90      	pop	{r4, r7}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	0800e590 	.word	0x0800e590
 8006614:	0800e5a0 	.word	0x0800e5a0
 8006618:	40021000 	.word	0x40021000
 800661c:	007a1200 	.word	0x007a1200
 8006620:	003d0900 	.word	0x003d0900

08006624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <HAL_RCC_GetHCLKFreq+0x10>)
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	20000008 	.word	0x20000008

08006638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800663c:	f7ff fff2 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006640:	4601      	mov	r1, r0
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4a03      	ldr	r2, [pc, #12]	; (800665c <HAL_RCC_GetPCLK1Freq+0x24>)
 800664e:	5cd3      	ldrb	r3, [r2, r3]
 8006650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40021000 	.word	0x40021000
 800665c:	0800e610 	.word	0x0800e610

08006660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006664:	f7ff ffde 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006668:	4601      	mov	r1, r0
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	0adb      	lsrs	r3, r3, #11
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4a03      	ldr	r2, [pc, #12]	; (8006684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006676:	5cd3      	ldrb	r3, [r2, r3]
 8006678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40021000 	.word	0x40021000
 8006684:	0800e610 	.word	0x0800e610

08006688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <RCC_Delay+0x34>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <RCC_Delay+0x38>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	0a5b      	lsrs	r3, r3, #9
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80066a4:	bf00      	nop
  }
  while (Delay --);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1e5a      	subs	r2, r3, #1
 80066aa:	60fa      	str	r2, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f9      	bne.n	80066a4 <RCC_Delay+0x1c>
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000008 	.word	0x20000008
 80066c0:	10624dd3 	.word	0x10624dd3

080066c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d07d      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80066e0:	2300      	movs	r3, #0
 80066e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e4:	4b4f      	ldr	r3, [pc, #316]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f0:	4b4c      	ldr	r3, [pc, #304]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	4a4b      	ldr	r2, [pc, #300]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fa:	61d3      	str	r3, [r2, #28]
 80066fc:	4b49      	ldr	r3, [pc, #292]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006708:	2301      	movs	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670c:	4b46      	ldr	r3, [pc, #280]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d118      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006718:	4b43      	ldr	r3, [pc, #268]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a42      	ldr	r2, [pc, #264]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800671e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006724:	f7fc fb54 	bl	8002dd0 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672a:	e008      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672c:	f7fc fb50 	bl	8002dd0 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e06d      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673e:	4b3a      	ldr	r3, [pc, #232]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800674a:	4b36      	ldr	r3, [pc, #216]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d02e      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	429a      	cmp	r2, r3
 8006766:	d027      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006768:	4b2e      	ldr	r3, [pc, #184]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006770:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006772:	4b2e      	ldr	r3, [pc, #184]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006778:	4b2c      	ldr	r3, [pc, #176]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800677e:	4a29      	ldr	r2, [pc, #164]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d014      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678e:	f7fc fb1f 	bl	8002dd0 <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006794:	e00a      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006796:	f7fc fb1b 	bl	8002dd0 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e036      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0ee      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4917      	ldr	r1, [pc, #92]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d105      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d0:	4b14      	ldr	r3, [pc, #80]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067e8:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	490b      	ldr	r1, [pc, #44]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4904      	ldr	r1, [pc, #16]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000
 8006828:	40007000 	.word	0x40007000
 800682c:	42420440 	.word	0x42420440

08006830 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006830:	b590      	push	{r4, r7, lr}
 8006832:	b08d      	sub	sp, #52	; 0x34
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006838:	4b55      	ldr	r3, [pc, #340]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800683a:	f107 040c 	add.w	r4, r7, #12
 800683e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006844:	4b53      	ldr	r3, [pc, #332]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
 800684e:	2300      	movs	r3, #0
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006852:	2300      	movs	r3, #0
 8006854:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	2300      	movs	r3, #0
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d07f      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006864:	2b10      	cmp	r3, #16
 8006866:	d002      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006868:	2b01      	cmp	r3, #1
 800686a:	d048      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800686c:	e08b      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800686e:	4b4a      	ldr	r3, [pc, #296]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006874:	4b48      	ldr	r3, [pc, #288]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d07f      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	0c9b      	lsrs	r3, r3, #18
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800688c:	4413      	add	r3, r2
 800688e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006892:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800689e:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	0c5b      	lsrs	r3, r3, #17
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80068ac:	4413      	add	r3, r2
 80068ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80068be:	4a37      	ldr	r2, [pc, #220]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ce:	e004      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	4a33      	ldr	r2, [pc, #204]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80068d4:	fb02 f303 	mul.w	r3, r2, r3
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80068da:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e6:	d102      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80068ec:	e048      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80068fc:	e040      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80068fe:	4b26      	ldr	r3, [pc, #152]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690e:	d108      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006920:	e01f      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d109      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800693a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006940:	e00f      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800694c:	d11a      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d014      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800695a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006960:	e010      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006962:	e00f      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006964:	f7ff fe7c 	bl	8006660 <HAL_RCC_GetPCLK2Freq>
 8006968:	4602      	mov	r2, r0
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	0b9b      	lsrs	r3, r3, #14
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	3301      	adds	r3, #1
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800697e:	e002      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006984:	bf00      	nop
    }
  }
  return (frequency);
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006988:	4618      	mov	r0, r3
 800698a:	3734      	adds	r7, #52	; 0x34
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}
 8006990:	0800e5a4 	.word	0x0800e5a4
 8006994:	0800e5b4 	.word	0x0800e5b4
 8006998:	40021000 	.word	0x40021000
 800699c:	007a1200 	.word	0x007a1200
 80069a0:	003d0900 	.word	0x003d0900
 80069a4:	aaaaaaab 	.word	0xaaaaaaab

080069a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e084      	b.n	8006ac8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7c5b      	ldrb	r3, [r3, #17]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d105      	bne.n	80069d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fc f882 	bl	8002ad8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fac6 	bl	8006f6c <HAL_RTC_WaitForSynchro>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e06b      	b.n	8006ac8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fb7f 	bl	80070f4 <RTC_EnterInitMode>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2204      	movs	r2, #4
 8006a00:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e060      	b.n	8006ac8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0207 	bic.w	r2, r2, #7
 8006a14:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	; (8006ad0 <HAL_RTC_Init+0x128>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <HAL_RTC_Init+0x128>)
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006a2a:	4b29      	ldr	r3, [pc, #164]	; (8006ad0 <HAL_RTC_Init+0x128>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4926      	ldr	r1, [pc, #152]	; (8006ad0 <HAL_RTC_Init+0x128>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d003      	beq.n	8006a4e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e00e      	b.n	8006a6c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006a4e:	2001      	movs	r0, #1
 8006a50:	f7ff feee 	bl	8006830 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a54:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e030      	b.n	8006ac8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f023 010f 	bic.w	r1, r3, #15
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	0c1a      	lsrs	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	b291      	uxth	r1, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	430b      	orrs	r3, r1
 8006a96:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fb53 	bl	8007144 <RTC_ExitInitMode>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e00c      	b.n	8006ac8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40006c00 	.word	0x40006c00

08006ad4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ad4:	b590      	push	{r4, r7, lr}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_RTC_SetTime+0x20>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e080      	b.n	8006bfa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	7c1b      	ldrb	r3, [r3, #16]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_RTC_SetTime+0x30>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e07a      	b.n	8006bfa <HAL_RTC_SetTime+0x126>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d113      	bne.n	8006b3e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006b20:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	1a5b      	subs	r3, r3, r1
 8006b30:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006b32:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006b38:	4413      	add	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e01e      	b.n	8006b7c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fb43 	bl	80071ce <RTC_Bcd2ToByte>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006b50:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fb38 	bl	80071ce <RTC_Bcd2ToByte>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	4613      	mov	r3, r2
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006b6a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	789b      	ldrb	r3, [r3, #2]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fb2c 	bl	80071ce <RTC_Bcd2ToByte>
 8006b76:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006b78:	4423      	add	r3, r4
 8006b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 fa51 	bl	8007026 <RTC_WriteTimeCounter>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e02f      	b.n	8006bfa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0205 	bic.w	r2, r2, #5
 8006ba8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fa62 	bl	8007074 <RTC_ReadAlarmCounter>
 8006bb0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d018      	beq.n	8006bec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d214      	bcs.n	8006bec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006bc8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006bcc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006bce:	6939      	ldr	r1, [r7, #16]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fa68 	bl	80070a6 <RTC_WriteAlarmCounter>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2204      	movs	r2, #4
 8006be0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e006      	b.n	8006bfa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
  }
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd90      	pop	{r4, r7, pc}
	...

08006c04 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_RTC_GetTime+0x28>
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0b5      	b.n	8006d9c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e0ac      	b.n	8006d9c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f9bf 	bl	8006fc6 <RTC_ReadTimeCounter>
 8006c48:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	4a55      	ldr	r2, [pc, #340]	; (8006da4 <HAL_RTC_GetTime+0x1a0>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0adb      	lsrs	r3, r3, #11
 8006c54:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4b52      	ldr	r3, [pc, #328]	; (8006da4 <HAL_RTC_GetTime+0x1a0>)
 8006c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5e:	0adb      	lsrs	r3, r3, #11
 8006c60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	4a4f      	ldr	r2, [pc, #316]	; (8006da8 <HAL_RTC_GetTime+0x1a4>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	4a4a      	ldr	r2, [pc, #296]	; (8006da4 <HAL_RTC_GetTime+0x1a0>)
 8006c7c:	fba2 1203 	umull	r1, r2, r2, r3
 8006c80:	0ad2      	lsrs	r2, r2, #11
 8006c82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006c86:	fb01 f202 	mul.w	r2, r1, r2
 8006c8a:	1a9a      	subs	r2, r3, r2
 8006c8c:	4b46      	ldr	r3, [pc, #280]	; (8006da8 <HAL_RTC_GetTime+0x1a4>)
 8006c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c92:	0959      	lsrs	r1, r3, #5
 8006c94:	460b      	mov	r3, r1
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	1a5b      	subs	r3, r3, r1
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	1ad1      	subs	r1, r2, r3
 8006c9e:	b2ca      	uxtb	r2, r1
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b17      	cmp	r3, #23
 8006ca8:	d955      	bls.n	8006d56 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4a3f      	ldr	r2, [pc, #252]	; (8006dac <HAL_RTC_GetTime+0x1a8>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006cb6:	6939      	ldr	r1, [r7, #16]
 8006cb8:	4b3c      	ldr	r3, [pc, #240]	; (8006dac <HAL_RTC_GetTime+0x1a8>)
 8006cba:	fba3 2301 	umull	r2, r3, r3, r1
 8006cbe:	091a      	lsrs	r2, r3, #4
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	1aca      	subs	r2, r1, r3
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f9cf 	bl	8007074 <RTC_ReadAlarmCounter>
 8006cd6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d008      	beq.n	8006cf2 <HAL_RTC_GetTime+0xee>
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d904      	bls.n	8006cf2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e002      	b.n	8006cf8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4a2d      	ldr	r2, [pc, #180]	; (8006db0 <HAL_RTC_GetTime+0x1ac>)
 8006cfc:	fb02 f303 	mul.w	r3, r2, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006d06:	69b9      	ldr	r1, [r7, #24]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f98c 	bl	8007026 <RTC_WriteTimeCounter>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e041      	b.n	8006d9c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d00c      	beq.n	8006d3a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	4413      	add	r3, r2
 8006d26:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f9bb 	bl	80070a6 <RTC_WriteAlarmCounter>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e030      	b.n	8006d9c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d3a:	69f9      	ldr	r1, [r7, #28]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f9b2 	bl	80070a6 <RTC_WriteAlarmCounter>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e027      	b.n	8006d9c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fa5a 	bl	8007208 <RTC_DateUpdate>
 8006d54:	e003      	b.n	8006d5e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01a      	beq.n	8006d9a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fa13 	bl	8007194 <RTC_ByteToBcd2>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fa0a 	bl	8007194 <RTC_ByteToBcd2>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	789b      	ldrb	r3, [r3, #2]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fa01 	bl	8007194 <RTC_ByteToBcd2>
 8006d92:	4603      	mov	r3, r0
 8006d94:	461a      	mov	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	91a2b3c5 	.word	0x91a2b3c5
 8006da8:	88888889 	.word	0x88888889
 8006dac:	aaaaaaab 	.word	0xaaaaaaab
 8006db0:	00015180 	.word	0x00015180

08006db4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006db4:	b590      	push	{r4, r7, lr}
 8006db6:	b089      	sub	sp, #36	; 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	2100      	movs	r1, #0
 8006dca:	460a      	mov	r2, r1
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	460a      	mov	r2, r1
 8006dd0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <HAL_RTC_SetAlarm_IT+0x2a>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e096      	b.n	8006f10 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7c1b      	ldrb	r3, [r3, #16]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_RTC_SetAlarm_IT+0x3a>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e090      	b.n	8006f10 <HAL_RTC_SetAlarm_IT+0x15c>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2202      	movs	r2, #2
 8006df8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006dfa:	f107 0314 	add.w	r3, r7, #20
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4619      	mov	r1, r3
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fefe 	bl	8006c04 <HAL_RTC_GetTime>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e07e      	b.n	8006f10 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006e12:	7d3b      	ldrb	r3, [r7, #20]
 8006e14:	461a      	mov	r2, r3
 8006e16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006e1a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8006e1e:	7d7b      	ldrb	r3, [r7, #21]
 8006e20:	4619      	mov	r1, r3
 8006e22:	460b      	mov	r3, r1
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	1a5b      	subs	r3, r3, r1
 8006e28:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006e2a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8006e2c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006e2e:	4413      	add	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d113      	bne.n	8006e60 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006e42:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	1a5b      	subs	r3, r3, r1
 8006e52:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006e54:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006e5a:	4413      	add	r3, r2
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	e01e      	b.n	8006e9e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f9b2 	bl	80071ce <RTC_Bcd2ToByte>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006e72:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f9a7 	bl	80071ce <RTC_Bcd2ToByte>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	4613      	mov	r3, r2
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006e8c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	789b      	ldrb	r3, [r3, #2]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f99b 	bl	80071ce <RTC_Bcd2ToByte>
 8006e98:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006e9a:	4423      	add	r3, r4
 8006e9c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d205      	bcs.n	8006eb2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006eac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006eb0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006eb2:	69f9      	ldr	r1, [r7, #28]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f8f6 	bl	80070a6 <RTC_WriteAlarmCounter>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e01f      	b.n	8006f10 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0202 	mvn.w	r2, #2
 8006ed8:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0202 	orr.w	r2, r2, #2
 8006ee8:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <HAL_RTC_SetAlarm_IT+0x164>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <HAL_RTC_SetAlarm_IT+0x164>)
 8006ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef4:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006ef6:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <HAL_RTC_SetAlarm_IT+0x164>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4a07      	ldr	r2, [pc, #28]	; (8006f18 <HAL_RTC_SetAlarm_IT+0x164>)
 8006efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f00:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3724      	adds	r7, #36	; 0x24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd90      	pop	{r4, r7, pc}
 8006f18:	40010400 	.word	0x40010400

08006f1c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7fb fc5f 	bl	8002804 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0202 	mvn.w	r2, #2
 8006f4e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8006f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f56:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	745a      	strb	r2, [r3, #17]
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40010400 	.word	0x40010400

08006f6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e01d      	b.n	8006fbe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0208 	bic.w	r2, r2, #8
 8006f90:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006f92:	f7fb ff1d 	bl	8002dd0 <HAL_GetTick>
 8006f96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006f98:	e009      	b.n	8006fae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f9a:	f7fb ff19 	bl	8002dd0 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa8:	d901      	bls.n	8006fae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e007      	b.n	8006fbe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0ee      	beq.n	8006f9a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b087      	sub	sp, #28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	827b      	strh	r3, [r7, #18]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	823b      	strh	r3, [r7, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006ff6:	8a7a      	ldrh	r2, [r7, #18]
 8006ff8:	8a3b      	ldrh	r3, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d008      	beq.n	8007010 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006ffe:	8a3b      	ldrh	r3, [r7, #16]
 8007000:	041a      	lsls	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	b29b      	uxth	r3, r3
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e004      	b.n	800701a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007010:	8a7b      	ldrh	r3, [r7, #18]
 8007012:	041a      	lsls	r2, r3, #16
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800701a:	697b      	ldr	r3, [r7, #20]
}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f85d 	bl	80070f4 <RTC_EnterInitMode>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
 8007044:	e011      	b.n	800706a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	0c12      	lsrs	r2, r2, #16
 800704e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	b292      	uxth	r2, r2
 8007058:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f872 	bl	8007144 <RTC_ExitInitMode>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	81fb      	strh	r3, [r7, #14]
 8007080:	2300      	movs	r3, #0
 8007082:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	041a      	lsls	r2, r3, #16
 8007098:	89bb      	ldrh	r3, [r7, #12]
 800709a:	4313      	orrs	r3, r2
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f81d 	bl	80070f4 <RTC_EnterInitMode>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	e011      	b.n	80070ea <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	0c12      	lsrs	r2, r2, #16
 80070ce:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	b292      	uxth	r2, r2
 80070d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f832 	bl	8007144 <RTC_ExitInitMode>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007100:	f7fb fe66 	bl	8002dd0 <HAL_GetTick>
 8007104:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007106:	e009      	b.n	800711c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007108:	f7fb fe62 	bl	8002dd0 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007116:	d901      	bls.n	800711c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e00f      	b.n	800713c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0ee      	beq.n	8007108 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0210 	orr.w	r2, r2, #16
 8007138:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0210 	bic.w	r2, r2, #16
 800715e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007160:	f7fb fe36 	bl	8002dd0 <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007166:	e009      	b.n	800717c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007168:	f7fb fe32 	bl	8002dd0 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007176:	d901      	bls.n	800717c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e007      	b.n	800718c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ee      	beq.n	8007168 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80071a2:	e005      	b.n	80071b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	3b0a      	subs	r3, #10
 80071ae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b09      	cmp	r3, #9
 80071b4:	d8f6      	bhi.n	80071a4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b2db      	uxtb	r3, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	4603      	mov	r3, r0
 80071d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	b2db      	uxtb	r3, r3
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	2300      	movs	r3, #0
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7bdb      	ldrb	r3, [r3, #15]
 8007226:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7b5b      	ldrb	r3, [r3, #13]
 800722c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7b9b      	ldrb	r3, [r3, #14]
 8007232:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	e06f      	b.n	800731a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d011      	beq.n	8007264 <RTC_DateUpdate+0x5c>
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b03      	cmp	r3, #3
 8007244:	d00e      	beq.n	8007264 <RTC_DateUpdate+0x5c>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d00b      	beq.n	8007264 <RTC_DateUpdate+0x5c>
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b07      	cmp	r3, #7
 8007250:	d008      	beq.n	8007264 <RTC_DateUpdate+0x5c>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b08      	cmp	r3, #8
 8007256:	d005      	beq.n	8007264 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b0a      	cmp	r3, #10
 800725c:	d002      	beq.n	8007264 <RTC_DateUpdate+0x5c>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b0c      	cmp	r3, #12
 8007262:	d117      	bne.n	8007294 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b1e      	cmp	r3, #30
 8007268:	d803      	bhi.n	8007272 <RTC_DateUpdate+0x6a>
      {
        day++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007270:	e050      	b.n	8007314 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b0c      	cmp	r3, #12
 8007276:	d005      	beq.n	8007284 <RTC_DateUpdate+0x7c>
        {
          month++;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3301      	adds	r3, #1
 800727c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800727e:	2301      	movs	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007282:	e047      	b.n	8007314 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007284:	2301      	movs	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007288:	2301      	movs	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
          year++;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3301      	adds	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007292:	e03f      	b.n	8007314 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b04      	cmp	r3, #4
 8007298:	d008      	beq.n	80072ac <RTC_DateUpdate+0xa4>
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b06      	cmp	r3, #6
 800729e:	d005      	beq.n	80072ac <RTC_DateUpdate+0xa4>
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	d002      	beq.n	80072ac <RTC_DateUpdate+0xa4>
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b0b      	cmp	r3, #11
 80072aa:	d10c      	bne.n	80072c6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b1d      	cmp	r3, #29
 80072b0:	d803      	bhi.n	80072ba <RTC_DateUpdate+0xb2>
      {
        day++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80072b8:	e02c      	b.n	8007314 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3301      	adds	r3, #1
 80072be:	613b      	str	r3, [r7, #16]
        day = 1U;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80072c4:	e026      	b.n	8007314 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d123      	bne.n	8007314 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b1b      	cmp	r3, #27
 80072d0:	d803      	bhi.n	80072da <RTC_DateUpdate+0xd2>
      {
        day++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	e01c      	b.n	8007314 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b1c      	cmp	r3, #28
 80072de:	d111      	bne.n	8007304 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 f839 	bl	800735c <RTC_IsLeapYear>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e00d      	b.n	8007314 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	3301      	adds	r3, #1
 80072fc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80072fe:	2301      	movs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e007      	b.n	8007314 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b1d      	cmp	r3, #29
 8007308:	d104      	bne.n	8007314 <RTC_DateUpdate+0x10c>
      {
        month++;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3301      	adds	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007310:	2301      	movs	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3301      	adds	r3, #1
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d38b      	bcc.n	800723a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	b2da      	uxtb	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	4619      	mov	r1, r3
 8007344:	6978      	ldr	r0, [r7, #20]
 8007346:	f000 f83b 	bl	80073c0 <RTC_WeekDayNum>
 800734a:	4603      	mov	r3, r0
 800734c:	461a      	mov	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	731a      	strb	r2, [r3, #12]
}
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	e01d      	b.n	80073b2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	4a10      	ldr	r2, [pc, #64]	; (80073bc <RTC_IsLeapYear+0x60>)
 800737a:	fba2 1203 	umull	r1, r2, r2, r3
 800737e:	0952      	lsrs	r2, r2, #5
 8007380:	2164      	movs	r1, #100	; 0x64
 8007382:	fb01 f202 	mul.w	r2, r1, r2
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800738e:	2301      	movs	r3, #1
 8007390:	e00f      	b.n	80073b2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	4a09      	ldr	r2, [pc, #36]	; (80073bc <RTC_IsLeapYear+0x60>)
 8007396:	fba2 1203 	umull	r1, r2, r2, r3
 800739a:	09d2      	lsrs	r2, r2, #7
 800739c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073a0:	fb01 f202 	mul.w	r2, r1, r2
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80073b0:	2300      	movs	r3, #0
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	51eb851f 	.word	0x51eb851f

080073c0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
 80073cc:	4613      	mov	r3, r2
 80073ce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60bb      	str	r3, [r7, #8]
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80073de:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d82d      	bhi.n	8007442 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	4613      	mov	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	4413      	add	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	4a2c      	ldr	r2, [pc, #176]	; (80074a4 <RTC_WeekDayNum+0xe4>)
 80073f4:	fba2 2303 	umull	r2, r3, r2, r3
 80073f8:	085a      	lsrs	r2, r3, #1
 80073fa:	78bb      	ldrb	r3, [r7, #2]
 80073fc:	441a      	add	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	441a      	add	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	3b01      	subs	r3, #1
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	441a      	add	r2, r3
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	3b01      	subs	r3, #1
 800740e:	4926      	ldr	r1, [pc, #152]	; (80074a8 <RTC_WeekDayNum+0xe8>)
 8007410:	fba1 1303 	umull	r1, r3, r1, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	4922      	ldr	r1, [pc, #136]	; (80074a8 <RTC_WeekDayNum+0xe8>)
 800741e:	fba1 1303 	umull	r1, r3, r1, r3
 8007422:	09db      	lsrs	r3, r3, #7
 8007424:	4413      	add	r3, r2
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	4b20      	ldr	r3, [pc, #128]	; (80074ac <RTC_WeekDayNum+0xec>)
 800742a:	fba3 1302 	umull	r1, r3, r3, r2
 800742e:	1ad1      	subs	r1, r2, r3
 8007430:	0849      	lsrs	r1, r1, #1
 8007432:	440b      	add	r3, r1
 8007434:	0899      	lsrs	r1, r3, #2
 8007436:	460b      	mov	r3, r1
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	1a5b      	subs	r3, r3, r1
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e029      	b.n	8007496 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4613      	mov	r3, r2
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	4413      	add	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <RTC_WeekDayNum+0xe4>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	085a      	lsrs	r2, r3, #1
 8007456:	78bb      	ldrb	r3, [r7, #2]
 8007458:	441a      	add	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	441a      	add	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	089b      	lsrs	r3, r3, #2
 8007462:	441a      	add	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4910      	ldr	r1, [pc, #64]	; (80074a8 <RTC_WeekDayNum+0xe8>)
 8007468:	fba1 1303 	umull	r1, r3, r1, r3
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	490d      	ldr	r1, [pc, #52]	; (80074a8 <RTC_WeekDayNum+0xe8>)
 8007474:	fba1 1303 	umull	r1, r3, r1, r3
 8007478:	09db      	lsrs	r3, r3, #7
 800747a:	4413      	add	r3, r2
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <RTC_WeekDayNum+0xec>)
 8007480:	fba3 1302 	umull	r1, r3, r3, r2
 8007484:	1ad1      	subs	r1, r2, r3
 8007486:	0849      	lsrs	r1, r1, #1
 8007488:	440b      	add	r3, r1
 800748a:	0899      	lsrs	r1, r3, #2
 800748c:	460b      	mov	r3, r1
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	1a5b      	subs	r3, r3, r1
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	b2db      	uxtb	r3, r3
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	38e38e39 	.word	0x38e38e39
 80074a8:	51eb851f 	.word	0x51eb851f
 80074ac:	24924925 	.word	0x24924925

080074b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e03f      	b.n	8007542 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb fb2a 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2224      	movs	r2, #36	; 0x24
 80074e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f905 	bl	8007704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b08a      	sub	sp, #40	; 0x28
 800754e:	af02      	add	r7, sp, #8
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	d17c      	bne.n	8007664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_UART_Transmit+0x2c>
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e075      	b.n	8007666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UART_Transmit+0x3e>
 8007584:	2302      	movs	r3, #2
 8007586:	e06e      	b.n	8007666 <HAL_UART_Transmit+0x11c>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2221      	movs	r2, #33	; 0x21
 800759a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800759e:	f7fb fc17 	bl	8002dd0 <HAL_GetTick>
 80075a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b8:	d108      	bne.n	80075cc <HAL_UART_Transmit+0x82>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	e003      	b.n	80075d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80075dc:	e02a      	b.n	8007634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2200      	movs	r2, #0
 80075e6:	2180      	movs	r1, #128	; 0x80
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f840 	bl	800766e <UART_WaitOnFlagUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e036      	b.n	8007666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800760c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	3302      	adds	r3, #2
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	e007      	b.n	8007626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3301      	adds	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1cf      	bne.n	80075de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	2140      	movs	r1, #64	; 0x40
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f810 	bl	800766e <UART_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e006      	b.n	8007666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	603b      	str	r3, [r7, #0]
 800767a:	4613      	mov	r3, r2
 800767c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800767e:	e02c      	b.n	80076da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d028      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <UART_WaitOnFlagUntilTimeout+0x30>
 800768e:	f7fb fb9f 	bl	8002dd0 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	429a      	cmp	r2, r3
 800769c:	d21d      	bcs.n	80076da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0201 	bic.w	r2, r2, #1
 80076bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e00f      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4013      	ands	r3, r2
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d0c3      	beq.n	8007680 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800773e:	f023 030c 	bic.w	r3, r3, #12
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	430b      	orrs	r3, r1
 800774a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2c      	ldr	r2, [pc, #176]	; (8007818 <UART_SetConfig+0x114>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d103      	bne.n	8007774 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800776c:	f7fe ff78 	bl	8006660 <HAL_RCC_GetPCLK2Freq>
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	e002      	b.n	800777a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007774:	f7fe ff60 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 8007778:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009a      	lsls	r2, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	4a22      	ldr	r2, [pc, #136]	; (800781c <UART_SetConfig+0x118>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	0119      	lsls	r1, r3, #4
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009a      	lsls	r2, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80077b0:	4b1a      	ldr	r3, [pc, #104]	; (800781c <UART_SetConfig+0x118>)
 80077b2:	fba3 0302 	umull	r0, r3, r3, r2
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	2064      	movs	r0, #100	; 0x64
 80077ba:	fb00 f303 	mul.w	r3, r0, r3
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	3332      	adds	r3, #50	; 0x32
 80077c4:	4a15      	ldr	r2, [pc, #84]	; (800781c <UART_SetConfig+0x118>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d0:	4419      	add	r1, r3
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009a      	lsls	r2, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80077e8:	4b0c      	ldr	r3, [pc, #48]	; (800781c <UART_SetConfig+0x118>)
 80077ea:	fba3 0302 	umull	r0, r3, r3, r2
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	2064      	movs	r0, #100	; 0x64
 80077f2:	fb00 f303 	mul.w	r3, r0, r3
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	3332      	adds	r3, #50	; 0x32
 80077fc:	4a07      	ldr	r2, [pc, #28]	; (800781c <UART_SetConfig+0x118>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	f003 020f 	and.w	r2, r3, #15
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	440a      	add	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40013800 	.word	0x40013800
 800781c:	51eb851f 	.word	0x51eb851f

08007820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007820:	b084      	sub	sp, #16
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	f107 0014 	add.w	r0, r7, #20
 800782e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr

08007840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007850:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007854:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	b29a      	uxth	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007874:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007878:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	b29b      	uxth	r3, r3
 8007886:	43db      	mvns	r3, r3
 8007888:	b29b      	uxth	r3, r3
 800788a:	4013      	ands	r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078b8:	b084      	sub	sp, #16
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	f107 0014 	add.w	r0, r7, #20
 80078c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	b004      	add	sp, #16
 80078f6:	4770      	bx	lr

080078f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b09b      	sub	sp, #108	; 0x6c
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800791a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	78db      	ldrb	r3, [r3, #3]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d81f      	bhi.n	800796a <USB_ActivateEndpoint+0x72>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <USB_ActivateEndpoint+0x38>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007941 	.word	0x08007941
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007973 	.word	0x08007973
 800793c:	0800794f 	.word	0x0800794f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007940:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007948:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800794c:	e012      	b.n	8007974 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800794e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007952:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007956:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800795a:	e00b      	b.n	8007974 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800795c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007964:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007968:	e004      	b.n	8007974 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007970:	e000      	b.n	8007974 <USB_ActivateEndpoint+0x7c>
      break;
 8007972:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	441a      	add	r2, r3
 80079c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80079c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d8:	b29b      	uxth	r3, r3
 80079da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	7b1b      	ldrb	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f040 8149 	bne.w	8007c78 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8084 	beq.w	8007af8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	011a      	lsls	r2, r3, #4
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	88db      	ldrh	r3, [r3, #6]
 8007a18:	085b      	lsrs	r3, r3, #1
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	81fb      	strh	r3, [r7, #14]
 8007a32:	89fb      	ldrh	r3, [r7, #14]
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01b      	beq.n	8007a74 <USB_ActivateEndpoint+0x17c>
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a52:	81bb      	strh	r3, [r7, #12]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	441a      	add	r2, r3
 8007a5e:	89bb      	ldrh	r3, [r7, #12]
 8007a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	78db      	ldrb	r3, [r3, #3]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d020      	beq.n	8007abe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a92:	813b      	strh	r3, [r7, #8]
 8007a94:	893b      	ldrh	r3, [r7, #8]
 8007a96:	f083 0320 	eor.w	r3, r3, #32
 8007a9a:	813b      	strh	r3, [r7, #8]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	8013      	strh	r3, [r2, #0]
 8007abc:	e27f      	b.n	8007fbe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad4:	817b      	strh	r3, [r7, #10]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	441a      	add	r2, r3
 8007ae0:	897b      	ldrh	r3, [r7, #10]
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]
 8007af6:	e262      	b.n	8007fbe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	4413      	add	r3, r2
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	011a      	lsls	r2, r3, #4
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	085b      	lsrs	r3, r3, #1
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	4413      	add	r3, r2
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	011a      	lsls	r2, r3, #4
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	4413      	add	r3, r2
 8007b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b4e:	623b      	str	r3, [r7, #32]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d112      	bne.n	8007b7e <USB_ActivateEndpoint+0x286>
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	e02f      	b.n	8007bde <USB_ActivateEndpoint+0x2e6>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b3e      	cmp	r3, #62	; 0x3e
 8007b84:	d813      	bhi.n	8007bae <USB_ActivateEndpoint+0x2b6>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <USB_ActivateEndpoint+0x2a8>
 8007b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	029b      	lsls	r3, r3, #10
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e017      	b.n	8007bde <USB_ActivateEndpoint+0x2e6>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <USB_ActivateEndpoint+0x2d0>
 8007bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	029b      	lsls	r3, r3, #10
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	83fb      	strh	r3, [r7, #30]
 8007bec:	8bfb      	ldrh	r3, [r7, #30]
 8007bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01b      	beq.n	8007c2e <USB_ActivateEndpoint+0x336>
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	83bb      	strh	r3, [r7, #28]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	8bbb      	ldrh	r3, [r7, #28]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	837b      	strh	r3, [r7, #26]
 8007c46:	8b7b      	ldrh	r3, [r7, #26]
 8007c48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c4c:	837b      	strh	r3, [r7, #26]
 8007c4e:	8b7b      	ldrh	r3, [r7, #26]
 8007c50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c54:	837b      	strh	r3, [r7, #26]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	441a      	add	r2, r3
 8007c60:	8b7b      	ldrh	r3, [r7, #26]
 8007c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	8013      	strh	r3, [r2, #0]
 8007c76:	e1a2      	b.n	8007fbe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	441a      	add	r2, r3
 8007c9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cc4:	4413      	add	r3, r2
 8007cc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	011a      	lsls	r2, r3, #4
 8007cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	891b      	ldrh	r3, [r3, #8]
 8007cdc:	085b      	lsrs	r3, r3, #1
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	653b      	str	r3, [r7, #80]	; 0x50
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf8:	4413      	add	r3, r2
 8007cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	011a      	lsls	r2, r3, #4
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	895b      	ldrh	r3, [r3, #10]
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 8091 	bne.w	8007e48 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007d34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d01b      	beq.n	8007d76 <USB_ActivateEndpoint+0x47e>
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01b      	beq.n	8007dc6 <USB_ActivateEndpoint+0x4ce>
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ddc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007dde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007de0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007de4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007de8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e24:	867b      	strh	r3, [r7, #50]	; 0x32
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	441a      	add	r2, r3
 8007e30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	8013      	strh	r3, [r2, #0]
 8007e46:	e0ba      	b.n	8007fbe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007e58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01d      	beq.n	8007ea0 <USB_ActivateEndpoint+0x5a8>
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	441a      	add	r2, r3
 8007e88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007eb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01d      	beq.n	8007ef8 <USB_ActivateEndpoint+0x600>
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	441a      	add	r2, r3
 8007ee0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	78db      	ldrb	r3, [r3, #3]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d024      	beq.n	8007f4a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f1e:	f083 0320 	eor.w	r3, r3, #32
 8007f22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
 8007f48:	e01d      	b.n	8007f86 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	376c      	adds	r7, #108	; 0x6c
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr

08007fcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b08d      	sub	sp, #52	; 0x34
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	7b1b      	ldrb	r3, [r3, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 808e 	bne.w	80080fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d044      	beq.n	8008072 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	81bb      	strh	r3, [r7, #12]
 8007ff6:	89bb      	ldrh	r3, [r7, #12]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01b      	beq.n	8008038 <USB_DeactivateEndpoint+0x6c>
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008016:	817b      	strh	r3, [r7, #10]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	441a      	add	r2, r3
 8008022:	897b      	ldrh	r3, [r7, #10]
 8008024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804e:	813b      	strh	r3, [r7, #8]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	893b      	ldrh	r3, [r7, #8]
 800805c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806c:	b29b      	uxth	r3, r3
 800806e:	8013      	strh	r3, [r2, #0]
 8008070:	e192      	b.n	8008398 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	827b      	strh	r3, [r7, #18]
 8008080:	8a7b      	ldrh	r3, [r7, #18]
 8008082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01b      	beq.n	80080c2 <USB_DeactivateEndpoint+0xf6>
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a0:	823b      	strh	r3, [r7, #16]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	441a      	add	r2, r3
 80080ac:	8a3b      	ldrh	r3, [r7, #16]
 80080ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080be:	b29b      	uxth	r3, r3
 80080c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d8:	81fb      	strh	r3, [r7, #14]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	89fb      	ldrh	r3, [r7, #14]
 80080e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	8013      	strh	r3, [r2, #0]
 80080fa:	e14d      	b.n	8008398 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 80a5 	bne.w	8008250 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	843b      	strh	r3, [r7, #32]
 8008114:	8c3b      	ldrh	r3, [r7, #32]
 8008116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01b      	beq.n	8008156 <USB_DeactivateEndpoint+0x18a>
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	83fb      	strh	r3, [r7, #30]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	441a      	add	r2, r3
 8008140:	8bfb      	ldrh	r3, [r7, #30]
 8008142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800814e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008152:	b29b      	uxth	r3, r3
 8008154:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	83bb      	strh	r3, [r7, #28]
 8008164:	8bbb      	ldrh	r3, [r7, #28]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01b      	beq.n	80081a6 <USB_DeactivateEndpoint+0x1da>
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008184:	837b      	strh	r3, [r7, #26]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	441a      	add	r2, r3
 8008190:	8b7b      	ldrh	r3, [r7, #26]
 8008192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800819a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081bc:	833b      	strh	r3, [r7, #24]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	8b3b      	ldrh	r3, [r7, #24]
 80081ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081da:	b29b      	uxth	r3, r3
 80081dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f4:	82fb      	strh	r3, [r7, #22]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	8afb      	ldrh	r3, [r7, #22]
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822c:	82bb      	strh	r3, [r7, #20]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	441a      	add	r2, r3
 8008238:	8abb      	ldrh	r3, [r7, #20]
 800823a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824a:	b29b      	uxth	r3, r3
 800824c:	8013      	strh	r3, [r2, #0]
 800824e:	e0a3      	b.n	8008398 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800825e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01b      	beq.n	80082a0 <USB_DeactivateEndpoint+0x2d4>
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	441a      	add	r2, r3
 800828a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800828c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	b29b      	uxth	r3, r3
 800829e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80082ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01b      	beq.n	80082f0 <USB_DeactivateEndpoint+0x324>
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	b29b      	uxth	r3, r3
 8008336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800833e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	441a      	add	r2, r3
 800834a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800834c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835c:	b29b      	uxth	r3, r3
 800835e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	847b      	strh	r3, [r7, #34]	; 0x22
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	441a      	add	r2, r3
 8008382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800838c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008394:	b29b      	uxth	r3, r3
 8008396:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3734      	adds	r7, #52	; 0x34
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b0c4      	sub	sp, #272	; 0x110
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	6018      	str	r0, [r3, #0]
 80083ae:	463b      	mov	r3, r7
 80083b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083b2:	463b      	mov	r3, r7
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	f040 8557 	bne.w	8008e6c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083be:	463b      	mov	r3, r7
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699a      	ldr	r2, [r3, #24]
 80083c4:	463b      	mov	r3, r7
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d905      	bls.n	80083da <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80083ce:	463b      	mov	r3, r7
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083d8:	e004      	b.n	80083e4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80083da:	463b      	mov	r3, r7
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80083e4:	463b      	mov	r3, r7
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	7b1b      	ldrb	r3, [r3, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d12c      	bne.n	8008448 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80083ee:	463b      	mov	r3, r7
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6959      	ldr	r1, [r3, #20]
 80083f4:	463b      	mov	r3, r7
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	88da      	ldrh	r2, [r3, #6]
 80083fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083fe:	b29b      	uxth	r3, r3
 8008400:	1d38      	adds	r0, r7, #4
 8008402:	6800      	ldr	r0, [r0, #0]
 8008404:	f001 fa2c 	bl	8009860 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008408:	1d3b      	adds	r3, r7, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	1d3b      	adds	r3, r7, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008416:	b29b      	uxth	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	4413      	add	r3, r2
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	463b      	mov	r3, r7
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	011a      	lsls	r2, r3, #4
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4413      	add	r3, r2
 800842c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008430:	f107 0310 	add.w	r3, r7, #16
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800843a:	b29a      	uxth	r2, r3
 800843c:	f107 0310 	add.w	r3, r7, #16
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	801a      	strh	r2, [r3, #0]
 8008444:	f000 bcdd 	b.w	8008e02 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008448:	463b      	mov	r3, r7
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	2b02      	cmp	r3, #2
 8008450:	f040 8347 	bne.w	8008ae2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6a1a      	ldr	r2, [r3, #32]
 800845a:	463b      	mov	r3, r7
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	f240 82eb 	bls.w	8008a3c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008466:	1d3b      	adds	r3, r7, #4
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	463b      	mov	r3, r7
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008480:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008484:	1d3b      	adds	r3, r7, #4
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	463b      	mov	r3, r7
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	441a      	add	r2, r3
 8008492:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084aa:	463b      	mov	r3, r7
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6a1a      	ldr	r2, [r3, #32]
 80084b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	463b      	mov	r3, r7
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084bc:	1d3b      	adds	r3, r7, #4
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	463b      	mov	r3, r7
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 8159 	beq.w	800878a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084d8:	1d3b      	adds	r3, r7, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
 80084de:	463b      	mov	r3, r7
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d164      	bne.n	80085b2 <USB_EPStartXfer+0x20e>
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	4413      	add	r3, r2
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008500:	463b      	mov	r3, r7
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	011a      	lsls	r2, r3, #4
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	4413      	add	r3, r2
 800850c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008510:	62bb      	str	r3, [r7, #40]	; 0x28
 8008512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d112      	bne.n	8008540 <USB_EPStartXfer+0x19c>
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008524:	b29a      	uxth	r2, r3
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008538:	b29a      	uxth	r2, r3
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	e054      	b.n	80085ea <USB_EPStartXfer+0x246>
 8008540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008544:	2b3e      	cmp	r3, #62	; 0x3e
 8008546:	d817      	bhi.n	8008578 <USB_EPStartXfer+0x1d4>
 8008548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <USB_EPStartXfer+0x1c4>
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	3301      	adds	r3, #1
 8008564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856c:	b29b      	uxth	r3, r3
 800856e:	029b      	lsls	r3, r3, #10
 8008570:	b29a      	uxth	r2, r3
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	e038      	b.n	80085ea <USB_EPStartXfer+0x246>
 8008578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800857c:	095b      	lsrs	r3, r3, #5
 800857e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <USB_EPStartXfer+0x1f4>
 800858e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008592:	3b01      	subs	r3, #1
 8008594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859c:	b29b      	uxth	r3, r3
 800859e:	029b      	lsls	r3, r3, #10
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	e01b      	b.n	80085ea <USB_EPStartXfer+0x246>
 80085b2:	463b      	mov	r3, r7
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d116      	bne.n	80085ea <USB_EPStartXfer+0x246>
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ca:	4413      	add	r3, r2
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
 80085ce:	463b      	mov	r3, r7
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	011a      	lsls	r2, r3, #4
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	4413      	add	r3, r2
 80085da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085de:	633b      	str	r3, [r7, #48]	; 0x30
 80085e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085ea:	463b      	mov	r3, r7
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	895b      	ldrh	r3, [r3, #10]
 80085f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085f4:	463b      	mov	r3, r7
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6959      	ldr	r1, [r3, #20]
 80085fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008604:	1d38      	adds	r0, r7, #4
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	f001 f92a 	bl	8009860 <USB_WritePMA>
            ep->xfer_buff += len;
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008616:	441a      	add	r2, r3
 8008618:	463b      	mov	r3, r7
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800861e:	463b      	mov	r3, r7
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6a1a      	ldr	r2, [r3, #32]
 8008624:	463b      	mov	r3, r7
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	429a      	cmp	r2, r3
 800862c:	d909      	bls.n	8008642 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800862e:	463b      	mov	r3, r7
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6a1a      	ldr	r2, [r3, #32]
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	621a      	str	r2, [r3, #32]
 8008640:	e008      	b.n	8008654 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008642:	463b      	mov	r3, r7
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800864c:	463b      	mov	r3, r7
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2200      	movs	r2, #0
 8008652:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008654:	463b      	mov	r3, r7
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d164      	bne.n	8008728 <USB_EPStartXfer+0x384>
 800865e:	1d3b      	adds	r3, r7, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	1d3b      	adds	r3, r7, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800866c:	b29b      	uxth	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	463b      	mov	r3, r7
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	011a      	lsls	r2, r3, #4
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008686:	61bb      	str	r3, [r7, #24]
 8008688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d112      	bne.n	80086b6 <USB_EPStartXfer+0x312>
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800869a:	b29a      	uxth	r2, r3
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e057      	b.n	8008766 <USB_EPStartXfer+0x3c2>
 80086b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086ba:	2b3e      	cmp	r3, #62	; 0x3e
 80086bc:	d817      	bhi.n	80086ee <USB_EPStartXfer+0x34a>
 80086be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <USB_EPStartXfer+0x33a>
 80086d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086d8:	3301      	adds	r3, #1
 80086da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e03b      	b.n	8008766 <USB_EPStartXfer+0x3c2>
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <USB_EPStartXfer+0x36a>
 8008704:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008708:	3b01      	subs	r3, #1
 800870a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800870e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008712:	b29b      	uxth	r3, r3
 8008714:	029b      	lsls	r3, r3, #10
 8008716:	b29b      	uxth	r3, r3
 8008718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008720:	b29a      	uxth	r2, r3
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	801a      	strh	r2, [r3, #0]
 8008726:	e01e      	b.n	8008766 <USB_EPStartXfer+0x3c2>
 8008728:	463b      	mov	r3, r7
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d119      	bne.n	8008766 <USB_EPStartXfer+0x3c2>
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
 8008738:	1d3b      	adds	r3, r7, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008740:	b29b      	uxth	r3, r3
 8008742:	461a      	mov	r2, r3
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	4413      	add	r3, r2
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
 800874a:	463b      	mov	r3, r7
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	011a      	lsls	r2, r3, #4
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	4413      	add	r3, r2
 8008756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800875a:	623b      	str	r3, [r7, #32]
 800875c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008760:	b29a      	uxth	r2, r3
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008766:	463b      	mov	r3, r7
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	891b      	ldrh	r3, [r3, #8]
 800876c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008770:	463b      	mov	r3, r7
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6959      	ldr	r1, [r3, #20]
 8008776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800877a:	b29b      	uxth	r3, r3
 800877c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008780:	1d38      	adds	r0, r7, #4
 8008782:	6800      	ldr	r0, [r0, #0]
 8008784:	f001 f86c 	bl	8009860 <USB_WritePMA>
 8008788:	e33b      	b.n	8008e02 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800878a:	463b      	mov	r3, r7
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d164      	bne.n	800885e <USB_EPStartXfer+0x4ba>
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800879a:	1d3b      	adds	r3, r7, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a8:	4413      	add	r3, r2
 80087aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ac:	463b      	mov	r3, r7
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	011a      	lsls	r2, r3, #4
 80087b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b6:	4413      	add	r3, r2
 80087b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d112      	bne.n	80087ec <USB_EPStartXfer+0x448>
 80087c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e8:	801a      	strh	r2, [r3, #0]
 80087ea:	e057      	b.n	800889c <USB_EPStartXfer+0x4f8>
 80087ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f0:	2b3e      	cmp	r3, #62	; 0x3e
 80087f2:	d817      	bhi.n	8008824 <USB_EPStartXfer+0x480>
 80087f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <USB_EPStartXfer+0x470>
 800880a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880e:	3301      	adds	r3, #1
 8008810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008818:	b29b      	uxth	r3, r3
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	b29a      	uxth	r2, r3
 800881e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008820:	801a      	strh	r2, [r3, #0]
 8008822:	e03b      	b.n	800889c <USB_EPStartXfer+0x4f8>
 8008824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800882e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <USB_EPStartXfer+0x4a0>
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	3b01      	subs	r3, #1
 8008840:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008848:	b29b      	uxth	r3, r3
 800884a:	029b      	lsls	r3, r3, #10
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008856:	b29a      	uxth	r2, r3
 8008858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e01e      	b.n	800889c <USB_EPStartXfer+0x4f8>
 800885e:	463b      	mov	r3, r7
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d119      	bne.n	800889c <USB_EPStartXfer+0x4f8>
 8008868:	1d3b      	adds	r3, r7, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	657b      	str	r3, [r7, #84]	; 0x54
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800887c:	4413      	add	r3, r2
 800887e:	657b      	str	r3, [r7, #84]	; 0x54
 8008880:	463b      	mov	r3, r7
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	011a      	lsls	r2, r3, #4
 8008888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800888a:	4413      	add	r3, r2
 800888c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008890:	653b      	str	r3, [r7, #80]	; 0x50
 8008892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008896:	b29a      	uxth	r2, r3
 8008898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800889a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800889c:	463b      	mov	r3, r7
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	891b      	ldrh	r3, [r3, #8]
 80088a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088a6:	463b      	mov	r3, r7
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6959      	ldr	r1, [r3, #20]
 80088ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80088b6:	1d38      	adds	r0, r7, #4
 80088b8:	6800      	ldr	r0, [r0, #0]
 80088ba:	f000 ffd1 	bl	8009860 <USB_WritePMA>
            ep->xfer_buff += len;
 80088be:	463b      	mov	r3, r7
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695a      	ldr	r2, [r3, #20]
 80088c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088c8:	441a      	add	r2, r3
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088d0:	463b      	mov	r3, r7
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d909      	bls.n	80088f4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80088e0:	463b      	mov	r3, r7
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a1a      	ldr	r2, [r3, #32]
 80088e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ea:	1ad2      	subs	r2, r2, r3
 80088ec:	463b      	mov	r3, r7
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	621a      	str	r2, [r3, #32]
 80088f2:	e008      	b.n	8008906 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80088f4:	463b      	mov	r3, r7
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80088fe:	463b      	mov	r3, r7
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	647b      	str	r3, [r7, #68]	; 0x44
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	785b      	ldrb	r3, [r3, #1]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d164      	bne.n	80089e0 <USB_EPStartXfer+0x63c>
 8008916:	1d3b      	adds	r3, r7, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891c:	1d3b      	adds	r3, r7, #4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008924:	b29b      	uxth	r3, r3
 8008926:	461a      	mov	r2, r3
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892a:	4413      	add	r3, r2
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800892e:	463b      	mov	r3, r7
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	011a      	lsls	r2, r3, #4
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	4413      	add	r3, r2
 800893a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800893e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d112      	bne.n	800896e <USB_EPStartXfer+0x5ca>
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008952:	b29a      	uxth	r2, r3
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008966:	b29a      	uxth	r2, r3
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	e054      	b.n	8008a18 <USB_EPStartXfer+0x674>
 800896e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008972:	2b3e      	cmp	r3, #62	; 0x3e
 8008974:	d817      	bhi.n	80089a6 <USB_EPStartXfer+0x602>
 8008976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <USB_EPStartXfer+0x5f2>
 800898c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008990:	3301      	adds	r3, #1
 8008992:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800899a:	b29b      	uxth	r3, r3
 800899c:	029b      	lsls	r3, r3, #10
 800899e:	b29a      	uxth	r2, r3
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	e038      	b.n	8008a18 <USB_EPStartXfer+0x674>
 80089a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089b4:	f003 031f 	and.w	r3, r3, #31
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d104      	bne.n	80089c6 <USB_EPStartXfer+0x622>
 80089bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089c0:	3b01      	subs	r3, #1
 80089c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	029b      	lsls	r3, r3, #10
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d8:	b29a      	uxth	r2, r3
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e01b      	b.n	8008a18 <USB_EPStartXfer+0x674>
 80089e0:	463b      	mov	r3, r7
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d116      	bne.n	8008a18 <USB_EPStartXfer+0x674>
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f8:	4413      	add	r3, r2
 80089fa:	647b      	str	r3, [r7, #68]	; 0x44
 80089fc:	463b      	mov	r3, r7
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	011a      	lsls	r2, r3, #4
 8008a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a06:	4413      	add	r3, r2
 8008a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a18:	463b      	mov	r3, r7
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	895b      	ldrh	r3, [r3, #10]
 8008a1e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6959      	ldr	r1, [r3, #20]
 8008a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008a32:	1d38      	adds	r0, r7, #4
 8008a34:	6800      	ldr	r0, [r0, #0]
 8008a36:	f000 ff13 	bl	8009860 <USB_WritePMA>
 8008a3a:	e1e2      	b.n	8008e02 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008a46:	1d3b      	adds	r3, r7, #4
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a60:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008a64:	1d3b      	adds	r3, r7, #4
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	463b      	mov	r3, r7
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	441a      	add	r2, r3
 8008a72:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a8a:	1d3b      	adds	r3, r7, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8008a90:	1d3b      	adds	r3, r7, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a9e:	4413      	add	r3, r2
 8008aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	011a      	lsls	r2, r3, #4
 8008aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aac:	4413      	add	r3, r2
 8008aae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008abc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008abe:	463b      	mov	r3, r7
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	891b      	ldrh	r3, [r3, #8]
 8008ac4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac8:	463b      	mov	r3, r7
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6959      	ldr	r1, [r3, #20]
 8008ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008ad8:	1d38      	adds	r0, r7, #4
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	f000 fec0 	bl	8009860 <USB_WritePMA>
 8008ae0:	e18f      	b.n	8008e02 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ae2:	1d3b      	adds	r3, r7, #4
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 808f 	beq.w	8008c1c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008afe:	1d3b      	adds	r3, r7, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b04:	463b      	mov	r3, r7
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d164      	bne.n	8008bd8 <USB_EPStartXfer+0x834>
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	673b      	str	r3, [r7, #112]	; 0x70
 8008b14:	1d3b      	adds	r3, r7, #4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b22:	4413      	add	r3, r2
 8008b24:	673b      	str	r3, [r7, #112]	; 0x70
 8008b26:	463b      	mov	r3, r7
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	011a      	lsls	r2, r3, #4
 8008b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b30:	4413      	add	r3, r2
 8008b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d112      	bne.n	8008b66 <USB_EPStartXfer+0x7c2>
 8008b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4e:	801a      	strh	r2, [r3, #0]
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e054      	b.n	8008c10 <USB_EPStartXfer+0x86c>
 8008b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b6c:	d817      	bhi.n	8008b9e <USB_EPStartXfer+0x7fa>
 8008b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b72:	085b      	lsrs	r3, r3, #1
 8008b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <USB_EPStartXfer+0x7ea>
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b88:	3301      	adds	r3, #1
 8008b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	029b      	lsls	r3, r3, #10
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	e038      	b.n	8008c10 <USB_EPStartXfer+0x86c>
 8008b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ba2:	095b      	lsrs	r3, r3, #5
 8008ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bac:	f003 031f 	and.w	r3, r3, #31
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <USB_EPStartXfer+0x81a>
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	029b      	lsls	r3, r3, #10
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e01b      	b.n	8008c10 <USB_EPStartXfer+0x86c>
 8008bd8:	463b      	mov	r3, r7
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d116      	bne.n	8008c10 <USB_EPStartXfer+0x86c>
 8008be2:	1d3b      	adds	r3, r7, #4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bf0:	4413      	add	r3, r2
 8008bf2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	011a      	lsls	r2, r3, #4
 8008bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bfe:	4413      	add	r3, r2
 8008c00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c04:	677b      	str	r3, [r7, #116]	; 0x74
 8008c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c10:	463b      	mov	r3, r7
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	895b      	ldrh	r3, [r3, #10]
 8008c16:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8008c1a:	e097      	b.n	8008d4c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d168      	bne.n	8008cf8 <USB_EPStartXfer+0x954>
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c2e:	1d3b      	adds	r3, r7, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c3e:	4413      	add	r3, r2
 8008c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c44:	463b      	mov	r3, r7
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	011a      	lsls	r2, r3, #4
 8008c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c50:	4413      	add	r3, r2
 8008c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d112      	bne.n	8008c86 <USB_EPStartXfer+0x8e2>
 8008c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c82:	801a      	strh	r2, [r3, #0]
 8008c84:	e05d      	b.n	8008d42 <USB_EPStartXfer+0x99e>
 8008c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c8c:	d817      	bhi.n	8008cbe <USB_EPStartXfer+0x91a>
 8008c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c92:	085b      	lsrs	r3, r3, #1
 8008c94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <USB_EPStartXfer+0x90a>
 8008ca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ca8:	3301      	adds	r3, #1
 8008caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	029b      	lsls	r3, r3, #10
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cba:	801a      	strh	r2, [r3, #0]
 8008cbc:	e041      	b.n	8008d42 <USB_EPStartXfer+0x99e>
 8008cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <USB_EPStartXfer+0x93a>
 8008cd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cf4:	801a      	strh	r2, [r3, #0]
 8008cf6:	e024      	b.n	8008d42 <USB_EPStartXfer+0x99e>
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d11f      	bne.n	8008d42 <USB_EPStartXfer+0x99e>
 8008d02:	1d3b      	adds	r3, r7, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d0a:	1d3b      	adds	r3, r7, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d20:	463b      	mov	r3, r7
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	011a      	lsls	r2, r3, #4
 8008d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d42:	463b      	mov	r3, r7
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	891b      	ldrh	r3, [r3, #8]
 8008d48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6959      	ldr	r1, [r3, #20]
 8008d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008d5c:	1d38      	adds	r0, r7, #4
 8008d5e:	6800      	ldr	r0, [r0, #0]
 8008d60:	f000 fd7e 	bl	8009860 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008d64:	463b      	mov	r3, r7
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d122      	bne.n	8008db4 <USB_EPStartXfer+0xa10>
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	463b      	mov	r3, r7
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d88:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008d8c:	1d3b      	adds	r3, r7, #4
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	463b      	mov	r3, r7
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	441a      	add	r2, r3
 8008d9a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008daa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	8013      	strh	r3, [r2, #0]
 8008db2:	e026      	b.n	8008e02 <USB_EPStartXfer+0xa5e>
 8008db4:	463b      	mov	r3, r7
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d121      	bne.n	8008e02 <USB_EPStartXfer+0xa5e>
 8008dbe:	1d3b      	adds	r3, r7, #4
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008ddc:	1d3b      	adds	r3, r7, #4
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	463b      	mov	r3, r7
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e02:	1d3b      	adds	r3, r7, #4
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	463b      	mov	r3, r7
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f107 020e 	add.w	r2, r7, #14
 8008e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e20:	8013      	strh	r3, [r2, #0]
 8008e22:	f107 030e 	add.w	r3, r7, #14
 8008e26:	f107 020e 	add.w	r2, r7, #14
 8008e2a:	8812      	ldrh	r2, [r2, #0]
 8008e2c:	f082 0210 	eor.w	r2, r2, #16
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	f107 030e 	add.w	r3, r7, #14
 8008e36:	f107 020e 	add.w	r2, r7, #14
 8008e3a:	8812      	ldrh	r2, [r2, #0]
 8008e3c:	f082 0220 	eor.w	r2, r2, #32
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	1d3b      	adds	r3, r7, #4
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	463b      	mov	r3, r7
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	441a      	add	r2, r3
 8008e50:	f107 030e 	add.w	r3, r7, #14
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]
 8008e6a:	e3b5      	b.n	80095d8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	7b1b      	ldrb	r3, [r3, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f040 8090 	bne.w	8008f98 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008e78:	463b      	mov	r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	463b      	mov	r3, r7
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d90e      	bls.n	8008ea6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008e88:	463b      	mov	r3, r7
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008e92:	463b      	mov	r3, r7
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e9c:	1ad2      	subs	r2, r2, r3
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	619a      	str	r2, [r3, #24]
 8008ea4:	e008      	b.n	8008eb8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008eb0:	463b      	mov	r3, r7
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ec0:	1d3b      	adds	r3, r7, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	011a      	lsls	r2, r3, #4
 8008ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d116      	bne.n	8008f22 <USB_EPStartXfer+0xb7e>
 8008ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f1e:	801a      	strh	r2, [r3, #0]
 8008f20:	e32c      	b.n	800957c <USB_EPStartXfer+0x11d8>
 8008f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f26:	2b3e      	cmp	r3, #62	; 0x3e
 8008f28:	d818      	bhi.n	8008f5c <USB_EPStartXfer+0xbb8>
 8008f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <USB_EPStartXfer+0xba6>
 8008f40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f44:	3301      	adds	r3, #1
 8008f46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	029b      	lsls	r3, r3, #10
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	e30f      	b.n	800957c <USB_EPStartXfer+0x11d8>
 8008f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f6a:	f003 031f 	and.w	r3, r3, #31
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <USB_EPStartXfer+0xbd8>
 8008f72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f76:	3b01      	subs	r3, #1
 8008f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	029b      	lsls	r3, r3, #10
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f94:	801a      	strh	r2, [r3, #0]
 8008f96:	e2f1      	b.n	800957c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008f98:	463b      	mov	r3, r7
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	78db      	ldrb	r3, [r3, #3]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	f040 818f 	bne.w	80092c2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d175      	bne.n	800909a <USB_EPStartXfer+0xcf6>
 8008fae:	1d3b      	adds	r3, r7, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fb6:	1d3b      	adds	r3, r7, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fcc:	463b      	mov	r3, r7
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	011a      	lsls	r2, r3, #4
 8008fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fd8:	4413      	add	r3, r2
 8008fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d116      	bne.n	800901a <USB_EPStartXfer+0xc76>
 8008fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800900c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009010:	b29a      	uxth	r2, r3
 8009012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009016:	801a      	strh	r2, [r3, #0]
 8009018:	e065      	b.n	80090e6 <USB_EPStartXfer+0xd42>
 800901a:	463b      	mov	r3, r7
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b3e      	cmp	r3, #62	; 0x3e
 8009022:	d81a      	bhi.n	800905a <USB_EPStartXfer+0xcb6>
 8009024:	463b      	mov	r3, r7
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	085b      	lsrs	r3, r3, #1
 800902c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009030:	463b      	mov	r3, r7
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d004      	beq.n	8009048 <USB_EPStartXfer+0xca4>
 800903e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009042:	3301      	adds	r3, #1
 8009044:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800904c:	b29b      	uxth	r3, r3
 800904e:	029b      	lsls	r3, r3, #10
 8009050:	b29a      	uxth	r2, r3
 8009052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009056:	801a      	strh	r2, [r3, #0]
 8009058:	e045      	b.n	80090e6 <USB_EPStartXfer+0xd42>
 800905a:	463b      	mov	r3, r7
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009066:	463b      	mov	r3, r7
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <USB_EPStartXfer+0xcda>
 8009074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009078:	3b01      	subs	r3, #1
 800907a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800907e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009082:	b29b      	uxth	r3, r3
 8009084:	029b      	lsls	r3, r3, #10
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009090:	b29a      	uxth	r2, r3
 8009092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e025      	b.n	80090e6 <USB_EPStartXfer+0xd42>
 800909a:	463b      	mov	r3, r7
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d120      	bne.n	80090e6 <USB_EPStartXfer+0xd42>
 80090a4:	1d3b      	adds	r3, r7, #4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090ac:	1d3b      	adds	r3, r7, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	461a      	mov	r2, r3
 80090b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090bc:	4413      	add	r3, r2
 80090be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090c2:	463b      	mov	r3, r7
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	011a      	lsls	r2, r3, #4
 80090ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090ce:	4413      	add	r3, r2
 80090d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090d8:	463b      	mov	r3, r7
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090ee:	463b      	mov	r3, r7
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d175      	bne.n	80091e4 <USB_EPStartXfer+0xe40>
 80090f8:	1d3b      	adds	r3, r7, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009100:	1d3b      	adds	r3, r7, #4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009108:	b29b      	uxth	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009110:	4413      	add	r3, r2
 8009112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009116:	463b      	mov	r3, r7
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009122:	4413      	add	r3, r2
 8009124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800912c:	463b      	mov	r3, r7
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d116      	bne.n	8009164 <USB_EPStartXfer+0xdc0>
 8009136:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009142:	b29a      	uxth	r2, r3
 8009144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009160:	801a      	strh	r2, [r3, #0]
 8009162:	e061      	b.n	8009228 <USB_EPStartXfer+0xe84>
 8009164:	463b      	mov	r3, r7
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b3e      	cmp	r3, #62	; 0x3e
 800916c:	d81a      	bhi.n	80091a4 <USB_EPStartXfer+0xe00>
 800916e:	463b      	mov	r3, r7
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800917a:	463b      	mov	r3, r7
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <USB_EPStartXfer+0xdee>
 8009188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800918c:	3301      	adds	r3, #1
 800918e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009196:	b29b      	uxth	r3, r3
 8009198:	029b      	lsls	r3, r3, #10
 800919a:	b29a      	uxth	r2, r3
 800919c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091a0:	801a      	strh	r2, [r3, #0]
 80091a2:	e041      	b.n	8009228 <USB_EPStartXfer+0xe84>
 80091a4:	463b      	mov	r3, r7
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091b0:	463b      	mov	r3, r7
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d104      	bne.n	80091c8 <USB_EPStartXfer+0xe24>
 80091be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c2:	3b01      	subs	r3, #1
 80091c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	029b      	lsls	r3, r3, #10
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091da:	b29a      	uxth	r2, r3
 80091dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091e0:	801a      	strh	r2, [r3, #0]
 80091e2:	e021      	b.n	8009228 <USB_EPStartXfer+0xe84>
 80091e4:	463b      	mov	r3, r7
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d11c      	bne.n	8009228 <USB_EPStartXfer+0xe84>
 80091ee:	1d3b      	adds	r3, r7, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091fe:	4413      	add	r3, r2
 8009200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009204:	463b      	mov	r3, r7
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	011a      	lsls	r2, r3, #4
 800920c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009210:	4413      	add	r3, r2
 8009212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	b29a      	uxth	r2, r3
 8009222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009226:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009228:	463b      	mov	r3, r7
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 81a4 	beq.w	800957c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009234:	1d3b      	adds	r3, r7, #4
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	463b      	mov	r3, r7
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009248:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800924c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <USB_EPStartXfer+0xebc>
 8009254:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10d      	bne.n	800927c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009260:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009268:	2b00      	cmp	r3, #0
 800926a:	f040 8187 	bne.w	800957c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800926e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 8180 	bne.w	800957c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800927c:	1d3b      	adds	r3, r7, #4
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	463b      	mov	r3, r7
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009296:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800929a:	1d3b      	adds	r3, r7, #4
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	463b      	mov	r3, r7
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	441a      	add	r2, r3
 80092a8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80092ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092bc:	b29b      	uxth	r3, r3
 80092be:	8013      	strh	r3, [r2, #0]
 80092c0:	e15c      	b.n	800957c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80092c2:	463b      	mov	r3, r7
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	78db      	ldrb	r3, [r3, #3]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	f040 8155 	bne.w	8009578 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80092ce:	463b      	mov	r3, r7
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699a      	ldr	r2, [r3, #24]
 80092d4:	463b      	mov	r3, r7
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d90e      	bls.n	80092fc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80092de:	463b      	mov	r3, r7
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80092e8:	463b      	mov	r3, r7
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	463b      	mov	r3, r7
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	619a      	str	r2, [r3, #24]
 80092fa:	e008      	b.n	800930e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80092fc:	463b      	mov	r3, r7
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009306:	463b      	mov	r3, r7
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2200      	movs	r2, #0
 800930c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d16f      	bne.n	80093f8 <USB_EPStartXfer+0x1054>
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009320:	1d3b      	adds	r3, r7, #4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009328:	b29b      	uxth	r3, r3
 800932a:	461a      	mov	r2, r3
 800932c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009330:	4413      	add	r3, r2
 8009332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009336:	463b      	mov	r3, r7
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	011a      	lsls	r2, r3, #4
 800933e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009342:	4413      	add	r3, r2
 8009344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800934c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009350:	2b00      	cmp	r3, #0
 8009352:	d116      	bne.n	8009382 <USB_EPStartXfer+0xfde>
 8009354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009360:	b29a      	uxth	r2, r3
 8009362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009378:	b29a      	uxth	r2, r3
 800937a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	e05f      	b.n	8009442 <USB_EPStartXfer+0x109e>
 8009382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009386:	2b3e      	cmp	r3, #62	; 0x3e
 8009388:	d818      	bhi.n	80093bc <USB_EPStartXfer+0x1018>
 800938a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <USB_EPStartXfer+0x1006>
 80093a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a4:	3301      	adds	r3, #1
 80093a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	029b      	lsls	r3, r3, #10
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093b8:	801a      	strh	r2, [r3, #0]
 80093ba:	e042      	b.n	8009442 <USB_EPStartXfer+0x109e>
 80093bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093ca:	f003 031f 	and.w	r3, r3, #31
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d104      	bne.n	80093dc <USB_EPStartXfer+0x1038>
 80093d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d6:	3b01      	subs	r3, #1
 80093d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	029b      	lsls	r3, r3, #10
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	e024      	b.n	8009442 <USB_EPStartXfer+0x109e>
 80093f8:	463b      	mov	r3, r7
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d11f      	bne.n	8009442 <USB_EPStartXfer+0x109e>
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800940a:	1d3b      	adds	r3, r7, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009412:	b29b      	uxth	r3, r3
 8009414:	461a      	mov	r2, r3
 8009416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800941a:	4413      	add	r3, r2
 800941c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009420:	463b      	mov	r3, r7
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	011a      	lsls	r2, r3, #4
 8009428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800942c:	4413      	add	r3, r2
 800942e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800943a:	b29a      	uxth	r2, r3
 800943c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009440:	801a      	strh	r2, [r3, #0]
 8009442:	1d3b      	adds	r3, r7, #4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800944a:	463b      	mov	r3, r7
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d16f      	bne.n	8009534 <USB_EPStartXfer+0x1190>
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800945c:	1d3b      	adds	r3, r7, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009464:	b29b      	uxth	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800946c:	4413      	add	r3, r2
 800946e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009472:	463b      	mov	r3, r7
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	011a      	lsls	r2, r3, #4
 800947a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800947e:	4413      	add	r3, r2
 8009480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d116      	bne.n	80094be <USB_EPStartXfer+0x111a>
 8009490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800949c:	b29a      	uxth	r2, r3
 800949e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e05e      	b.n	800957c <USB_EPStartXfer+0x11d8>
 80094be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094c2:	2b3e      	cmp	r3, #62	; 0x3e
 80094c4:	d818      	bhi.n	80094f8 <USB_EPStartXfer+0x1154>
 80094c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <USB_EPStartXfer+0x1142>
 80094dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094e0:	3301      	adds	r3, #1
 80094e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	029b      	lsls	r3, r3, #10
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094f4:	801a      	strh	r2, [r3, #0]
 80094f6:	e041      	b.n	800957c <USB_EPStartXfer+0x11d8>
 80094f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	2b00      	cmp	r3, #0
 800950c:	d104      	bne.n	8009518 <USB_EPStartXfer+0x1174>
 800950e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009512:	3b01      	subs	r3, #1
 8009514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800951c:	b29b      	uxth	r3, r3
 800951e:	029b      	lsls	r3, r3, #10
 8009520:	b29b      	uxth	r3, r3
 8009522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952a:	b29a      	uxth	r2, r3
 800952c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	e023      	b.n	800957c <USB_EPStartXfer+0x11d8>
 8009534:	463b      	mov	r3, r7
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d11e      	bne.n	800957c <USB_EPStartXfer+0x11d8>
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009546:	b29b      	uxth	r3, r3
 8009548:	461a      	mov	r2, r3
 800954a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800954e:	4413      	add	r3, r2
 8009550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009554:	463b      	mov	r3, r7
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	011a      	lsls	r2, r3, #4
 800955c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009560:	4413      	add	r3, r2
 8009562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800956a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800956e:	b29a      	uxth	r2, r3
 8009570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	e001      	b.n	800957c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e02e      	b.n	80095da <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	463b      	mov	r3, r7
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009596:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800959a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800959e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80095a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80095b2:	1d3b      	adds	r3, r7, #4
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	441a      	add	r2, r3
 80095c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d020      	beq.n	8009638 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	b29b      	uxth	r3, r3
 8009604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800960c:	81bb      	strh	r3, [r7, #12]
 800960e:	89bb      	ldrh	r3, [r7, #12]
 8009610:	f083 0310 	eor.w	r3, r3, #16
 8009614:	81bb      	strh	r3, [r7, #12]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	441a      	add	r2, r3
 8009620:	89bb      	ldrh	r3, [r7, #12]
 8009622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800962a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009632:	b29b      	uxth	r3, r3
 8009634:	8013      	strh	r3, [r2, #0]
 8009636:	e01f      	b.n	8009678 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800964a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964e:	81fb      	strh	r3, [r7, #14]
 8009650:	89fb      	ldrh	r3, [r7, #14]
 8009652:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009656:	81fb      	strh	r3, [r7, #14]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	441a      	add	r2, r3
 8009662:	89fb      	ldrh	r3, [r7, #14]
 8009664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800966c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009674:	b29b      	uxth	r3, r3
 8009676:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr

08009684 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	7b1b      	ldrb	r3, [r3, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f040 809d 	bne.w	80097d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d04c      	beq.n	800973a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	823b      	strh	r3, [r7, #16]
 80096ae:	8a3b      	ldrh	r3, [r7, #16]
 80096b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01b      	beq.n	80096f0 <USB_EPClearStall+0x6c>
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ce:	81fb      	strh	r3, [r7, #14]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	441a      	add	r2, r3
 80096da:	89fb      	ldrh	r3, [r7, #14]
 80096dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	78db      	ldrb	r3, [r3, #3]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d06c      	beq.n	80097d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800970e:	81bb      	strh	r3, [r7, #12]
 8009710:	89bb      	ldrh	r3, [r7, #12]
 8009712:	f083 0320 	eor.w	r3, r3, #32
 8009716:	81bb      	strh	r3, [r7, #12]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	441a      	add	r2, r3
 8009722:	89bb      	ldrh	r3, [r7, #12]
 8009724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800972c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009734:	b29b      	uxth	r3, r3
 8009736:	8013      	strh	r3, [r2, #0]
 8009738:	e04b      	b.n	80097d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	82fb      	strh	r3, [r7, #22]
 8009748:	8afb      	ldrh	r3, [r7, #22]
 800974a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d01b      	beq.n	800978a <USB_EPClearStall+0x106>
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009768:	82bb      	strh	r3, [r7, #20]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	441a      	add	r2, r3
 8009774:	8abb      	ldrh	r3, [r7, #20]
 8009776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800977a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800977e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009786:	b29b      	uxth	r3, r3
 8009788:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800979c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a0:	827b      	strh	r3, [r7, #18]
 80097a2:	8a7b      	ldrh	r3, [r7, #18]
 80097a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097a8:	827b      	strh	r3, [r7, #18]
 80097aa:	8a7b      	ldrh	r3, [r7, #18]
 80097ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097b0:	827b      	strh	r3, [r7, #18]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	441a      	add	r2, r3
 80097bc:	8a7b      	ldrh	r3, [r7, #18]
 80097be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	371c      	adds	r7, #28
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	4770      	bx	lr

080097de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80097de:	b480      	push	{r7}
 80097e0:	b083      	sub	sp, #12
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	460b      	mov	r3, r1
 80097e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d103      	bne.n	80097f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2280      	movs	r2, #128	; 0x80
 80097f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr

08009804 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr

08009818 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr

0800982c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800983a:	b29b      	uxth	r3, r3
 800983c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800983e:	68fb      	ldr	r3, [r7, #12]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr

0800984a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	bc80      	pop	{r7}
 800985e:	4770      	bx	lr

08009860 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009860:	b480      	push	{r7}
 8009862:	b08d      	sub	sp, #52	; 0x34
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4611      	mov	r1, r2
 800986c:	461a      	mov	r2, r3
 800986e:	460b      	mov	r3, r1
 8009870:	80fb      	strh	r3, [r7, #6]
 8009872:	4613      	mov	r3, r2
 8009874:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009876:	88bb      	ldrh	r3, [r7, #4]
 8009878:	3301      	adds	r3, #1
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	005a      	lsls	r2, r3, #1
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009892:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009898:	e01e      	b.n	80098d8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	3301      	adds	r3, #1
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	3302      	adds	r3, #2
 80098c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	3302      	adds	r3, #2
 80098ca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	3301      	adds	r3, #1
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	3b01      	subs	r3, #1
 80098d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1dd      	bne.n	800989a <USB_WritePMA+0x3a>
  }
}
 80098de:	bf00      	nop
 80098e0:	3734      	adds	r7, #52	; 0x34
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b08b      	sub	sp, #44	; 0x2c
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4611      	mov	r1, r2
 80098f4:	461a      	mov	r2, r3
 80098f6:	460b      	mov	r3, r1
 80098f8:	80fb      	strh	r3, [r7, #6]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80098fe:	88bb      	ldrh	r3, [r7, #4]
 8009900:	085b      	lsrs	r3, r3, #1
 8009902:	b29b      	uxth	r3, r3
 8009904:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800990e:	88fb      	ldrh	r3, [r7, #6]
 8009910:	005a      	lsls	r2, r3, #1
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4413      	add	r3, r2
 8009916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800991a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
 8009920:	e01b      	b.n	800995a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	3302      	adds	r3, #2
 800992e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	3301      	adds	r3, #1
 800993c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	0a1b      	lsrs	r3, r3, #8
 8009942:	b2da      	uxtb	r2, r3
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	3301      	adds	r3, #1
 800994c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	3302      	adds	r3, #2
 8009952:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	3b01      	subs	r3, #1
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e0      	bne.n	8009922 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009960:	88bb      	ldrh	r3, [r7, #4]
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d007      	beq.n	800997c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29b      	uxth	r3, r3
 8009972:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	b2da      	uxtb	r2, r3
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	701a      	strb	r2, [r3, #0]
  }
}
 800997c:	bf00      	nop
 800997e:	372c      	adds	r7, #44	; 0x2c
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr

08009986 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7c1b      	ldrb	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d115      	bne.n	80099ca <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800999e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a2:	2202      	movs	r2, #2
 80099a4:	2181      	movs	r1, #129	; 0x81
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fed2 	bl	800b750 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099b6:	2202      	movs	r2, #2
 80099b8:	2101      	movs	r1, #1
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 fec8 	bl	800b750 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80099c8:	e012      	b.n	80099f0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099ca:	2340      	movs	r3, #64	; 0x40
 80099cc:	2202      	movs	r2, #2
 80099ce:	2181      	movs	r1, #129	; 0x81
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 febd 	bl	800b750 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	2202      	movs	r2, #2
 80099e0:	2101      	movs	r1, #1
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 feb4 	bl	800b750 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099f0:	2308      	movs	r3, #8
 80099f2:	2203      	movs	r2, #3
 80099f4:	2182      	movs	r1, #130	; 0x82
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 feaa 	bl	800b750 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a02:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a06:	f001 ffcb 	bl	800b9a0 <USBD_static_malloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
 8009a20:	e026      	b.n	8009a70 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a28:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7c1b      	ldrb	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d109      	bne.n	8009a60 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a56:	2101      	movs	r1, #1
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 ff6a 	bl	800b932 <USBD_LL_PrepareReceive>
 8009a5e:	e007      	b.n	8009a70 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	2101      	movs	r1, #1
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 ff61 	bl	800b932 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a8a:	2181      	movs	r1, #129	; 0x81
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fe85 	bl	800b79c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a98:	2101      	movs	r1, #1
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fe7e 	bl	800b79c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009aa8:	2182      	movs	r1, #130	; 0x82
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fe76 	bl	800b79c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00e      	beq.n	8009ade <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 ff71 	bl	800b9b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d039      	beq.n	8009b86 <USBD_CDC_Setup+0x9e>
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	d17c      	bne.n	8009c10 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	88db      	ldrh	r3, [r3, #6]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d029      	beq.n	8009b72 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	b25b      	sxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	da11      	bge.n	8009b4c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009b34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	88d2      	ldrh	r2, [r2, #6]
 8009b3a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b3c:	6939      	ldr	r1, [r7, #16]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	88db      	ldrh	r3, [r3, #6]
 8009b42:	461a      	mov	r2, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 fa0f 	bl	800af68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009b4a:	e068      	b.n	8009c1e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	785a      	ldrb	r2, [r3, #1]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	88db      	ldrh	r3, [r3, #6]
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b62:	6939      	ldr	r1, [r7, #16]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fa2a 	bl	800afc4 <USBD_CtlPrepareRx>
      break;
 8009b70:	e055      	b.n	8009c1e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	7850      	ldrb	r0, [r2, #1]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	4798      	blx	r3
      break;
 8009b84:	e04b      	b.n	8009c1e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	2b0a      	cmp	r3, #10
 8009b8c:	d017      	beq.n	8009bbe <USBD_CDC_Setup+0xd6>
 8009b8e:	2b0b      	cmp	r3, #11
 8009b90:	d029      	beq.n	8009be6 <USBD_CDC_Setup+0xfe>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d133      	bne.n	8009bfe <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d107      	bne.n	8009bb0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009ba0:	f107 030c 	add.w	r3, r7, #12
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f001 f9dd 	bl	800af68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bae:	e02e      	b.n	8009c0e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 f96e 	bl	800ae94 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	75fb      	strb	r3, [r7, #23]
          break;
 8009bbc:	e027      	b.n	8009c0e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d107      	bne.n	8009bd8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009bc8:	f107 030f 	add.w	r3, r7, #15
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f9c9 	bl	800af68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bd6:	e01a      	b.n	8009c0e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 f95a 	bl	800ae94 <USBD_CtlError>
            ret = USBD_FAIL;
 8009be0:	2302      	movs	r3, #2
 8009be2:	75fb      	strb	r3, [r7, #23]
          break;
 8009be4:	e013      	b.n	8009c0e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d00d      	beq.n	8009c0c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 f94e 	bl	800ae94 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009bfc:	e006      	b.n	8009c0c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f001 f947 	bl	800ae94 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c06:	2302      	movs	r3, #2
 8009c08:	75fb      	strb	r3, [r7, #23]
          break;
 8009c0a:	e000      	b.n	8009c0e <USBD_CDC_Setup+0x126>
          break;
 8009c0c:	bf00      	nop
      }
      break;
 8009c0e:	e006      	b.n	8009c1e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 f93e 	bl	800ae94 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c18:	2302      	movs	r3, #2
 8009c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1c:	bf00      	nop
  }

  return ret;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c42:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d03a      	beq.n	8009cc4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	331c      	adds	r3, #28
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <USBD_CDC_DataIn+0x90>
 8009c64:	78fa      	ldrb	r2, [r7, #3]
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	440b      	add	r3, r1
 8009c72:	331c      	adds	r3, #28
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	78f9      	ldrb	r1, [r7, #3]
 8009c78:	68b8      	ldr	r0, [r7, #8]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	4403      	add	r3, r0
 8009c84:	3338      	adds	r3, #56	; 0x38
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c8c:	fb03 f301 	mul.w	r3, r3, r1
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d110      	bne.n	8009cb8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	331c      	adds	r3, #28
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009caa:	78f9      	ldrb	r1, [r7, #3]
 8009cac:	2300      	movs	r3, #0
 8009cae:	2200      	movs	r2, #0
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 fe1b 	bl	800b8ec <USBD_LL_Transmit>
 8009cb6:	e003      	b.n	8009cc0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 fe46 	bl	800b978 <USBD_LL_GetRxDataSize>
 8009cec:	4602      	mov	r2, r0
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00d      	beq.n	8009d1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d12:	4611      	mov	r1, r2
 8009d14:	4798      	blx	r3

    return USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	e000      	b.n	8009d1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d1a:	2302      	movs	r3, #2
  }
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d015      	beq.n	8009d6a <USBD_CDC_EP0_RxReady+0x46>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d44:	2bff      	cmp	r3, #255	; 0xff
 8009d46:	d010      	beq.n	8009d6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009d56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d5e:	b292      	uxth	r2, r2
 8009d60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	22ff      	movs	r2, #255	; 0xff
 8009d66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2243      	movs	r2, #67	; 0x43
 8009d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009d82:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	2000009c 	.word	0x2000009c

08009d94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2243      	movs	r2, #67	; 0x43
 8009da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009da2:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	20000058 	.word	0x20000058

08009db4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2243      	movs	r2, #67	; 0x43
 8009dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009dc2:	4b03      	ldr	r3, [pc, #12]	; (8009dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bc80      	pop	{r7}
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	200000e0 	.word	0x200000e0

08009dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220a      	movs	r2, #10
 8009de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000014 	.word	0x20000014

08009df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bc80      	pop	{r7}
 8009e1e:	4770      	bx	lr

08009e20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e3e:	88fa      	ldrh	r2, [r7, #6]
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr

08009e52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01c      	beq.n	8009ecc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d115      	bne.n	8009ec8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	2181      	movs	r1, #129	; 0x81
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 fd14 	bl	800b8ec <USBD_LL_Transmit>

      return USBD_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e002      	b.n	8009ece <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009ecc:	2302      	movs	r3, #2
  }
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d017      	beq.n	8009f20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7c1b      	ldrb	r3, [r3, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f02:	2101      	movs	r1, #1
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 fd14 	bl	800b932 <USBD_LL_PrepareReceive>
 8009f0a:	e007      	b.n	8009f1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f12:	2340      	movs	r3, #64	; 0x40
 8009f14:	2101      	movs	r1, #1
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 fd0b 	bl	800b932 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e000      	b.n	8009f22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009f20:	2302      	movs	r3, #2
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	4613      	mov	r3, r2
 8009f36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e01a      	b.n	8009f78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	79fa      	ldrb	r2, [r7, #7]
 8009f6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f001 fb5d 	bl	800b630 <USBD_LL_Init>

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d006      	beq.n	8009fa2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]
 8009fa0:	e001      	b.n	8009fa6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr

08009fb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 fb92 	bl	800b6e4 <USBD_LL_Start>

  return USBD_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6852      	ldr	r2, [r2, #4]
 8009fde:	b2d2      	uxtb	r2, r2
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fb97 	bl	800b71a <USBD_LL_Stop>

  return USBD_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr

0800a00a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a016:	2302      	movs	r3, #2
 800a018:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	4611      	mov	r1, r2
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	4798      	blx	r3
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	78fa      	ldrb	r2, [r7, #3]
 800a05e:	4611      	mov	r1, r2
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4798      	blx	r3

  return USBD_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	4618      	mov	r0, r3
 800a082:	f000 fecb 	bl	800ae1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a094:	461a      	mov	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a0a2:	f003 031f 	and.w	r3, r3, #31
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d00c      	beq.n	800a0c4 <USBD_LL_SetupStage+0x56>
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d302      	bcc.n	800a0b4 <USBD_LL_SetupStage+0x46>
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d010      	beq.n	800a0d4 <USBD_LL_SetupStage+0x66>
 800a0b2:	e017      	b.n	800a0e4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f9cb 	bl	800a458 <USBD_StdDevReq>
      break;
 800a0c2:	e01a      	b.n	800a0fa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fa2d 	bl	800a52c <USBD_StdItfReq>
      break;
 800a0d2:	e012      	b.n	800a0fa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fa6b 	bl	800a5b8 <USBD_StdEPReq>
      break;
 800a0e2:	e00a      	b.n	800a0fa <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a0ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 fb71 	bl	800b7da <USBD_LL_StallEP>
      break;
 800a0f8:	bf00      	nop
  }

  return USBD_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	460b      	mov	r3, r1
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d14b      	bne.n	800a1b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a11e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a126:	2b03      	cmp	r3, #3
 800a128:	d134      	bne.n	800a194 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	429a      	cmp	r2, r3
 800a134:	d919      	bls.n	800a16a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	68da      	ldr	r2, [r3, #12]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d203      	bcs.n	800a158 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a154:	b29b      	uxth	r3, r3
 800a156:	e002      	b.n	800a15e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	6879      	ldr	r1, [r7, #4]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 ff4c 	bl	800b000 <USBD_CtlContinueRx>
 800a168:	e038      	b.n	800a1dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00a      	beq.n	800a18c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d105      	bne.n	800a18c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 ff49 	bl	800b024 <USBD_CtlSendStatus>
 800a192:	e023      	b.n	800a1dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	d11e      	bne.n	800a1dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f001 fb16 	bl	800b7da <USBD_LL_StallEP>
 800a1ae:	e015      	b.n	800a1dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00d      	beq.n	800a1d8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d108      	bne.n	800a1d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	7afa      	ldrb	r2, [r7, #11]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	4798      	blx	r3
 800a1d6:	e001      	b.n	800a1dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e000      	b.n	800a1de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b086      	sub	sp, #24
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d17f      	bne.n	800a2fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3314      	adds	r3, #20
 800a1fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a206:	2b02      	cmp	r3, #2
 800a208:	d15c      	bne.n	800a2c4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	429a      	cmp	r2, r3
 800a214:	d915      	bls.n	800a242 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	461a      	mov	r2, r3
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 feb6 	bl	800afa0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a234:	2300      	movs	r3, #0
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f001 fb79 	bl	800b932 <USBD_LL_PrepareReceive>
 800a240:	e04e      	b.n	800a2e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	6912      	ldr	r2, [r2, #16]
 800a24a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a24e:	fb02 f201 	mul.w	r2, r2, r1
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d11c      	bne.n	800a292 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a260:	429a      	cmp	r2, r3
 800a262:	d316      	bcc.n	800a292 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a26e:	429a      	cmp	r2, r3
 800a270:	d20f      	bcs.n	800a292 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 fe92 	bl	800afa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a284:	2300      	movs	r3, #0
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f001 fb51 	bl	800b932 <USBD_LL_PrepareReceive>
 800a290:	e026      	b.n	800a2e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d105      	bne.n	800a2b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a2b4:	2180      	movs	r1, #128	; 0x80
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f001 fa8f 	bl	800b7da <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fec4 	bl	800b04a <USBD_CtlReceiveStatus>
 800a2c2:	e00d      	b.n	800a2e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d004      	beq.n	800a2d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a2d8:	2180      	movs	r1, #128	; 0x80
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f001 fa7d 	bl	800b7da <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d11d      	bne.n	800a326 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fe83 	bl	8009ff6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2f8:	e015      	b.n	800a326 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00d      	beq.n	800a322 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d108      	bne.n	800a322 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	7afa      	ldrb	r2, [r7, #11]
 800a31a:	4611      	mov	r1, r2
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	4798      	blx	r3
 800a320:	e001      	b.n	800a326 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a322:	2302      	movs	r3, #2
 800a324:	e000      	b.n	800a328 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a338:	2340      	movs	r3, #64	; 0x40
 800a33a:	2200      	movs	r2, #0
 800a33c:	2100      	movs	r1, #0
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f001 fa06 	bl	800b750 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2240      	movs	r2, #64	; 0x40
 800a350:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	2200      	movs	r2, #0
 800a358:	2180      	movs	r1, #128	; 0x80
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f001 f9f8 	bl	800b750 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2240      	movs	r2, #64	; 0x40
 800a36a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a390:	2b00      	cmp	r3, #0
 800a392:	d009      	beq.n	800a3a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	6852      	ldr	r2, [r2, #4]
 800a3a0:	b2d2      	uxtb	r2, r2
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	4798      	blx	r3
  }

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc80      	pop	{r7}
 800a3ce:	4770      	bx	lr

0800a3d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bc80      	pop	{r7}
 800a3f6:	4770      	bx	lr

0800a3f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a406:	2b04      	cmp	r3, #4
 800a408:	d105      	bne.n	800a416 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr

0800a422 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a430:	2b03      	cmp	r3, #3
 800a432:	d10b      	bne.n	800a44c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a46e:	2b20      	cmp	r3, #32
 800a470:	d004      	beq.n	800a47c <USBD_StdDevReq+0x24>
 800a472:	2b40      	cmp	r3, #64	; 0x40
 800a474:	d002      	beq.n	800a47c <USBD_StdDevReq+0x24>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <USBD_StdDevReq+0x34>
 800a47a:	e04c      	b.n	800a516 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	4798      	blx	r3
      break;
 800a48a:	e049      	b.n	800a520 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	2b09      	cmp	r3, #9
 800a492:	d83a      	bhi.n	800a50a <USBD_StdDevReq+0xb2>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <USBD_StdDevReq+0x44>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4ed 	.word	0x0800a4ed
 800a4a0:	0800a501 	.word	0x0800a501
 800a4a4:	0800a50b 	.word	0x0800a50b
 800a4a8:	0800a4f7 	.word	0x0800a4f7
 800a4ac:	0800a50b 	.word	0x0800a50b
 800a4b0:	0800a4cf 	.word	0x0800a4cf
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a50b 	.word	0x0800a50b
 800a4bc:	0800a4e3 	.word	0x0800a4e3
 800a4c0:	0800a4d9 	.word	0x0800a4d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9d4 	bl	800a874 <USBD_GetDescriptor>
          break;
 800a4cc:	e022      	b.n	800a514 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fb37 	bl	800ab44 <USBD_SetAddress>
          break;
 800a4d6:	e01d      	b.n	800a514 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb74 	bl	800abc8 <USBD_SetConfig>
          break;
 800a4e0:	e018      	b.n	800a514 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fbfd 	bl	800ace4 <USBD_GetConfig>
          break;
 800a4ea:	e013      	b.n	800a514 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fc2c 	bl	800ad4c <USBD_GetStatus>
          break;
 800a4f4:	e00e      	b.n	800a514 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fc5a 	bl	800adb2 <USBD_SetFeature>
          break;
 800a4fe:	e009      	b.n	800a514 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fc69 	bl	800adda <USBD_ClrFeature>
          break;
 800a508:	e004      	b.n	800a514 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fcc1 	bl	800ae94 <USBD_CtlError>
          break;
 800a512:	bf00      	nop
      }
      break;
 800a514:	e004      	b.n	800a520 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fcbb 	bl	800ae94 <USBD_CtlError>
      break;
 800a51e:	bf00      	nop
  }

  return ret;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop

0800a52c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a542:	2b20      	cmp	r3, #32
 800a544:	d003      	beq.n	800a54e <USBD_StdItfReq+0x22>
 800a546:	2b40      	cmp	r3, #64	; 0x40
 800a548:	d001      	beq.n	800a54e <USBD_StdItfReq+0x22>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d12a      	bne.n	800a5a4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a554:	3b01      	subs	r3, #1
 800a556:	2b02      	cmp	r3, #2
 800a558:	d81d      	bhi.n	800a596 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	889b      	ldrh	r3, [r3, #4]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	d813      	bhi.n	800a58c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	88db      	ldrh	r3, [r3, #6]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d110      	bne.n	800a5a0 <USBD_StdItfReq+0x74>
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10d      	bne.n	800a5a0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fd4d 	bl	800b024 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a58a:	e009      	b.n	800a5a0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fc80 	bl	800ae94 <USBD_CtlError>
          break;
 800a594:	e004      	b.n	800a5a0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fc7b 	bl	800ae94 <USBD_CtlError>
          break;
 800a59e:	e000      	b.n	800a5a2 <USBD_StdItfReq+0x76>
          break;
 800a5a0:	bf00      	nop
      }
      break;
 800a5a2:	e004      	b.n	800a5ae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fc74 	bl	800ae94 <USBD_CtlError>
      break;
 800a5ac:	bf00      	nop
  }

  return USBD_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	889b      	ldrh	r3, [r3, #4]
 800a5ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5d4:	2b20      	cmp	r3, #32
 800a5d6:	d004      	beq.n	800a5e2 <USBD_StdEPReq+0x2a>
 800a5d8:	2b40      	cmp	r3, #64	; 0x40
 800a5da:	d002      	beq.n	800a5e2 <USBD_StdEPReq+0x2a>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <USBD_StdEPReq+0x3a>
 800a5e0:	e13d      	b.n	800a85e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
      break;
 800a5f0:	e13a      	b.n	800a868 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fa:	2b20      	cmp	r3, #32
 800a5fc:	d10a      	bne.n	800a614 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	4798      	blx	r3
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	e12a      	b.n	800a86a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d03e      	beq.n	800a69a <USBD_StdEPReq+0xe2>
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d002      	beq.n	800a626 <USBD_StdEPReq+0x6e>
 800a620:	2b00      	cmp	r3, #0
 800a622:	d070      	beq.n	800a706 <USBD_StdEPReq+0x14e>
 800a624:	e115      	b.n	800a852 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d002      	beq.n	800a636 <USBD_StdEPReq+0x7e>
 800a630:	2b03      	cmp	r3, #3
 800a632:	d015      	beq.n	800a660 <USBD_StdEPReq+0xa8>
 800a634:	e02b      	b.n	800a68e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00c      	beq.n	800a656 <USBD_StdEPReq+0x9e>
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	2b80      	cmp	r3, #128	; 0x80
 800a640:	d009      	beq.n	800a656 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a642:	7bbb      	ldrb	r3, [r7, #14]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 f8c7 	bl	800b7da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a64c:	2180      	movs	r1, #128	; 0x80
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 f8c3 	bl	800b7da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a654:	e020      	b.n	800a698 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fc1b 	bl	800ae94 <USBD_CtlError>
              break;
 800a65e:	e01b      	b.n	800a698 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	885b      	ldrh	r3, [r3, #2]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10e      	bne.n	800a686 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <USBD_StdEPReq+0xce>
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b80      	cmp	r3, #128	; 0x80
 800a672:	d008      	beq.n	800a686 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	88db      	ldrh	r3, [r3, #6]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d104      	bne.n	800a686 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f8aa 	bl	800b7da <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fccc 	bl	800b024 <USBD_CtlSendStatus>

              break;
 800a68c:	e004      	b.n	800a698 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fbff 	bl	800ae94 <USBD_CtlError>
              break;
 800a696:	bf00      	nop
          }
          break;
 800a698:	e0e0      	b.n	800a85c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d002      	beq.n	800a6aa <USBD_StdEPReq+0xf2>
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d015      	beq.n	800a6d4 <USBD_StdEPReq+0x11c>
 800a6a8:	e026      	b.n	800a6f8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00c      	beq.n	800a6ca <USBD_StdEPReq+0x112>
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b80      	cmp	r3, #128	; 0x80
 800a6b4:	d009      	beq.n	800a6ca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f001 f88d 	bl	800b7da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6c0:	2180      	movs	r1, #128	; 0x80
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 f889 	bl	800b7da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6c8:	e01c      	b.n	800a704 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fbe1 	bl	800ae94 <USBD_CtlError>
              break;
 800a6d2:	e017      	b.n	800a704 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d112      	bne.n	800a702 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f001 f894 	bl	800b818 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fc97 	bl	800b024 <USBD_CtlSendStatus>
              }
              break;
 800a6f6:	e004      	b.n	800a702 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fbca 	bl	800ae94 <USBD_CtlError>
              break;
 800a700:	e000      	b.n	800a704 <USBD_StdEPReq+0x14c>
              break;
 800a702:	bf00      	nop
          }
          break;
 800a704:	e0aa      	b.n	800a85c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d002      	beq.n	800a716 <USBD_StdEPReq+0x15e>
 800a710:	2b03      	cmp	r3, #3
 800a712:	d032      	beq.n	800a77a <USBD_StdEPReq+0x1c2>
 800a714:	e097      	b.n	800a846 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <USBD_StdEPReq+0x174>
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	2b80      	cmp	r3, #128	; 0x80
 800a720:	d004      	beq.n	800a72c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fbb5 	bl	800ae94 <USBD_CtlError>
                break;
 800a72a:	e091      	b.n	800a850 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a72c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a730:	2b00      	cmp	r3, #0
 800a732:	da0b      	bge.n	800a74c <USBD_StdEPReq+0x194>
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	3310      	adds	r3, #16
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	4413      	add	r3, r2
 800a748:	3304      	adds	r3, #4
 800a74a:	e00b      	b.n	800a764 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	3304      	adds	r3, #4
 800a764:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2202      	movs	r2, #2
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fbf8 	bl	800af68 <USBD_CtlSendData>
              break;
 800a778:	e06a      	b.n	800a850 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a77a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	da11      	bge.n	800a7a6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	f003 020f 	and.w	r2, r3, #15
 800a788:	6879      	ldr	r1, [r7, #4]
 800a78a:	4613      	mov	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	440b      	add	r3, r1
 800a794:	3318      	adds	r3, #24
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d117      	bne.n	800a7cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fb78 	bl	800ae94 <USBD_CtlError>
                  break;
 800a7a4:	e054      	b.n	800a850 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7a6:	7bbb      	ldrb	r3, [r7, #14]
 800a7a8:	f003 020f 	and.w	r2, r3, #15
 800a7ac:	6879      	ldr	r1, [r7, #4]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	440b      	add	r3, r1
 800a7b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d104      	bne.n	800a7cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fb65 	bl	800ae94 <USBD_CtlError>
                  break;
 800a7ca:	e041      	b.n	800a850 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	da0b      	bge.n	800a7ec <USBD_StdEPReq+0x234>
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	e00b      	b.n	800a804 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4413      	add	r3, r2
 800a802:	3304      	adds	r3, #4
 800a804:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <USBD_StdEPReq+0x25a>
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b80      	cmp	r3, #128	; 0x80
 800a810:	d103      	bne.n	800a81a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e00e      	b.n	800a838 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f819 	bl	800b856 <USBD_LL_IsStallEP>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	e002      	b.n	800a838 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2202      	movs	r2, #2
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fb92 	bl	800af68 <USBD_CtlSendData>
              break;
 800a844:	e004      	b.n	800a850 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fb23 	bl	800ae94 <USBD_CtlError>
              break;
 800a84e:	bf00      	nop
          }
          break;
 800a850:	e004      	b.n	800a85c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fb1d 	bl	800ae94 <USBD_CtlError>
          break;
 800a85a:	bf00      	nop
      }
      break;
 800a85c:	e004      	b.n	800a868 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fb17 	bl	800ae94 <USBD_CtlError>
      break;
 800a866:	bf00      	nop
  }

  return ret;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	885b      	ldrh	r3, [r3, #2]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	b29b      	uxth	r3, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	2b06      	cmp	r3, #6
 800a896:	f200 8128 	bhi.w	800aaea <USBD_GetDescriptor+0x276>
 800a89a:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <USBD_GetDescriptor+0x2c>)
 800a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a0:	0800a8bd 	.word	0x0800a8bd
 800a8a4:	0800a8d5 	.word	0x0800a8d5
 800a8a8:	0800a915 	.word	0x0800a915
 800a8ac:	0800aaeb 	.word	0x0800aaeb
 800a8b0:	0800aaeb 	.word	0x0800aaeb
 800a8b4:	0800aa8b 	.word	0x0800aa8b
 800a8b8:	0800aab7 	.word	0x0800aab7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	7c12      	ldrb	r2, [r2, #16]
 800a8c8:	f107 0108 	add.w	r1, r7, #8
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4798      	blx	r3
 800a8d0:	60f8      	str	r0, [r7, #12]
      break;
 800a8d2:	e112      	b.n	800aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7c1b      	ldrb	r3, [r3, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10d      	bne.n	800a8f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e4:	f107 0208 	add.w	r2, r7, #8
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4798      	blx	r3
 800a8ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8f6:	e100      	b.n	800aafa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	f107 0208 	add.w	r2, r7, #8
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3301      	adds	r3, #1
 800a90e:	2202      	movs	r2, #2
 800a910:	701a      	strb	r2, [r3, #0]
      break;
 800a912:	e0f2      	b.n	800aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	885b      	ldrh	r3, [r3, #2]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	f200 80ac 	bhi.w	800aa78 <USBD_GetDescriptor+0x204>
 800a920:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <USBD_GetDescriptor+0xb4>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a975 	.word	0x0800a975
 800a930:	0800a9a9 	.word	0x0800a9a9
 800a934:	0800a9dd 	.word	0x0800a9dd
 800a938:	0800aa11 	.word	0x0800aa11
 800a93c:	0800aa45 	.word	0x0800aa45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	7c12      	ldrb	r2, [r2, #16]
 800a958:	f107 0108 	add.w	r1, r7, #8
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
 800a960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a962:	e091      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fa94 	bl	800ae94 <USBD_CtlError>
            err++;
 800a96c:	7afb      	ldrb	r3, [r7, #11]
 800a96e:	3301      	adds	r3, #1
 800a970:	72fb      	strb	r3, [r7, #11]
          break;
 800a972:	e089      	b.n	800aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	7c12      	ldrb	r2, [r2, #16]
 800a98c:	f107 0108 	add.w	r1, r7, #8
 800a990:	4610      	mov	r0, r2
 800a992:	4798      	blx	r3
 800a994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a996:	e077      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fa7a 	bl	800ae94 <USBD_CtlError>
            err++;
 800a9a0:	7afb      	ldrb	r3, [r7, #11]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9a6:	e06f      	b.n	800aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	7c12      	ldrb	r2, [r2, #16]
 800a9c0:	f107 0108 	add.w	r1, r7, #8
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4798      	blx	r3
 800a9c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ca:	e05d      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fa60 	bl	800ae94 <USBD_CtlError>
            err++;
 800a9d4:	7afb      	ldrb	r3, [r7, #11]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9da:	e055      	b.n	800aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00b      	beq.n	800aa00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	7c12      	ldrb	r2, [r2, #16]
 800a9f4:	f107 0108 	add.w	r1, r7, #8
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
 800a9fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9fe:	e043      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa46 	bl	800ae94 <USBD_CtlError>
            err++;
 800aa08:	7afb      	ldrb	r3, [r7, #11]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa0e:	e03b      	b.n	800aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	7c12      	ldrb	r2, [r2, #16]
 800aa28:	f107 0108 	add.w	r1, r7, #8
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4798      	blx	r3
 800aa30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa32:	e029      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fa2c 	bl	800ae94 <USBD_CtlError>
            err++;
 800aa3c:	7afb      	ldrb	r3, [r7, #11]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	72fb      	strb	r3, [r7, #11]
          break;
 800aa42:	e021      	b.n	800aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	7c12      	ldrb	r2, [r2, #16]
 800aa5c:	f107 0108 	add.w	r1, r7, #8
 800aa60:	4610      	mov	r0, r2
 800aa62:	4798      	blx	r3
 800aa64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa66:	e00f      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fa12 	bl	800ae94 <USBD_CtlError>
            err++;
 800aa70:	7afb      	ldrb	r3, [r7, #11]
 800aa72:	3301      	adds	r3, #1
 800aa74:	72fb      	strb	r3, [r7, #11]
          break;
 800aa76:	e007      	b.n	800aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa0a 	bl	800ae94 <USBD_CtlError>
          err++;
 800aa80:	7afb      	ldrb	r3, [r7, #11]
 800aa82:	3301      	adds	r3, #1
 800aa84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aa86:	e038      	b.n	800aafa <USBD_GetDescriptor+0x286>
 800aa88:	e037      	b.n	800aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	7c1b      	ldrb	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	f107 0208 	add.w	r2, r7, #8
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4798      	blx	r3
 800aaa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaa4:	e029      	b.n	800aafa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9f3 	bl	800ae94 <USBD_CtlError>
        err++;
 800aaae:	7afb      	ldrb	r3, [r7, #11]
 800aab0:	3301      	adds	r3, #1
 800aab2:	72fb      	strb	r3, [r7, #11]
      break;
 800aab4:	e021      	b.n	800aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	7c1b      	ldrb	r3, [r3, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10d      	bne.n	800aada <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac6:	f107 0208 	add.w	r2, r7, #8
 800aaca:	4610      	mov	r0, r2
 800aacc:	4798      	blx	r3
 800aace:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3301      	adds	r3, #1
 800aad4:	2207      	movs	r2, #7
 800aad6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aad8:	e00f      	b.n	800aafa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f9d9 	bl	800ae94 <USBD_CtlError>
        err++;
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	3301      	adds	r3, #1
 800aae6:	72fb      	strb	r3, [r7, #11]
      break;
 800aae8:	e007      	b.n	800aafa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9d1 	bl	800ae94 <USBD_CtlError>
      err++;
 800aaf2:	7afb      	ldrb	r3, [r7, #11]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	72fb      	strb	r3, [r7, #11]
      break;
 800aaf8:	bf00      	nop
  }

  if (err != 0U)
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11c      	bne.n	800ab3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab00:	893b      	ldrh	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d011      	beq.n	800ab2a <USBD_GetDescriptor+0x2b6>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	88db      	ldrh	r3, [r3, #6]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00d      	beq.n	800ab2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	88da      	ldrh	r2, [r3, #6]
 800ab12:	893b      	ldrh	r3, [r7, #8]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	bf28      	it	cs
 800ab18:	4613      	movcs	r3, r2
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab1e:	893b      	ldrh	r3, [r7, #8]
 800ab20:	461a      	mov	r2, r3
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fa1f 	bl	800af68 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	88db      	ldrh	r3, [r3, #6]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa76 	bl	800b024 <USBD_CtlSendStatus>
 800ab38:	e000      	b.n	800ab3c <USBD_GetDescriptor+0x2c8>
    return;
 800ab3a:	bf00      	nop
    }
  }
}
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop

0800ab44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	889b      	ldrh	r3, [r3, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d130      	bne.n	800abb8 <USBD_SetAddress+0x74>
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	88db      	ldrh	r3, [r3, #6]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d12c      	bne.n	800abb8 <USBD_SetAddress+0x74>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	885b      	ldrh	r3, [r3, #2]
 800ab62:	2b7f      	cmp	r3, #127	; 0x7f
 800ab64:	d828      	bhi.n	800abb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	885b      	ldrh	r3, [r3, #2]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d104      	bne.n	800ab86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f988 	bl	800ae94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab84:	e01c      	b.n	800abc0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7bfa      	ldrb	r2, [r7, #15]
 800ab8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fe8b 	bl	800b8ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fa43 	bl	800b024 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d004      	beq.n	800abae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abac:	e008      	b.n	800abc0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb6:	e003      	b.n	800abc0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f96a 	bl	800ae94 <USBD_CtlError>
  }
}
 800abc0:	bf00      	nop
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	885b      	ldrh	r3, [r3, #2]
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	4b41      	ldr	r3, [pc, #260]	; (800ace0 <USBD_SetConfig+0x118>)
 800abda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abdc:	4b40      	ldr	r3, [pc, #256]	; (800ace0 <USBD_SetConfig+0x118>)
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d904      	bls.n	800abee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f954 	bl	800ae94 <USBD_CtlError>
 800abec:	e075      	b.n	800acda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d002      	beq.n	800abfe <USBD_SetConfig+0x36>
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d023      	beq.n	800ac44 <USBD_SetConfig+0x7c>
 800abfc:	e062      	b.n	800acc4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800abfe:	4b38      	ldr	r3, [pc, #224]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d01a      	beq.n	800ac3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac06:	4b36      	ldr	r3, [pc, #216]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2203      	movs	r2, #3
 800ac14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac18:	4b31      	ldr	r3, [pc, #196]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff f9f3 	bl	800a00a <USBD_SetClassConfig>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d104      	bne.n	800ac34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f931 	bl	800ae94 <USBD_CtlError>
            return;
 800ac32:	e052      	b.n	800acda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f9f5 	bl	800b024 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac3a:	e04e      	b.n	800acda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f9f1 	bl	800b024 <USBD_CtlSendStatus>
        break;
 800ac42:	e04a      	b.n	800acda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ac44:	4b26      	ldr	r3, [pc, #152]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d112      	bne.n	800ac72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ac54:	4b22      	ldr	r3, [pc, #136]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ac5e:	4b20      	ldr	r3, [pc, #128]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff f9ef 	bl	800a048 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f9da 	bl	800b024 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac70:	e033      	b.n	800acda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ac72:	4b1b      	ldr	r3, [pc, #108]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d01d      	beq.n	800acbc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff f9dd 	bl	800a048 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ac8e:	4b14      	ldr	r3, [pc, #80]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac98:	4b11      	ldr	r3, [pc, #68]	; (800ace0 <USBD_SetConfig+0x118>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff f9b3 	bl	800a00a <USBD_SetClassConfig>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d104      	bne.n	800acb4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f8f1 	bl	800ae94 <USBD_CtlError>
            return;
 800acb2:	e012      	b.n	800acda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f9b5 	bl	800b024 <USBD_CtlSendStatus>
        break;
 800acba:	e00e      	b.n	800acda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9b1 	bl	800b024 <USBD_CtlSendStatus>
        break;
 800acc2:	e00a      	b.n	800acda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f8e4 	bl	800ae94 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800accc:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <USBD_SetConfig+0x118>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff f9b8 	bl	800a048 <USBD_ClrClassConfig>
        break;
 800acd8:	bf00      	nop
    }
  }
}
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	2000037c 	.word	0x2000037c

0800ace4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	88db      	ldrh	r3, [r3, #6]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d004      	beq.n	800ad00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f8cb 	bl	800ae94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800acfe:	e021      	b.n	800ad44 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	db17      	blt.n	800ad3a <USBD_GetConfig+0x56>
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	dd02      	ble.n	800ad14 <USBD_GetConfig+0x30>
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d00b      	beq.n	800ad2a <USBD_GetConfig+0x46>
 800ad12:	e012      	b.n	800ad3a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f920 	bl	800af68 <USBD_CtlSendData>
        break;
 800ad28:	e00c      	b.n	800ad44 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	2201      	movs	r2, #1
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f918 	bl	800af68 <USBD_CtlSendData>
        break;
 800ad38:	e004      	b.n	800ad44 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f8a9 	bl	800ae94 <USBD_CtlError>
        break;
 800ad42:	bf00      	nop
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d81e      	bhi.n	800ada0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	88db      	ldrh	r3, [r3, #6]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d004      	beq.n	800ad74 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f891 	bl	800ae94 <USBD_CtlError>
        break;
 800ad72:	e01a      	b.n	800adaa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d005      	beq.n	800ad90 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f043 0202 	orr.w	r2, r3, #2
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	330c      	adds	r3, #12
 800ad94:	2202      	movs	r2, #2
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f8e5 	bl	800af68 <USBD_CtlSendData>
      break;
 800ad9e:	e004      	b.n	800adaa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f876 	bl	800ae94 <USBD_CtlError>
      break;
 800ada8:	bf00      	nop
  }
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	885b      	ldrh	r3, [r3, #2]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d106      	bne.n	800add2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f929 	bl	800b024 <USBD_CtlSendStatus>
  }
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adea:	3b01      	subs	r3, #1
 800adec:	2b02      	cmp	r3, #2
 800adee:	d80b      	bhi.n	800ae08 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	885b      	ldrh	r3, [r3, #2]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d10c      	bne.n	800ae12 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f90f 	bl	800b024 <USBD_CtlSendStatus>
      }
      break;
 800ae06:	e004      	b.n	800ae12 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f842 	bl	800ae94 <USBD_CtlError>
      break;
 800ae10:	e000      	b.n	800ae14 <USBD_ClrFeature+0x3a>
      break;
 800ae12:	bf00      	nop
  }
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	785a      	ldrb	r2, [r3, #1]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	3302      	adds	r3, #2
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	3303      	adds	r3, #3
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	4413      	add	r3, r2
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	3304      	adds	r3, #4
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	3305      	adds	r3, #5
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	4413      	add	r3, r2
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	3306      	adds	r3, #6
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	3307      	adds	r3, #7
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	4413      	add	r3, r2
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	80da      	strh	r2, [r3, #6]

}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bc80      	pop	{r7}
 800ae92:	4770      	bx	lr

0800ae94 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ae9e:	2180      	movs	r1, #128	; 0x80
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fc9a 	bl	800b7da <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aea6:	2100      	movs	r1, #0
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fc96 	bl	800b7da <USBD_LL_StallEP>
}
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b086      	sub	sp, #24
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d032      	beq.n	800af32 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f834 	bl	800af3a <USBD_GetLen>
 800aed2:	4603      	mov	r3, r0
 800aed4:	3301      	adds	r3, #1
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	75fa      	strb	r2, [r7, #23]
 800aee6:	461a      	mov	r2, r3
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4413      	add	r3, r2
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	7812      	ldrb	r2, [r2, #0]
 800aef0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	75fa      	strb	r2, [r7, #23]
 800aef8:	461a      	mov	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4413      	add	r3, r2
 800aefe:	2203      	movs	r2, #3
 800af00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af02:	e012      	b.n	800af2a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	60fa      	str	r2, [r7, #12]
 800af0a:	7dfa      	ldrb	r2, [r7, #23]
 800af0c:	1c51      	adds	r1, r2, #1
 800af0e:	75f9      	strb	r1, [r7, #23]
 800af10:	4611      	mov	r1, r2
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	440a      	add	r2, r1
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	1c5a      	adds	r2, r3, #1
 800af1e:	75fa      	strb	r2, [r7, #23]
 800af20:	461a      	mov	r2, r3
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4413      	add	r3, r2
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e8      	bne.n	800af04 <USBD_GetString+0x4e>
    }
  }
}
 800af32:	bf00      	nop
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800af46:	e005      	b.n	800af54 <USBD_GetLen+0x1a>
  {
    len++;
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	3301      	adds	r3, #1
 800af4c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3301      	adds	r3, #1
 800af52:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1f5      	bne.n	800af48 <USBD_GetLen+0xe>
  }

  return len;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr

0800af68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2202      	movs	r2, #2
 800af7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af7e:	88fa      	ldrh	r2, [r7, #6]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800af84:	88fa      	ldrh	r2, [r7, #6]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af8a:	88fb      	ldrh	r3, [r7, #6]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	2100      	movs	r1, #0
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 fcab 	bl	800b8ec <USBD_LL_Transmit>

  return USBD_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	4613      	mov	r3, r2
 800afac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afae:	88fb      	ldrh	r3, [r7, #6]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	2100      	movs	r1, #0
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 fc99 	bl	800b8ec <USBD_LL_Transmit>

  return USBD_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2203      	movs	r2, #3
 800afd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afda:	88fa      	ldrh	r2, [r7, #6]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800afe2:	88fa      	ldrh	r2, [r7, #6]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afea:	88fb      	ldrh	r3, [r7, #6]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	2100      	movs	r1, #0
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 fc9e 	bl	800b932 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	2100      	movs	r1, #0
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 fc8c 	bl	800b932 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2204      	movs	r2, #4
 800b030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b034:	2300      	movs	r3, #0
 800b036:	2200      	movs	r2, #0
 800b038:	2100      	movs	r1, #0
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fc56 	bl	800b8ec <USBD_LL_Transmit>

  return USBD_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2205      	movs	r2, #5
 800b056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b05a:	2300      	movs	r3, #0
 800b05c:	2200      	movs	r2, #0
 800b05e:	2100      	movs	r1, #0
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fc66 	bl	800b932 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b074:	2200      	movs	r2, #0
 800b076:	4912      	ldr	r1, [pc, #72]	; (800b0c0 <MX_USB_DEVICE_Init+0x50>)
 800b078:	4812      	ldr	r0, [pc, #72]	; (800b0c4 <MX_USB_DEVICE_Init+0x54>)
 800b07a:	f7fe ff56 	bl	8009f2a <USBD_Init>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b084:	f7f7 fca2 	bl	80029cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b088:	490f      	ldr	r1, [pc, #60]	; (800b0c8 <MX_USB_DEVICE_Init+0x58>)
 800b08a:	480e      	ldr	r0, [pc, #56]	; (800b0c4 <MX_USB_DEVICE_Init+0x54>)
 800b08c:	f7fe ff78 	bl	8009f80 <USBD_RegisterClass>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b096:	f7f7 fc99 	bl	80029cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b09a:	490c      	ldr	r1, [pc, #48]	; (800b0cc <MX_USB_DEVICE_Init+0x5c>)
 800b09c:	4809      	ldr	r0, [pc, #36]	; (800b0c4 <MX_USB_DEVICE_Init+0x54>)
 800b09e:	f7fe fea9 	bl	8009df4 <USBD_CDC_RegisterInterface>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b0a8:	f7f7 fc90 	bl	80029cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0ac:	4805      	ldr	r0, [pc, #20]	; (800b0c4 <MX_USB_DEVICE_Init+0x54>)
 800b0ae:	f7fe ff80 	bl	8009fb2 <USBD_Start>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b0b8:	f7f7 fc88 	bl	80029cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b0bc:	bf00      	nop
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000134 	.word	0x20000134
 800b0c4:	200005a8 	.word	0x200005a8
 800b0c8:	20000020 	.word	0x20000020
 800b0cc:	20000124 	.word	0x20000124

0800b0d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	4907      	ldr	r1, [pc, #28]	; (800b0f4 <CDC_Init_FS+0x24>)
 800b0d8:	4807      	ldr	r0, [pc, #28]	; (800b0f8 <CDC_Init_FS+0x28>)
 800b0da:	f7fe fea1 	bl	8009e20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0de:	4907      	ldr	r1, [pc, #28]	; (800b0fc <CDC_Init_FS+0x2c>)
 800b0e0:	4805      	ldr	r0, [pc, #20]	; (800b0f8 <CDC_Init_FS+0x28>)
 800b0e2:	f7fe feb6 	bl	8009e52 <USBD_CDC_SetRxBuffer>
  sleep_enable = 0;
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <CDC_Init_FS+0x30>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b0ec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20000eb0 	.word	0x20000eb0
 800b0f8:	200005a8 	.word	0x200005a8
 800b0fc:	20000ac8 	.word	0x20000ac8
 800b100:	20000000 	.word	0x20000000

0800b104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b104:	b480      	push	{r7}
 800b106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr
	...

0800b114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	71fb      	strb	r3, [r7, #7]
 800b120:	4613      	mov	r3, r2
 800b122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	2b23      	cmp	r3, #35	; 0x23
 800b128:	d856      	bhi.n	800b1d8 <CDC_Control_FS+0xc4>
 800b12a:	a201      	add	r2, pc, #4	; (adr r2, 800b130 <CDC_Control_FS+0x1c>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b1d9 	.word	0x0800b1d9
 800b134:	0800b1d9 	.word	0x0800b1d9
 800b138:	0800b1d9 	.word	0x0800b1d9
 800b13c:	0800b1d9 	.word	0x0800b1d9
 800b140:	0800b1d9 	.word	0x0800b1d9
 800b144:	0800b1d9 	.word	0x0800b1d9
 800b148:	0800b1d9 	.word	0x0800b1d9
 800b14c:	0800b1d9 	.word	0x0800b1d9
 800b150:	0800b1d9 	.word	0x0800b1d9
 800b154:	0800b1d9 	.word	0x0800b1d9
 800b158:	0800b1d9 	.word	0x0800b1d9
 800b15c:	0800b1d9 	.word	0x0800b1d9
 800b160:	0800b1d9 	.word	0x0800b1d9
 800b164:	0800b1d9 	.word	0x0800b1d9
 800b168:	0800b1d9 	.word	0x0800b1d9
 800b16c:	0800b1d9 	.word	0x0800b1d9
 800b170:	0800b1d9 	.word	0x0800b1d9
 800b174:	0800b1d9 	.word	0x0800b1d9
 800b178:	0800b1d9 	.word	0x0800b1d9
 800b17c:	0800b1d9 	.word	0x0800b1d9
 800b180:	0800b1d9 	.word	0x0800b1d9
 800b184:	0800b1d9 	.word	0x0800b1d9
 800b188:	0800b1d9 	.word	0x0800b1d9
 800b18c:	0800b1d9 	.word	0x0800b1d9
 800b190:	0800b1d9 	.word	0x0800b1d9
 800b194:	0800b1d9 	.word	0x0800b1d9
 800b198:	0800b1d9 	.word	0x0800b1d9
 800b19c:	0800b1d9 	.word	0x0800b1d9
 800b1a0:	0800b1d9 	.word	0x0800b1d9
 800b1a4:	0800b1d9 	.word	0x0800b1d9
 800b1a8:	0800b1d9 	.word	0x0800b1d9
 800b1ac:	0800b1d9 	.word	0x0800b1d9
 800b1b0:	0800b1d9 	.word	0x0800b1d9
 800b1b4:	0800b1d9 	.word	0x0800b1d9
 800b1b8:	0800b1c1 	.word	0x0800b1c1
 800b1bc:	0800b1d9 	.word	0x0800b1d9

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    {
        USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]

        if(req->wValue & 0x0001 != 0)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	885b      	ldrh	r3, [r3, #2]
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d005      	beq.n	800b1dc <CDC_Control_FS+0xc8>
        {
            // DTR is set...
//        	char* msg = "Connected: \r\n";
//        	CDC_Transmit_FS(msg, strlen(msg));
        	usb_cdc_open = 1;
 800b1d0:	4b06      	ldr	r3, [pc, #24]	; (800b1ec <CDC_Control_FS+0xd8>)
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
        }
    }
    break;
 800b1d6:	e001      	b.n	800b1dc <CDC_Control_FS+0xc8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1d8:	bf00      	nop
 800b1da:	e000      	b.n	800b1de <CDC_Control_FS+0xca>
    break;
 800b1dc:	bf00      	nop
  }

  return (USBD_OK);
 800b1de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bc80      	pop	{r7}
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	20000001 	.word	0x20000001

0800b1f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	480f      	ldr	r0, [pc, #60]	; (800b23c <CDC_Receive_FS+0x4c>)
 800b1fe:	f7fe fe28 	bl	8009e52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b202:	480e      	ldr	r0, [pc, #56]	; (800b23c <CDC_Receive_FS+0x4c>)
 800b204:	f7fe fe67 	bl	8009ed6 <USBD_CDC_ReceivePacket>

  memset(usb_buffer, '\0', 64);  // clear the buffer
 800b208:	2240      	movs	r2, #64	; 0x40
 800b20a:	2100      	movs	r1, #0
 800b20c:	480c      	ldr	r0, [pc, #48]	; (800b240 <CDC_Receive_FS+0x50>)
 800b20e:	f000 fc48 	bl	800baa2 <memset>
  uint16_t len = *Len;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	81fb      	strh	r3, [r7, #14]
  memcpy(usb_buffer, Buf, len);  // copy the data to the buffer
 800b218:	89fb      	ldrh	r3, [r7, #14]
 800b21a:	461a      	mov	r2, r3
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4808      	ldr	r0, [pc, #32]	; (800b240 <CDC_Receive_FS+0x50>)
 800b220:	f000 fc34 	bl	800ba8c <memcpy>
//  CDC_Transmit_FS(Buf, len);
  memset(Buf, '\0', len);   // clear the Buf also
 800b224:	89fb      	ldrh	r3, [r7, #14]
 800b226:	461a      	mov	r2, r3
 800b228:	2100      	movs	r1, #0
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fc39 	bl	800baa2 <memset>

  return (USBD_OK);
 800b230:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	200005a8 	.word	0x200005a8
 800b240:	200008c4 	.word	0x200008c4

0800b244 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b254:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <CDC_Transmit_FS+0x48>)
 800b256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b266:	2301      	movs	r3, #1
 800b268:	e00b      	b.n	800b282 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b26a:	887b      	ldrh	r3, [r7, #2]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6879      	ldr	r1, [r7, #4]
 800b270:	4806      	ldr	r0, [pc, #24]	; (800b28c <CDC_Transmit_FS+0x48>)
 800b272:	f7fe fdd5 	bl	8009e20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b276:	4805      	ldr	r0, [pc, #20]	; (800b28c <CDC_Transmit_FS+0x48>)
 800b278:	f7fe fdfe 	bl	8009e78 <USBD_CDC_TransmitPacket>
 800b27c:	4603      	mov	r3, r0
 800b27e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	200005a8 	.word	0x200005a8

0800b290 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	2212      	movs	r2, #18
 800b2a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2a2:	4b03      	ldr	r3, [pc, #12]	; (800b2b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bc80      	pop	{r7}
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20000150 	.word	0x20000150

0800b2b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	6039      	str	r1, [r7, #0]
 800b2be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2204      	movs	r2, #4
 800b2c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2c6:	4b03      	ldr	r3, [pc, #12]	; (800b2d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	20000164 	.word	0x20000164

0800b2d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	4907      	ldr	r1, [pc, #28]	; (800b30c <USBD_FS_ProductStrDescriptor+0x34>)
 800b2ee:	4808      	ldr	r0, [pc, #32]	; (800b310 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2f0:	f7ff fde1 	bl	800aeb6 <USBD_GetString>
 800b2f4:	e004      	b.n	800b300 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	4904      	ldr	r1, [pc, #16]	; (800b30c <USBD_FS_ProductStrDescriptor+0x34>)
 800b2fa:	4805      	ldr	r0, [pc, #20]	; (800b310 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2fc:	f7ff fddb 	bl	800aeb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b300:	4b02      	ldr	r3, [pc, #8]	; (800b30c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20001298 	.word	0x20001298
 800b310:	0800e5b8 	.word	0x0800e5b8

0800b314 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	6039      	str	r1, [r7, #0]
 800b31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	4904      	ldr	r1, [pc, #16]	; (800b334 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b324:	4804      	ldr	r0, [pc, #16]	; (800b338 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b326:	f7ff fdc6 	bl	800aeb6 <USBD_GetString>
  return USBD_StrDesc;
 800b32a:	4b02      	ldr	r3, [pc, #8]	; (800b334 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20001298 	.word	0x20001298
 800b338:	0800e5c4 	.word	0x0800e5c4

0800b33c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	6039      	str	r1, [r7, #0]
 800b346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	221a      	movs	r2, #26
 800b34c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b34e:	f000 f843 	bl	800b3d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b352:	4b02      	ldr	r3, [pc, #8]	; (800b35c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b354:	4618      	mov	r0, r3
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20000168 	.word	0x20000168

0800b360 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	4603      	mov	r3, r0
 800b368:	6039      	str	r1, [r7, #0]
 800b36a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d105      	bne.n	800b37e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4907      	ldr	r1, [pc, #28]	; (800b394 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b376:	4808      	ldr	r0, [pc, #32]	; (800b398 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b378:	f7ff fd9d 	bl	800aeb6 <USBD_GetString>
 800b37c:	e004      	b.n	800b388 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4904      	ldr	r1, [pc, #16]	; (800b394 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b382:	4805      	ldr	r0, [pc, #20]	; (800b398 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b384:	f7ff fd97 	bl	800aeb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b388:	4b02      	ldr	r3, [pc, #8]	; (800b394 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20001298 	.word	0x20001298
 800b398:	0800e5d8 	.word	0x0800e5d8

0800b39c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	6039      	str	r1, [r7, #0]
 800b3a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3a8:	79fb      	ldrb	r3, [r7, #7]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d105      	bne.n	800b3ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	4907      	ldr	r1, [pc, #28]	; (800b3d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3b2:	4808      	ldr	r0, [pc, #32]	; (800b3d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3b4:	f7ff fd7f 	bl	800aeb6 <USBD_GetString>
 800b3b8:	e004      	b.n	800b3c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	4904      	ldr	r1, [pc, #16]	; (800b3d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3be:	4805      	ldr	r0, [pc, #20]	; (800b3d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3c0:	f7ff fd79 	bl	800aeb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3c4:	4b02      	ldr	r3, [pc, #8]	; (800b3d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20001298 	.word	0x20001298
 800b3d4:	0800e5e4 	.word	0x0800e5e4

0800b3d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3de:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <Get_SerialNum+0x44>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	; (800b420 <Get_SerialNum+0x48>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3ea:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <Get_SerialNum+0x4c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3fe:	2208      	movs	r2, #8
 800b400:	4909      	ldr	r1, [pc, #36]	; (800b428 <Get_SerialNum+0x50>)
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 f814 	bl	800b430 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b408:	2204      	movs	r2, #4
 800b40a:	4908      	ldr	r1, [pc, #32]	; (800b42c <Get_SerialNum+0x54>)
 800b40c:	68b8      	ldr	r0, [r7, #8]
 800b40e:	f000 f80f 	bl	800b430 <IntToUnicode>
  }
}
 800b412:	bf00      	nop
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	1ffff7e8 	.word	0x1ffff7e8
 800b420:	1ffff7ec 	.word	0x1ffff7ec
 800b424:	1ffff7f0 	.word	0x1ffff7f0
 800b428:	2000016a 	.word	0x2000016a
 800b42c:	2000017a 	.word	0x2000017a

0800b430 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4613      	mov	r3, r2
 800b43c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b442:	2300      	movs	r3, #0
 800b444:	75fb      	strb	r3, [r7, #23]
 800b446:	e027      	b.n	800b498 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	0f1b      	lsrs	r3, r3, #28
 800b44c:	2b09      	cmp	r3, #9
 800b44e:	d80b      	bhi.n	800b468 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	0f1b      	lsrs	r3, r3, #28
 800b454:	b2da      	uxtb	r2, r3
 800b456:	7dfb      	ldrb	r3, [r7, #23]
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	4619      	mov	r1, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	440b      	add	r3, r1
 800b460:	3230      	adds	r2, #48	; 0x30
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	e00a      	b.n	800b47e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	0f1b      	lsrs	r3, r3, #28
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	7dfb      	ldrb	r3, [r7, #23]
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	4619      	mov	r1, r3
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	440b      	add	r3, r1
 800b478:	3237      	adds	r2, #55	; 0x37
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	011b      	lsls	r3, r3, #4
 800b482:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	3301      	adds	r3, #1
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	4413      	add	r3, r2
 800b48e:	2200      	movs	r2, #0
 800b490:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b492:	7dfb      	ldrb	r3, [r7, #23]
 800b494:	3301      	adds	r3, #1
 800b496:	75fb      	strb	r3, [r7, #23]
 800b498:	7dfa      	ldrb	r2, [r7, #23]
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d3d3      	bcc.n	800b448 <IntToUnicode+0x18>
  }
}
 800b4a0:	bf00      	nop
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc80      	pop	{r7}
 800b4a8:	4770      	bx	lr
	...

0800b4ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a0d      	ldr	r2, [pc, #52]	; (800b4f0 <HAL_PCD_MspInit+0x44>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d113      	bne.n	800b4e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b4be:	4b0d      	ldr	r3, [pc, #52]	; (800b4f4 <HAL_PCD_MspInit+0x48>)
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	4a0c      	ldr	r2, [pc, #48]	; (800b4f4 <HAL_PCD_MspInit+0x48>)
 800b4c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4c8:	61d3      	str	r3, [r2, #28]
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <HAL_PCD_MspInit+0x48>)
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2100      	movs	r1, #0
 800b4da:	2014      	movs	r0, #20
 800b4dc:	f7f7 fd89 	bl	8002ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b4e0:	2014      	movs	r0, #20
 800b4e2:	f7f7 fda2 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4e6:	bf00      	nop
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	40005c00 	.word	0x40005c00
 800b4f4:	40021000 	.word	0x40021000

0800b4f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	f7fe fdad 	bl	800a06e <USBD_LL_SetupStage>
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b52e:	78fa      	ldrb	r2, [r7, #3]
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	00db      	lsls	r3, r3, #3
 800b53a:	440b      	add	r3, r1
 800b53c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	4619      	mov	r1, r3
 800b546:	f7fe fddd 	bl	800a104 <USBD_LL_DataOutStage>
}
 800b54a:	bf00      	nop
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b082      	sub	sp, #8
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b564:	78fa      	ldrb	r2, [r7, #3]
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	440b      	add	r3, r1
 800b572:	333c      	adds	r3, #60	; 0x3c
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	78fb      	ldrb	r3, [r7, #3]
 800b578:	4619      	mov	r1, r3
 800b57a:	f7fe fe34 	bl	800a1e6 <USBD_LL_DataInStage>
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe ff44 	bl	800a422 <USBD_LL_SOF>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d001      	beq.n	800b5ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5b6:	f7f7 fa09 	bl	80029cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5c0:	7bfa      	ldrb	r2, [r7, #15]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fef4 	bl	800a3b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fead 	bl	800a330 <USBD_LL_Reset>
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe feee 	bl	800a3d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d005      	beq.n	800b608 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5fc:	4b04      	ldr	r3, [pc, #16]	; (800b610 <HAL_PCD_SuspendCallback+0x30>)
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	4a03      	ldr	r2, [pc, #12]	; (800b610 <HAL_PCD_SuspendCallback+0x30>)
 800b602:	f043 0306 	orr.w	r3, r3, #6
 800b606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	e000ed00 	.word	0xe000ed00

0800b614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fee8 	bl	800a3f8 <USBD_LL_Resume>
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b638:	4a28      	ldr	r2, [pc, #160]	; (800b6dc <USBD_LL_Init+0xac>)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a26      	ldr	r2, [pc, #152]	; (800b6dc <USBD_LL_Init+0xac>)
 800b644:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b648:	4b24      	ldr	r3, [pc, #144]	; (800b6dc <USBD_LL_Init+0xac>)
 800b64a:	4a25      	ldr	r2, [pc, #148]	; (800b6e0 <USBD_LL_Init+0xb0>)
 800b64c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b64e:	4b23      	ldr	r3, [pc, #140]	; (800b6dc <USBD_LL_Init+0xac>)
 800b650:	2208      	movs	r2, #8
 800b652:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b654:	4b21      	ldr	r3, [pc, #132]	; (800b6dc <USBD_LL_Init+0xac>)
 800b656:	2202      	movs	r2, #2
 800b658:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b65a:	4b20      	ldr	r3, [pc, #128]	; (800b6dc <USBD_LL_Init+0xac>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b660:	4b1e      	ldr	r3, [pc, #120]	; (800b6dc <USBD_LL_Init+0xac>)
 800b662:	2200      	movs	r2, #0
 800b664:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b666:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <USBD_LL_Init+0xac>)
 800b668:	2200      	movs	r2, #0
 800b66a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b66c:	481b      	ldr	r0, [pc, #108]	; (800b6dc <USBD_LL_Init+0xac>)
 800b66e:	f7f9 f857 	bl	8004720 <HAL_PCD_Init>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b678:	f7f7 f9a8 	bl	80029cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b682:	2318      	movs	r3, #24
 800b684:	2200      	movs	r2, #0
 800b686:	2100      	movs	r1, #0
 800b688:	f7fa fbb1 	bl	8005dee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b692:	2358      	movs	r3, #88	; 0x58
 800b694:	2200      	movs	r2, #0
 800b696:	2180      	movs	r1, #128	; 0x80
 800b698:	f7fa fba9 	bl	8005dee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6a2:	23c0      	movs	r3, #192	; 0xc0
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2181      	movs	r1, #129	; 0x81
 800b6a8:	f7fa fba1 	bl	8005dee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	f7fa fb98 	bl	8005dee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2182      	movs	r1, #130	; 0x82
 800b6cc:	f7fa fb8f 	bl	8005dee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20001498 	.word	0x20001498
 800b6e0:	40005c00 	.word	0x40005c00

0800b6e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7f9 f91b 	bl	8004936 <HAL_PCD_Start>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	4618      	mov	r0, r3
 800b708:	f000 f96a 	bl	800b9e0 <USBD_Get_USB_Status>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b710:	7bbb      	ldrb	r3, [r7, #14]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b730:	4618      	mov	r0, r3
 800b732:	f7f9 f926 	bl	8004982 <HAL_PCD_Stop>
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 f94f 	bl	800b9e0 <USBD_Get_USB_Status>
 800b742:	4603      	mov	r3, r0
 800b744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b746:	7bbb      	ldrb	r3, [r7, #14]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	4608      	mov	r0, r1
 800b75a:	4611      	mov	r1, r2
 800b75c:	461a      	mov	r2, r3
 800b75e:	4603      	mov	r3, r0
 800b760:	70fb      	strb	r3, [r7, #3]
 800b762:	460b      	mov	r3, r1
 800b764:	70bb      	strb	r3, [r7, #2]
 800b766:	4613      	mov	r3, r2
 800b768:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b778:	78bb      	ldrb	r3, [r7, #2]
 800b77a:	883a      	ldrh	r2, [r7, #0]
 800b77c:	78f9      	ldrb	r1, [r7, #3]
 800b77e:	f7f9 faa0 	bl	8004cc2 <HAL_PCD_EP_Open>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 f929 	bl	800b9e0 <USBD_Get_USB_Status>
 800b78e:	4603      	mov	r3, r0
 800b790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b792:	7bbb      	ldrb	r3, [r7, #14]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7b6:	78fa      	ldrb	r2, [r7, #3]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f9 fae7 	bl	8004d8e <HAL_PCD_EP_Close>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 f90a 	bl	800b9e0 <USBD_Get_USB_Status>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f4:	78fa      	ldrb	r2, [r7, #3]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7f9 fba7 	bl	8004f4c <HAL_PCD_EP_SetStall>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f8eb 	bl	800b9e0 <USBD_Get_USB_Status>
 800b80a:	4603      	mov	r3, r0
 800b80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b824:	2300      	movs	r3, #0
 800b826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b832:	78fa      	ldrb	r2, [r7, #3]
 800b834:	4611      	mov	r1, r2
 800b836:	4618      	mov	r0, r3
 800b838:	f7f9 fbe8 	bl	800500c <HAL_PCD_EP_ClrStall>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	4618      	mov	r0, r3
 800b844:	f000 f8cc 	bl	800b9e0 <USBD_Get_USB_Status>
 800b848:	4603      	mov	r3, r0
 800b84a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b856:	b480      	push	{r7}
 800b858:	b085      	sub	sp, #20
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	460b      	mov	r3, r1
 800b860:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b868:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b86a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	da0c      	bge.n	800b88c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b872:	78fb      	ldrb	r3, [r7, #3]
 800b874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b878:	68f9      	ldr	r1, [r7, #12]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	440b      	add	r3, r1
 800b886:	3302      	adds	r3, #2
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	e00b      	b.n	800b8a4 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	440b      	add	r3, r1
 800b89e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b8a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bc80      	pop	{r7}
 800b8ac:	4770      	bx	lr

0800b8ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8c8:	78fa      	ldrb	r2, [r7, #3]
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7f9 f9d3 	bl	8004c78 <HAL_PCD_SetAddress>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f881 	bl	800b9e0 <USBD_Get_USB_Status>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	607a      	str	r2, [r7, #4]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	72fb      	strb	r3, [r7, #11]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b90e:	893b      	ldrh	r3, [r7, #8]
 800b910:	7af9      	ldrb	r1, [r7, #11]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	f7f9 fad7 	bl	8004ec6 <HAL_PCD_EP_Transmit>
 800b918:	4603      	mov	r3, r0
 800b91a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f85e 	bl	800b9e0 <USBD_Get_USB_Status>
 800b924:	4603      	mov	r3, r0
 800b926:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b928:	7dbb      	ldrb	r3, [r7, #22]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	461a      	mov	r2, r3
 800b93e:	460b      	mov	r3, r1
 800b940:	72fb      	strb	r3, [r7, #11]
 800b942:	4613      	mov	r3, r2
 800b944:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b954:	893b      	ldrh	r3, [r7, #8]
 800b956:	7af9      	ldrb	r1, [r7, #11]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	f7f9 fa60 	bl	8004e1e <HAL_PCD_EP_Receive>
 800b95e:	4603      	mov	r3, r0
 800b960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	4618      	mov	r0, r3
 800b966:	f000 f83b 	bl	800b9e0 <USBD_Get_USB_Status>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b96e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f9 fa82 	bl	8004e98 <HAL_PCD_EP_GetRxCount>
 800b994:	4603      	mov	r3, r0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9a8:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <USBD_static_malloc+0x14>)
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bc80      	pop	{r7}
 800b9b2:	4770      	bx	lr
 800b9b4:	20000380 	.word	0x20000380

0800b9b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]

}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bc80      	pop	{r7}
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b9d6:	bf00      	nop
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bc80      	pop	{r7}
 800b9de:	4770      	bx	lr

0800b9e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d817      	bhi.n	800ba24 <USBD_Get_USB_Status+0x44>
 800b9f4:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <USBD_Get_USB_Status+0x1c>)
 800b9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fa:	bf00      	nop
 800b9fc:	0800ba0d 	.word	0x0800ba0d
 800ba00:	0800ba13 	.word	0x0800ba13
 800ba04:	0800ba19 	.word	0x0800ba19
 800ba08:	0800ba1f 	.word	0x0800ba1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba10:	e00b      	b.n	800ba2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba12:	2302      	movs	r3, #2
 800ba14:	73fb      	strb	r3, [r7, #15]
    break;
 800ba16:	e008      	b.n	800ba2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1c:	e005      	b.n	800ba2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	73fb      	strb	r3, [r7, #15]
    break;
 800ba22:	e002      	b.n	800ba2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba24:	2302      	movs	r3, #2
 800ba26:	73fb      	strb	r3, [r7, #15]
    break;
 800ba28:	bf00      	nop
  }
  return usb_status;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bc80      	pop	{r7}
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop

0800ba38 <__errno>:
 800ba38:	4b01      	ldr	r3, [pc, #4]	; (800ba40 <__errno+0x8>)
 800ba3a:	6818      	ldr	r0, [r3, #0]
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	20000184 	.word	0x20000184

0800ba44 <__libc_init_array>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	2500      	movs	r5, #0
 800ba48:	4e0c      	ldr	r6, [pc, #48]	; (800ba7c <__libc_init_array+0x38>)
 800ba4a:	4c0d      	ldr	r4, [pc, #52]	; (800ba80 <__libc_init_array+0x3c>)
 800ba4c:	1ba4      	subs	r4, r4, r6
 800ba4e:	10a4      	asrs	r4, r4, #2
 800ba50:	42a5      	cmp	r5, r4
 800ba52:	d109      	bne.n	800ba68 <__libc_init_array+0x24>
 800ba54:	f002 fd20 	bl	800e498 <_init>
 800ba58:	2500      	movs	r5, #0
 800ba5a:	4e0a      	ldr	r6, [pc, #40]	; (800ba84 <__libc_init_array+0x40>)
 800ba5c:	4c0a      	ldr	r4, [pc, #40]	; (800ba88 <__libc_init_array+0x44>)
 800ba5e:	1ba4      	subs	r4, r4, r6
 800ba60:	10a4      	asrs	r4, r4, #2
 800ba62:	42a5      	cmp	r5, r4
 800ba64:	d105      	bne.n	800ba72 <__libc_init_array+0x2e>
 800ba66:	bd70      	pop	{r4, r5, r6, pc}
 800ba68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba6c:	4798      	blx	r3
 800ba6e:	3501      	adds	r5, #1
 800ba70:	e7ee      	b.n	800ba50 <__libc_init_array+0xc>
 800ba72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba76:	4798      	blx	r3
 800ba78:	3501      	adds	r5, #1
 800ba7a:	e7f2      	b.n	800ba62 <__libc_init_array+0x1e>
 800ba7c:	0800e8f4 	.word	0x0800e8f4
 800ba80:	0800e8f4 	.word	0x0800e8f4
 800ba84:	0800e8f4 	.word	0x0800e8f4
 800ba88:	0800e8f8 	.word	0x0800e8f8

0800ba8c <memcpy>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	1e43      	subs	r3, r0, #1
 800ba90:	440a      	add	r2, r1
 800ba92:	4291      	cmp	r1, r2
 800ba94:	d100      	bne.n	800ba98 <memcpy+0xc>
 800ba96:	bd10      	pop	{r4, pc}
 800ba98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baa0:	e7f7      	b.n	800ba92 <memcpy+0x6>

0800baa2 <memset>:
 800baa2:	4603      	mov	r3, r0
 800baa4:	4402      	add	r2, r0
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d100      	bne.n	800baac <memset+0xa>
 800baaa:	4770      	bx	lr
 800baac:	f803 1b01 	strb.w	r1, [r3], #1
 800bab0:	e7f9      	b.n	800baa6 <memset+0x4>

0800bab2 <__cvt>:
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	461e      	mov	r6, r3
 800baba:	bfbb      	ittet	lt
 800babc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bac0:	461e      	movlt	r6, r3
 800bac2:	2300      	movge	r3, #0
 800bac4:	232d      	movlt	r3, #45	; 0x2d
 800bac6:	b088      	sub	sp, #32
 800bac8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800baca:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800bace:	f027 0720 	bic.w	r7, r7, #32
 800bad2:	2f46      	cmp	r7, #70	; 0x46
 800bad4:	4614      	mov	r4, r2
 800bad6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bad8:	700b      	strb	r3, [r1, #0]
 800bada:	d004      	beq.n	800bae6 <__cvt+0x34>
 800badc:	2f45      	cmp	r7, #69	; 0x45
 800bade:	d100      	bne.n	800bae2 <__cvt+0x30>
 800bae0:	3501      	adds	r5, #1
 800bae2:	2302      	movs	r3, #2
 800bae4:	e000      	b.n	800bae8 <__cvt+0x36>
 800bae6:	2303      	movs	r3, #3
 800bae8:	aa07      	add	r2, sp, #28
 800baea:	9204      	str	r2, [sp, #16]
 800baec:	aa06      	add	r2, sp, #24
 800baee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800baf2:	e9cd 3500 	strd	r3, r5, [sp]
 800baf6:	4622      	mov	r2, r4
 800baf8:	4633      	mov	r3, r6
 800bafa:	f000 fd05 	bl	800c508 <_dtoa_r>
 800bafe:	2f47      	cmp	r7, #71	; 0x47
 800bb00:	4680      	mov	r8, r0
 800bb02:	d102      	bne.n	800bb0a <__cvt+0x58>
 800bb04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb06:	07db      	lsls	r3, r3, #31
 800bb08:	d526      	bpl.n	800bb58 <__cvt+0xa6>
 800bb0a:	2f46      	cmp	r7, #70	; 0x46
 800bb0c:	eb08 0905 	add.w	r9, r8, r5
 800bb10:	d111      	bne.n	800bb36 <__cvt+0x84>
 800bb12:	f898 3000 	ldrb.w	r3, [r8]
 800bb16:	2b30      	cmp	r3, #48	; 0x30
 800bb18:	d10a      	bne.n	800bb30 <__cvt+0x7e>
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4631      	mov	r1, r6
 800bb22:	f7f4 ff41 	bl	80009a8 <__aeabi_dcmpeq>
 800bb26:	b918      	cbnz	r0, 800bb30 <__cvt+0x7e>
 800bb28:	f1c5 0501 	rsb	r5, r5, #1
 800bb2c:	f8ca 5000 	str.w	r5, [sl]
 800bb30:	f8da 3000 	ldr.w	r3, [sl]
 800bb34:	4499      	add	r9, r3
 800bb36:	2200      	movs	r2, #0
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	f7f4 ff33 	bl	80009a8 <__aeabi_dcmpeq>
 800bb42:	b938      	cbnz	r0, 800bb54 <__cvt+0xa2>
 800bb44:	2230      	movs	r2, #48	; 0x30
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	454b      	cmp	r3, r9
 800bb4a:	d205      	bcs.n	800bb58 <__cvt+0xa6>
 800bb4c:	1c59      	adds	r1, r3, #1
 800bb4e:	9107      	str	r1, [sp, #28]
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e7f8      	b.n	800bb46 <__cvt+0x94>
 800bb54:	f8cd 901c 	str.w	r9, [sp, #28]
 800bb58:	4640      	mov	r0, r8
 800bb5a:	9b07      	ldr	r3, [sp, #28]
 800bb5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb5e:	eba3 0308 	sub.w	r3, r3, r8
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	b008      	add	sp, #32
 800bb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bb6a <__exponent>:
 800bb6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb6c:	2900      	cmp	r1, #0
 800bb6e:	bfb4      	ite	lt
 800bb70:	232d      	movlt	r3, #45	; 0x2d
 800bb72:	232b      	movge	r3, #43	; 0x2b
 800bb74:	4604      	mov	r4, r0
 800bb76:	bfb8      	it	lt
 800bb78:	4249      	neglt	r1, r1
 800bb7a:	2909      	cmp	r1, #9
 800bb7c:	f804 2b02 	strb.w	r2, [r4], #2
 800bb80:	7043      	strb	r3, [r0, #1]
 800bb82:	dd21      	ble.n	800bbc8 <__exponent+0x5e>
 800bb84:	f10d 0307 	add.w	r3, sp, #7
 800bb88:	461f      	mov	r7, r3
 800bb8a:	260a      	movs	r6, #10
 800bb8c:	fb91 f5f6 	sdiv	r5, r1, r6
 800bb90:	fb06 1115 	mls	r1, r6, r5, r1
 800bb94:	2d09      	cmp	r5, #9
 800bb96:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800bb9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb9e:	f103 32ff 	add.w	r2, r3, #4294967295
 800bba2:	4629      	mov	r1, r5
 800bba4:	dc09      	bgt.n	800bbba <__exponent+0x50>
 800bba6:	3130      	adds	r1, #48	; 0x30
 800bba8:	3b02      	subs	r3, #2
 800bbaa:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bbae:	42bb      	cmp	r3, r7
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	d304      	bcc.n	800bbbe <__exponent+0x54>
 800bbb4:	1a10      	subs	r0, r2, r0
 800bbb6:	b003      	add	sp, #12
 800bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbba:	4613      	mov	r3, r2
 800bbbc:	e7e6      	b.n	800bb8c <__exponent+0x22>
 800bbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbc2:	f804 2b01 	strb.w	r2, [r4], #1
 800bbc6:	e7f2      	b.n	800bbae <__exponent+0x44>
 800bbc8:	2330      	movs	r3, #48	; 0x30
 800bbca:	4419      	add	r1, r3
 800bbcc:	7083      	strb	r3, [r0, #2]
 800bbce:	1d02      	adds	r2, r0, #4
 800bbd0:	70c1      	strb	r1, [r0, #3]
 800bbd2:	e7ef      	b.n	800bbb4 <__exponent+0x4a>

0800bbd4 <_printf_float>:
 800bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd8:	b091      	sub	sp, #68	; 0x44
 800bbda:	460c      	mov	r4, r1
 800bbdc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800bbde:	4693      	mov	fp, r2
 800bbe0:	461e      	mov	r6, r3
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	f001 fa44 	bl	800d070 <_localeconv_r>
 800bbe8:	6803      	ldr	r3, [r0, #0]
 800bbea:	4618      	mov	r0, r3
 800bbec:	9309      	str	r3, [sp, #36]	; 0x24
 800bbee:	f7f4 faaf 	bl	8000150 <strlen>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	930e      	str	r3, [sp, #56]	; 0x38
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	900a      	str	r0, [sp, #40]	; 0x28
 800bbfa:	3307      	adds	r3, #7
 800bbfc:	f023 0307 	bic.w	r3, r3, #7
 800bc00:	f103 0208 	add.w	r2, r3, #8
 800bc04:	f894 8018 	ldrb.w	r8, [r4, #24]
 800bc08:	f8d4 a000 	ldr.w	sl, [r4]
 800bc0c:	603a      	str	r2, [r7, #0]
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc16:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800bc1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	4ba6      	ldr	r3, [pc, #664]	; (800bec0 <_printf_float+0x2ec>)
 800bc26:	4638      	mov	r0, r7
 800bc28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc2a:	f7f4 feef 	bl	8000a0c <__aeabi_dcmpun>
 800bc2e:	bb68      	cbnz	r0, 800bc8c <_printf_float+0xb8>
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	4ba2      	ldr	r3, [pc, #648]	; (800bec0 <_printf_float+0x2ec>)
 800bc36:	4638      	mov	r0, r7
 800bc38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc3a:	f7f4 fec9 	bl	80009d0 <__aeabi_dcmple>
 800bc3e:	bb28      	cbnz	r0, 800bc8c <_printf_float+0xb8>
 800bc40:	2200      	movs	r2, #0
 800bc42:	2300      	movs	r3, #0
 800bc44:	4638      	mov	r0, r7
 800bc46:	4649      	mov	r1, r9
 800bc48:	f7f4 feb8 	bl	80009bc <__aeabi_dcmplt>
 800bc4c:	b110      	cbz	r0, 800bc54 <_printf_float+0x80>
 800bc4e:	232d      	movs	r3, #45	; 0x2d
 800bc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc54:	4f9b      	ldr	r7, [pc, #620]	; (800bec4 <_printf_float+0x2f0>)
 800bc56:	4b9c      	ldr	r3, [pc, #624]	; (800bec8 <_printf_float+0x2f4>)
 800bc58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc5c:	bf98      	it	ls
 800bc5e:	461f      	movls	r7, r3
 800bc60:	2303      	movs	r3, #3
 800bc62:	f04f 0900 	mov.w	r9, #0
 800bc66:	6123      	str	r3, [r4, #16]
 800bc68:	f02a 0304 	bic.w	r3, sl, #4
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	9600      	str	r6, [sp, #0]
 800bc70:	465b      	mov	r3, fp
 800bc72:	aa0f      	add	r2, sp, #60	; 0x3c
 800bc74:	4621      	mov	r1, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f9e2 	bl	800c040 <_printf_common>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	f040 8090 	bne.w	800bda2 <_printf_float+0x1ce>
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	b011      	add	sp, #68	; 0x44
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	463a      	mov	r2, r7
 800bc8e:	464b      	mov	r3, r9
 800bc90:	4638      	mov	r0, r7
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 feba 	bl	8000a0c <__aeabi_dcmpun>
 800bc98:	b110      	cbz	r0, 800bca0 <_printf_float+0xcc>
 800bc9a:	4f8c      	ldr	r7, [pc, #560]	; (800becc <_printf_float+0x2f8>)
 800bc9c:	4b8c      	ldr	r3, [pc, #560]	; (800bed0 <_printf_float+0x2fc>)
 800bc9e:	e7db      	b.n	800bc58 <_printf_float+0x84>
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800bca6:	1c59      	adds	r1, r3, #1
 800bca8:	a80d      	add	r0, sp, #52	; 0x34
 800bcaa:	a90e      	add	r1, sp, #56	; 0x38
 800bcac:	d140      	bne.n	800bd30 <_printf_float+0x15c>
 800bcae:	2306      	movs	r3, #6
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	f04f 0c00 	mov.w	ip, #0
 800bcb6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800bcba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800bcbe:	6863      	ldr	r3, [r4, #4]
 800bcc0:	6022      	str	r2, [r4, #0]
 800bcc2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	463a      	mov	r2, r7
 800bcca:	464b      	mov	r3, r9
 800bccc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f7ff feee 	bl	800bab2 <__cvt>
 800bcd6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800bcda:	2b47      	cmp	r3, #71	; 0x47
 800bcdc:	4607      	mov	r7, r0
 800bcde:	d109      	bne.n	800bcf4 <_printf_float+0x120>
 800bce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bce2:	1cd8      	adds	r0, r3, #3
 800bce4:	db02      	blt.n	800bcec <_printf_float+0x118>
 800bce6:	6862      	ldr	r2, [r4, #4]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	dd47      	ble.n	800bd7c <_printf_float+0x1a8>
 800bcec:	f1a8 0802 	sub.w	r8, r8, #2
 800bcf0:	fa5f f888 	uxtb.w	r8, r8
 800bcf4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800bcf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcfa:	d824      	bhi.n	800bd46 <_printf_float+0x172>
 800bcfc:	3901      	subs	r1, #1
 800bcfe:	4642      	mov	r2, r8
 800bd00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd04:	910d      	str	r1, [sp, #52]	; 0x34
 800bd06:	f7ff ff30 	bl	800bb6a <__exponent>
 800bd0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd0c:	4681      	mov	r9, r0
 800bd0e:	1813      	adds	r3, r2, r0
 800bd10:	2a01      	cmp	r2, #1
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	dc02      	bgt.n	800bd1c <_printf_float+0x148>
 800bd16:	6822      	ldr	r2, [r4, #0]
 800bd18:	07d1      	lsls	r1, r2, #31
 800bd1a:	d501      	bpl.n	800bd20 <_printf_float+0x14c>
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d0a2      	beq.n	800bc6e <_printf_float+0x9a>
 800bd28:	232d      	movs	r3, #45	; 0x2d
 800bd2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd2e:	e79e      	b.n	800bc6e <_printf_float+0x9a>
 800bd30:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800bd34:	f000 816e 	beq.w	800c014 <_printf_float+0x440>
 800bd38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd3c:	d1b9      	bne.n	800bcb2 <_printf_float+0xde>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1b7      	bne.n	800bcb2 <_printf_float+0xde>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7b4      	b.n	800bcb0 <_printf_float+0xdc>
 800bd46:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800bd4a:	d119      	bne.n	800bd80 <_printf_float+0x1ac>
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	6863      	ldr	r3, [r4, #4]
 800bd50:	dd0c      	ble.n	800bd6c <_printf_float+0x198>
 800bd52:	6121      	str	r1, [r4, #16]
 800bd54:	b913      	cbnz	r3, 800bd5c <_printf_float+0x188>
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	07d2      	lsls	r2, r2, #31
 800bd5a:	d502      	bpl.n	800bd62 <_printf_float+0x18e>
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	440b      	add	r3, r1
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd64:	f04f 0900 	mov.w	r9, #0
 800bd68:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd6a:	e7d9      	b.n	800bd20 <_printf_float+0x14c>
 800bd6c:	b913      	cbnz	r3, 800bd74 <_printf_float+0x1a0>
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	07d0      	lsls	r0, r2, #31
 800bd72:	d501      	bpl.n	800bd78 <_printf_float+0x1a4>
 800bd74:	3302      	adds	r3, #2
 800bd76:	e7f3      	b.n	800bd60 <_printf_float+0x18c>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f1      	b.n	800bd60 <_printf_float+0x18c>
 800bd7c:	f04f 0867 	mov.w	r8, #103	; 0x67
 800bd80:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bd84:	4293      	cmp	r3, r2
 800bd86:	db05      	blt.n	800bd94 <_printf_float+0x1c0>
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	6123      	str	r3, [r4, #16]
 800bd8c:	07d1      	lsls	r1, r2, #31
 800bd8e:	d5e8      	bpl.n	800bd62 <_printf_float+0x18e>
 800bd90:	3301      	adds	r3, #1
 800bd92:	e7e5      	b.n	800bd60 <_printf_float+0x18c>
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bfcc      	ite	gt
 800bd98:	2301      	movgt	r3, #1
 800bd9a:	f1c3 0302 	rsble	r3, r3, #2
 800bd9e:	4413      	add	r3, r2
 800bda0:	e7de      	b.n	800bd60 <_printf_float+0x18c>
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	055a      	lsls	r2, r3, #21
 800bda6:	d407      	bmi.n	800bdb8 <_printf_float+0x1e4>
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	463a      	mov	r2, r7
 800bdac:	4659      	mov	r1, fp
 800bdae:	4628      	mov	r0, r5
 800bdb0:	47b0      	blx	r6
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	d129      	bne.n	800be0a <_printf_float+0x236>
 800bdb6:	e764      	b.n	800bc82 <_printf_float+0xae>
 800bdb8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800bdbc:	f240 80d7 	bls.w	800bf6e <_printf_float+0x39a>
 800bdc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f7f4 fdee 	bl	80009a8 <__aeabi_dcmpeq>
 800bdcc:	b388      	cbz	r0, 800be32 <_printf_float+0x25e>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	4a40      	ldr	r2, [pc, #256]	; (800bed4 <_printf_float+0x300>)
 800bdd2:	4659      	mov	r1, fp
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	47b0      	blx	r6
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f43f af52 	beq.w	800bc82 <_printf_float+0xae>
 800bdde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bde2:	429a      	cmp	r2, r3
 800bde4:	db02      	blt.n	800bdec <_printf_float+0x218>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	07d8      	lsls	r0, r3, #31
 800bdea:	d50e      	bpl.n	800be0a <_printf_float+0x236>
 800bdec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b0      	blx	r6
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	f43f af43 	beq.w	800bc82 <_printf_float+0xae>
 800bdfc:	2700      	movs	r7, #0
 800bdfe:	f104 081a 	add.w	r8, r4, #26
 800be02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be04:	3b01      	subs	r3, #1
 800be06:	42bb      	cmp	r3, r7
 800be08:	dc09      	bgt.n	800be1e <_printf_float+0x24a>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	079f      	lsls	r7, r3, #30
 800be0e:	f100 80fd 	bmi.w	800c00c <_printf_float+0x438>
 800be12:	68e0      	ldr	r0, [r4, #12]
 800be14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be16:	4298      	cmp	r0, r3
 800be18:	bfb8      	it	lt
 800be1a:	4618      	movlt	r0, r3
 800be1c:	e733      	b.n	800bc86 <_printf_float+0xb2>
 800be1e:	2301      	movs	r3, #1
 800be20:	4642      	mov	r2, r8
 800be22:	4659      	mov	r1, fp
 800be24:	4628      	mov	r0, r5
 800be26:	47b0      	blx	r6
 800be28:	3001      	adds	r0, #1
 800be2a:	f43f af2a 	beq.w	800bc82 <_printf_float+0xae>
 800be2e:	3701      	adds	r7, #1
 800be30:	e7e7      	b.n	800be02 <_printf_float+0x22e>
 800be32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be34:	2b00      	cmp	r3, #0
 800be36:	dc2b      	bgt.n	800be90 <_printf_float+0x2bc>
 800be38:	2301      	movs	r3, #1
 800be3a:	4a26      	ldr	r2, [pc, #152]	; (800bed4 <_printf_float+0x300>)
 800be3c:	4659      	mov	r1, fp
 800be3e:	4628      	mov	r0, r5
 800be40:	47b0      	blx	r6
 800be42:	3001      	adds	r0, #1
 800be44:	f43f af1d 	beq.w	800bc82 <_printf_float+0xae>
 800be48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be4a:	b923      	cbnz	r3, 800be56 <_printf_float+0x282>
 800be4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be4e:	b913      	cbnz	r3, 800be56 <_printf_float+0x282>
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	07d9      	lsls	r1, r3, #31
 800be54:	d5d9      	bpl.n	800be0a <_printf_float+0x236>
 800be56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be5a:	4659      	mov	r1, fp
 800be5c:	4628      	mov	r0, r5
 800be5e:	47b0      	blx	r6
 800be60:	3001      	adds	r0, #1
 800be62:	f43f af0e 	beq.w	800bc82 <_printf_float+0xae>
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	f104 091a 	add.w	r9, r4, #26
 800be6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be70:	425b      	negs	r3, r3
 800be72:	4543      	cmp	r3, r8
 800be74:	dc01      	bgt.n	800be7a <_printf_float+0x2a6>
 800be76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be78:	e797      	b.n	800bdaa <_printf_float+0x1d6>
 800be7a:	2301      	movs	r3, #1
 800be7c:	464a      	mov	r2, r9
 800be7e:	4659      	mov	r1, fp
 800be80:	4628      	mov	r0, r5
 800be82:	47b0      	blx	r6
 800be84:	3001      	adds	r0, #1
 800be86:	f43f aefc 	beq.w	800bc82 <_printf_float+0xae>
 800be8a:	f108 0801 	add.w	r8, r8, #1
 800be8e:	e7ee      	b.n	800be6e <_printf_float+0x29a>
 800be90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be94:	429a      	cmp	r2, r3
 800be96:	bfa8      	it	ge
 800be98:	461a      	movge	r2, r3
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	4690      	mov	r8, r2
 800be9e:	dd07      	ble.n	800beb0 <_printf_float+0x2dc>
 800bea0:	4613      	mov	r3, r2
 800bea2:	4659      	mov	r1, fp
 800bea4:	463a      	mov	r2, r7
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b0      	blx	r6
 800beaa:	3001      	adds	r0, #1
 800beac:	f43f aee9 	beq.w	800bc82 <_printf_float+0xae>
 800beb0:	f104 031a 	add.w	r3, r4, #26
 800beb4:	f04f 0a00 	mov.w	sl, #0
 800beb8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800bebc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bebe:	e015      	b.n	800beec <_printf_float+0x318>
 800bec0:	7fefffff 	.word	0x7fefffff
 800bec4:	0800e61c 	.word	0x0800e61c
 800bec8:	0800e618 	.word	0x0800e618
 800becc:	0800e624 	.word	0x0800e624
 800bed0:	0800e620 	.word	0x0800e620
 800bed4:	0800e77b 	.word	0x0800e77b
 800bed8:	2301      	movs	r3, #1
 800beda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bedc:	4659      	mov	r1, fp
 800bede:	4628      	mov	r0, r5
 800bee0:	47b0      	blx	r6
 800bee2:	3001      	adds	r0, #1
 800bee4:	f43f aecd 	beq.w	800bc82 <_printf_float+0xae>
 800bee8:	f10a 0a01 	add.w	sl, sl, #1
 800beec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800bef0:	eba9 0308 	sub.w	r3, r9, r8
 800bef4:	4553      	cmp	r3, sl
 800bef6:	dcef      	bgt.n	800bed8 <_printf_float+0x304>
 800bef8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800befc:	429a      	cmp	r2, r3
 800befe:	444f      	add	r7, r9
 800bf00:	db14      	blt.n	800bf2c <_printf_float+0x358>
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	07da      	lsls	r2, r3, #31
 800bf06:	d411      	bmi.n	800bf2c <_printf_float+0x358>
 800bf08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bf0c:	eba3 0209 	sub.w	r2, r3, r9
 800bf10:	eba3 0901 	sub.w	r9, r3, r1
 800bf14:	4591      	cmp	r9, r2
 800bf16:	bfa8      	it	ge
 800bf18:	4691      	movge	r9, r2
 800bf1a:	f1b9 0f00 	cmp.w	r9, #0
 800bf1e:	dc0d      	bgt.n	800bf3c <_printf_float+0x368>
 800bf20:	2700      	movs	r7, #0
 800bf22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf26:	f104 081a 	add.w	r8, r4, #26
 800bf2a:	e018      	b.n	800bf5e <_printf_float+0x38a>
 800bf2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf30:	4659      	mov	r1, fp
 800bf32:	4628      	mov	r0, r5
 800bf34:	47b0      	blx	r6
 800bf36:	3001      	adds	r0, #1
 800bf38:	d1e6      	bne.n	800bf08 <_printf_float+0x334>
 800bf3a:	e6a2      	b.n	800bc82 <_printf_float+0xae>
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	463a      	mov	r2, r7
 800bf40:	4659      	mov	r1, fp
 800bf42:	4628      	mov	r0, r5
 800bf44:	47b0      	blx	r6
 800bf46:	3001      	adds	r0, #1
 800bf48:	d1ea      	bne.n	800bf20 <_printf_float+0x34c>
 800bf4a:	e69a      	b.n	800bc82 <_printf_float+0xae>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	4642      	mov	r2, r8
 800bf50:	4659      	mov	r1, fp
 800bf52:	4628      	mov	r0, r5
 800bf54:	47b0      	blx	r6
 800bf56:	3001      	adds	r0, #1
 800bf58:	f43f ae93 	beq.w	800bc82 <_printf_float+0xae>
 800bf5c:	3701      	adds	r7, #1
 800bf5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	eba3 0309 	sub.w	r3, r3, r9
 800bf68:	42bb      	cmp	r3, r7
 800bf6a:	dcef      	bgt.n	800bf4c <_printf_float+0x378>
 800bf6c:	e74d      	b.n	800be0a <_printf_float+0x236>
 800bf6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf70:	2a01      	cmp	r2, #1
 800bf72:	dc01      	bgt.n	800bf78 <_printf_float+0x3a4>
 800bf74:	07db      	lsls	r3, r3, #31
 800bf76:	d538      	bpl.n	800bfea <_printf_float+0x416>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	463a      	mov	r2, r7
 800bf7c:	4659      	mov	r1, fp
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b0      	blx	r6
 800bf82:	3001      	adds	r0, #1
 800bf84:	f43f ae7d 	beq.w	800bc82 <_printf_float+0xae>
 800bf88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf8c:	4659      	mov	r1, fp
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b0      	blx	r6
 800bf92:	3001      	adds	r0, #1
 800bf94:	f107 0701 	add.w	r7, r7, #1
 800bf98:	f43f ae73 	beq.w	800bc82 <_printf_float+0xae>
 800bf9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f103 38ff 	add.w	r8, r3, #4294967295
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f7f4 fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 800bfae:	b9c0      	cbnz	r0, 800bfe2 <_printf_float+0x40e>
 800bfb0:	4643      	mov	r3, r8
 800bfb2:	463a      	mov	r2, r7
 800bfb4:	4659      	mov	r1, fp
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	47b0      	blx	r6
 800bfba:	3001      	adds	r0, #1
 800bfbc:	d10d      	bne.n	800bfda <_printf_float+0x406>
 800bfbe:	e660      	b.n	800bc82 <_printf_float+0xae>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4642      	mov	r2, r8
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	47b0      	blx	r6
 800bfca:	3001      	adds	r0, #1
 800bfcc:	f43f ae59 	beq.w	800bc82 <_printf_float+0xae>
 800bfd0:	3701      	adds	r7, #1
 800bfd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	42bb      	cmp	r3, r7
 800bfd8:	dcf2      	bgt.n	800bfc0 <_printf_float+0x3ec>
 800bfda:	464b      	mov	r3, r9
 800bfdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bfe0:	e6e4      	b.n	800bdac <_printf_float+0x1d8>
 800bfe2:	2700      	movs	r7, #0
 800bfe4:	f104 081a 	add.w	r8, r4, #26
 800bfe8:	e7f3      	b.n	800bfd2 <_printf_float+0x3fe>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e7e1      	b.n	800bfb2 <_printf_float+0x3de>
 800bfee:	2301      	movs	r3, #1
 800bff0:	4642      	mov	r2, r8
 800bff2:	4659      	mov	r1, fp
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b0      	blx	r6
 800bff8:	3001      	adds	r0, #1
 800bffa:	f43f ae42 	beq.w	800bc82 <_printf_float+0xae>
 800bffe:	3701      	adds	r7, #1
 800c000:	68e3      	ldr	r3, [r4, #12]
 800c002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c004:	1a9b      	subs	r3, r3, r2
 800c006:	42bb      	cmp	r3, r7
 800c008:	dcf1      	bgt.n	800bfee <_printf_float+0x41a>
 800c00a:	e702      	b.n	800be12 <_printf_float+0x23e>
 800c00c:	2700      	movs	r7, #0
 800c00e:	f104 0819 	add.w	r8, r4, #25
 800c012:	e7f5      	b.n	800c000 <_printf_float+0x42c>
 800c014:	2b00      	cmp	r3, #0
 800c016:	f43f ae94 	beq.w	800bd42 <_printf_float+0x16e>
 800c01a:	f04f 0c00 	mov.w	ip, #0
 800c01e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800c022:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800c026:	6022      	str	r2, [r4, #0]
 800c028:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800c02c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	463a      	mov	r2, r7
 800c034:	464b      	mov	r3, r9
 800c036:	4628      	mov	r0, r5
 800c038:	f7ff fd3b 	bl	800bab2 <__cvt>
 800c03c:	4607      	mov	r7, r0
 800c03e:	e64f      	b.n	800bce0 <_printf_float+0x10c>

0800c040 <_printf_common>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	4691      	mov	r9, r2
 800c046:	461f      	mov	r7, r3
 800c048:	688a      	ldr	r2, [r1, #8]
 800c04a:	690b      	ldr	r3, [r1, #16]
 800c04c:	4606      	mov	r6, r0
 800c04e:	4293      	cmp	r3, r2
 800c050:	bfb8      	it	lt
 800c052:	4613      	movlt	r3, r2
 800c054:	f8c9 3000 	str.w	r3, [r9]
 800c058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c05c:	460c      	mov	r4, r1
 800c05e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c062:	b112      	cbz	r2, 800c06a <_printf_common+0x2a>
 800c064:	3301      	adds	r3, #1
 800c066:	f8c9 3000 	str.w	r3, [r9]
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	0699      	lsls	r1, r3, #26
 800c06e:	bf42      	ittt	mi
 800c070:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c074:	3302      	addmi	r3, #2
 800c076:	f8c9 3000 	strmi.w	r3, [r9]
 800c07a:	6825      	ldr	r5, [r4, #0]
 800c07c:	f015 0506 	ands.w	r5, r5, #6
 800c080:	d107      	bne.n	800c092 <_printf_common+0x52>
 800c082:	f104 0a19 	add.w	sl, r4, #25
 800c086:	68e3      	ldr	r3, [r4, #12]
 800c088:	f8d9 2000 	ldr.w	r2, [r9]
 800c08c:	1a9b      	subs	r3, r3, r2
 800c08e:	42ab      	cmp	r3, r5
 800c090:	dc29      	bgt.n	800c0e6 <_printf_common+0xa6>
 800c092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c096:	6822      	ldr	r2, [r4, #0]
 800c098:	3300      	adds	r3, #0
 800c09a:	bf18      	it	ne
 800c09c:	2301      	movne	r3, #1
 800c09e:	0692      	lsls	r2, r2, #26
 800c0a0:	d42e      	bmi.n	800c100 <_printf_common+0xc0>
 800c0a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	47c0      	blx	r8
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d021      	beq.n	800c0f4 <_printf_common+0xb4>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	68e5      	ldr	r5, [r4, #12]
 800c0b4:	f003 0306 	and.w	r3, r3, #6
 800c0b8:	2b04      	cmp	r3, #4
 800c0ba:	bf18      	it	ne
 800c0bc:	2500      	movne	r5, #0
 800c0be:	f8d9 2000 	ldr.w	r2, [r9]
 800c0c2:	f04f 0900 	mov.w	r9, #0
 800c0c6:	bf08      	it	eq
 800c0c8:	1aad      	subeq	r5, r5, r2
 800c0ca:	68a3      	ldr	r3, [r4, #8]
 800c0cc:	6922      	ldr	r2, [r4, #16]
 800c0ce:	bf08      	it	eq
 800c0d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	bfc4      	itt	gt
 800c0d8:	1a9b      	subgt	r3, r3, r2
 800c0da:	18ed      	addgt	r5, r5, r3
 800c0dc:	341a      	adds	r4, #26
 800c0de:	454d      	cmp	r5, r9
 800c0e0:	d11a      	bne.n	800c118 <_printf_common+0xd8>
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e008      	b.n	800c0f8 <_printf_common+0xb8>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4652      	mov	r2, sl
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	47c0      	blx	r8
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d103      	bne.n	800c0fc <_printf_common+0xbc>
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fc:	3501      	adds	r5, #1
 800c0fe:	e7c2      	b.n	800c086 <_printf_common+0x46>
 800c100:	2030      	movs	r0, #48	; 0x30
 800c102:	18e1      	adds	r1, r4, r3
 800c104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c10e:	4422      	add	r2, r4
 800c110:	3302      	adds	r3, #2
 800c112:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c116:	e7c4      	b.n	800c0a2 <_printf_common+0x62>
 800c118:	2301      	movs	r3, #1
 800c11a:	4622      	mov	r2, r4
 800c11c:	4639      	mov	r1, r7
 800c11e:	4630      	mov	r0, r6
 800c120:	47c0      	blx	r8
 800c122:	3001      	adds	r0, #1
 800c124:	d0e6      	beq.n	800c0f4 <_printf_common+0xb4>
 800c126:	f109 0901 	add.w	r9, r9, #1
 800c12a:	e7d8      	b.n	800c0de <_printf_common+0x9e>

0800c12c <_printf_i>:
 800c12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c134:	460c      	mov	r4, r1
 800c136:	7e09      	ldrb	r1, [r1, #24]
 800c138:	b085      	sub	sp, #20
 800c13a:	296e      	cmp	r1, #110	; 0x6e
 800c13c:	4617      	mov	r7, r2
 800c13e:	4606      	mov	r6, r0
 800c140:	4698      	mov	r8, r3
 800c142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c144:	f000 80b3 	beq.w	800c2ae <_printf_i+0x182>
 800c148:	d822      	bhi.n	800c190 <_printf_i+0x64>
 800c14a:	2963      	cmp	r1, #99	; 0x63
 800c14c:	d036      	beq.n	800c1bc <_printf_i+0x90>
 800c14e:	d80a      	bhi.n	800c166 <_printf_i+0x3a>
 800c150:	2900      	cmp	r1, #0
 800c152:	f000 80b9 	beq.w	800c2c8 <_printf_i+0x19c>
 800c156:	2958      	cmp	r1, #88	; 0x58
 800c158:	f000 8083 	beq.w	800c262 <_printf_i+0x136>
 800c15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c164:	e032      	b.n	800c1cc <_printf_i+0xa0>
 800c166:	2964      	cmp	r1, #100	; 0x64
 800c168:	d001      	beq.n	800c16e <_printf_i+0x42>
 800c16a:	2969      	cmp	r1, #105	; 0x69
 800c16c:	d1f6      	bne.n	800c15c <_printf_i+0x30>
 800c16e:	6820      	ldr	r0, [r4, #0]
 800c170:	6813      	ldr	r3, [r2, #0]
 800c172:	0605      	lsls	r5, r0, #24
 800c174:	f103 0104 	add.w	r1, r3, #4
 800c178:	d52a      	bpl.n	800c1d0 <_printf_i+0xa4>
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6011      	str	r1, [r2, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da03      	bge.n	800c18a <_printf_i+0x5e>
 800c182:	222d      	movs	r2, #45	; 0x2d
 800c184:	425b      	negs	r3, r3
 800c186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c18a:	486f      	ldr	r0, [pc, #444]	; (800c348 <_printf_i+0x21c>)
 800c18c:	220a      	movs	r2, #10
 800c18e:	e039      	b.n	800c204 <_printf_i+0xd8>
 800c190:	2973      	cmp	r1, #115	; 0x73
 800c192:	f000 809d 	beq.w	800c2d0 <_printf_i+0x1a4>
 800c196:	d808      	bhi.n	800c1aa <_printf_i+0x7e>
 800c198:	296f      	cmp	r1, #111	; 0x6f
 800c19a:	d020      	beq.n	800c1de <_printf_i+0xb2>
 800c19c:	2970      	cmp	r1, #112	; 0x70
 800c19e:	d1dd      	bne.n	800c15c <_printf_i+0x30>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	f043 0320 	orr.w	r3, r3, #32
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	e003      	b.n	800c1b2 <_printf_i+0x86>
 800c1aa:	2975      	cmp	r1, #117	; 0x75
 800c1ac:	d017      	beq.n	800c1de <_printf_i+0xb2>
 800c1ae:	2978      	cmp	r1, #120	; 0x78
 800c1b0:	d1d4      	bne.n	800c15c <_printf_i+0x30>
 800c1b2:	2378      	movs	r3, #120	; 0x78
 800c1b4:	4865      	ldr	r0, [pc, #404]	; (800c34c <_printf_i+0x220>)
 800c1b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c1ba:	e055      	b.n	800c268 <_printf_i+0x13c>
 800c1bc:	6813      	ldr	r3, [r2, #0]
 800c1be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1c2:	1d19      	adds	r1, r3, #4
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6011      	str	r1, [r2, #0]
 800c1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e08c      	b.n	800c2ea <_printf_i+0x1be>
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1d6:	6011      	str	r1, [r2, #0]
 800c1d8:	bf18      	it	ne
 800c1da:	b21b      	sxthne	r3, r3
 800c1dc:	e7cf      	b.n	800c17e <_printf_i+0x52>
 800c1de:	6813      	ldr	r3, [r2, #0]
 800c1e0:	6825      	ldr	r5, [r4, #0]
 800c1e2:	1d18      	adds	r0, r3, #4
 800c1e4:	6010      	str	r0, [r2, #0]
 800c1e6:	0628      	lsls	r0, r5, #24
 800c1e8:	d501      	bpl.n	800c1ee <_printf_i+0xc2>
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	e002      	b.n	800c1f4 <_printf_i+0xc8>
 800c1ee:	0668      	lsls	r0, r5, #25
 800c1f0:	d5fb      	bpl.n	800c1ea <_printf_i+0xbe>
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	296f      	cmp	r1, #111	; 0x6f
 800c1f6:	bf14      	ite	ne
 800c1f8:	220a      	movne	r2, #10
 800c1fa:	2208      	moveq	r2, #8
 800c1fc:	4852      	ldr	r0, [pc, #328]	; (800c348 <_printf_i+0x21c>)
 800c1fe:	2100      	movs	r1, #0
 800c200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c204:	6865      	ldr	r5, [r4, #4]
 800c206:	2d00      	cmp	r5, #0
 800c208:	60a5      	str	r5, [r4, #8]
 800c20a:	f2c0 8095 	blt.w	800c338 <_printf_i+0x20c>
 800c20e:	6821      	ldr	r1, [r4, #0]
 800c210:	f021 0104 	bic.w	r1, r1, #4
 800c214:	6021      	str	r1, [r4, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d13d      	bne.n	800c296 <_printf_i+0x16a>
 800c21a:	2d00      	cmp	r5, #0
 800c21c:	f040 808e 	bne.w	800c33c <_printf_i+0x210>
 800c220:	4665      	mov	r5, ip
 800c222:	2a08      	cmp	r2, #8
 800c224:	d10b      	bne.n	800c23e <_printf_i+0x112>
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	07db      	lsls	r3, r3, #31
 800c22a:	d508      	bpl.n	800c23e <_printf_i+0x112>
 800c22c:	6923      	ldr	r3, [r4, #16]
 800c22e:	6862      	ldr	r2, [r4, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	bfde      	ittt	le
 800c234:	2330      	movle	r3, #48	; 0x30
 800c236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c23a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c23e:	ebac 0305 	sub.w	r3, ip, r5
 800c242:	6123      	str	r3, [r4, #16]
 800c244:	f8cd 8000 	str.w	r8, [sp]
 800c248:	463b      	mov	r3, r7
 800c24a:	aa03      	add	r2, sp, #12
 800c24c:	4621      	mov	r1, r4
 800c24e:	4630      	mov	r0, r6
 800c250:	f7ff fef6 	bl	800c040 <_printf_common>
 800c254:	3001      	adds	r0, #1
 800c256:	d14d      	bne.n	800c2f4 <_printf_i+0x1c8>
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	b005      	add	sp, #20
 800c25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c262:	4839      	ldr	r0, [pc, #228]	; (800c348 <_printf_i+0x21c>)
 800c264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c268:	6813      	ldr	r3, [r2, #0]
 800c26a:	6821      	ldr	r1, [r4, #0]
 800c26c:	1d1d      	adds	r5, r3, #4
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6015      	str	r5, [r2, #0]
 800c272:	060a      	lsls	r2, r1, #24
 800c274:	d50b      	bpl.n	800c28e <_printf_i+0x162>
 800c276:	07ca      	lsls	r2, r1, #31
 800c278:	bf44      	itt	mi
 800c27a:	f041 0120 	orrmi.w	r1, r1, #32
 800c27e:	6021      	strmi	r1, [r4, #0]
 800c280:	b91b      	cbnz	r3, 800c28a <_printf_i+0x15e>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	f022 0220 	bic.w	r2, r2, #32
 800c288:	6022      	str	r2, [r4, #0]
 800c28a:	2210      	movs	r2, #16
 800c28c:	e7b7      	b.n	800c1fe <_printf_i+0xd2>
 800c28e:	064d      	lsls	r5, r1, #25
 800c290:	bf48      	it	mi
 800c292:	b29b      	uxthmi	r3, r3
 800c294:	e7ef      	b.n	800c276 <_printf_i+0x14a>
 800c296:	4665      	mov	r5, ip
 800c298:	fbb3 f1f2 	udiv	r1, r3, r2
 800c29c:	fb02 3311 	mls	r3, r2, r1, r3
 800c2a0:	5cc3      	ldrb	r3, [r0, r3]
 800c2a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	d1f5      	bne.n	800c298 <_printf_i+0x16c>
 800c2ac:	e7b9      	b.n	800c222 <_printf_i+0xf6>
 800c2ae:	6813      	ldr	r3, [r2, #0]
 800c2b0:	6825      	ldr	r5, [r4, #0]
 800c2b2:	1d18      	adds	r0, r3, #4
 800c2b4:	6961      	ldr	r1, [r4, #20]
 800c2b6:	6010      	str	r0, [r2, #0]
 800c2b8:	0628      	lsls	r0, r5, #24
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	d501      	bpl.n	800c2c2 <_printf_i+0x196>
 800c2be:	6019      	str	r1, [r3, #0]
 800c2c0:	e002      	b.n	800c2c8 <_printf_i+0x19c>
 800c2c2:	066a      	lsls	r2, r5, #25
 800c2c4:	d5fb      	bpl.n	800c2be <_printf_i+0x192>
 800c2c6:	8019      	strh	r1, [r3, #0]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4665      	mov	r5, ip
 800c2cc:	6123      	str	r3, [r4, #16]
 800c2ce:	e7b9      	b.n	800c244 <_printf_i+0x118>
 800c2d0:	6813      	ldr	r3, [r2, #0]
 800c2d2:	1d19      	adds	r1, r3, #4
 800c2d4:	6011      	str	r1, [r2, #0]
 800c2d6:	681d      	ldr	r5, [r3, #0]
 800c2d8:	6862      	ldr	r2, [r4, #4]
 800c2da:	2100      	movs	r1, #0
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f000 fedd 	bl	800d09c <memchr>
 800c2e2:	b108      	cbz	r0, 800c2e8 <_printf_i+0x1bc>
 800c2e4:	1b40      	subs	r0, r0, r5
 800c2e6:	6060      	str	r0, [r4, #4]
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	6123      	str	r3, [r4, #16]
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2f2:	e7a7      	b.n	800c244 <_printf_i+0x118>
 800c2f4:	6923      	ldr	r3, [r4, #16]
 800c2f6:	462a      	mov	r2, r5
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	47c0      	blx	r8
 800c2fe:	3001      	adds	r0, #1
 800c300:	d0aa      	beq.n	800c258 <_printf_i+0x12c>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	079b      	lsls	r3, r3, #30
 800c306:	d413      	bmi.n	800c330 <_printf_i+0x204>
 800c308:	68e0      	ldr	r0, [r4, #12]
 800c30a:	9b03      	ldr	r3, [sp, #12]
 800c30c:	4298      	cmp	r0, r3
 800c30e:	bfb8      	it	lt
 800c310:	4618      	movlt	r0, r3
 800c312:	e7a3      	b.n	800c25c <_printf_i+0x130>
 800c314:	2301      	movs	r3, #1
 800c316:	464a      	mov	r2, r9
 800c318:	4639      	mov	r1, r7
 800c31a:	4630      	mov	r0, r6
 800c31c:	47c0      	blx	r8
 800c31e:	3001      	adds	r0, #1
 800c320:	d09a      	beq.n	800c258 <_printf_i+0x12c>
 800c322:	3501      	adds	r5, #1
 800c324:	68e3      	ldr	r3, [r4, #12]
 800c326:	9a03      	ldr	r2, [sp, #12]
 800c328:	1a9b      	subs	r3, r3, r2
 800c32a:	42ab      	cmp	r3, r5
 800c32c:	dcf2      	bgt.n	800c314 <_printf_i+0x1e8>
 800c32e:	e7eb      	b.n	800c308 <_printf_i+0x1dc>
 800c330:	2500      	movs	r5, #0
 800c332:	f104 0919 	add.w	r9, r4, #25
 800c336:	e7f5      	b.n	800c324 <_printf_i+0x1f8>
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1ac      	bne.n	800c296 <_printf_i+0x16a>
 800c33c:	7803      	ldrb	r3, [r0, #0]
 800c33e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c346:	e76c      	b.n	800c222 <_printf_i+0xf6>
 800c348:	0800e628 	.word	0x0800e628
 800c34c:	0800e639 	.word	0x0800e639

0800c350 <siprintf>:
 800c350:	b40e      	push	{r1, r2, r3}
 800c352:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c356:	b500      	push	{lr}
 800c358:	b09c      	sub	sp, #112	; 0x70
 800c35a:	ab1d      	add	r3, sp, #116	; 0x74
 800c35c:	9002      	str	r0, [sp, #8]
 800c35e:	9006      	str	r0, [sp, #24]
 800c360:	9107      	str	r1, [sp, #28]
 800c362:	9104      	str	r1, [sp, #16]
 800c364:	4808      	ldr	r0, [pc, #32]	; (800c388 <siprintf+0x38>)
 800c366:	4909      	ldr	r1, [pc, #36]	; (800c38c <siprintf+0x3c>)
 800c368:	f853 2b04 	ldr.w	r2, [r3], #4
 800c36c:	9105      	str	r1, [sp, #20]
 800c36e:	6800      	ldr	r0, [r0, #0]
 800c370:	a902      	add	r1, sp, #8
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	f001 fa8a 	bl	800d88c <_svfiprintf_r>
 800c378:	2200      	movs	r2, #0
 800c37a:	9b02      	ldr	r3, [sp, #8]
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	b01c      	add	sp, #112	; 0x70
 800c380:	f85d eb04 	ldr.w	lr, [sp], #4
 800c384:	b003      	add	sp, #12
 800c386:	4770      	bx	lr
 800c388:	20000184 	.word	0x20000184
 800c38c:	ffff0208 	.word	0xffff0208

0800c390 <siscanf>:
 800c390:	b40e      	push	{r1, r2, r3}
 800c392:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c396:	b530      	push	{r4, r5, lr}
 800c398:	b09c      	sub	sp, #112	; 0x70
 800c39a:	ac1f      	add	r4, sp, #124	; 0x7c
 800c39c:	f854 5b04 	ldr.w	r5, [r4], #4
 800c3a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c3a4:	9002      	str	r0, [sp, #8]
 800c3a6:	9006      	str	r0, [sp, #24]
 800c3a8:	f7f3 fed2 	bl	8000150 <strlen>
 800c3ac:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <siscanf+0x4c>)
 800c3ae:	9003      	str	r0, [sp, #12]
 800c3b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3b6:	9314      	str	r3, [sp, #80]	; 0x50
 800c3b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3bc:	9007      	str	r0, [sp, #28]
 800c3be:	4808      	ldr	r0, [pc, #32]	; (800c3e0 <siscanf+0x50>)
 800c3c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	4623      	mov	r3, r4
 800c3c8:	a902      	add	r1, sp, #8
 800c3ca:	6800      	ldr	r0, [r0, #0]
 800c3cc:	9401      	str	r4, [sp, #4]
 800c3ce:	f001 fbaf 	bl	800db30 <__ssvfiscanf_r>
 800c3d2:	b01c      	add	sp, #112	; 0x70
 800c3d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3d8:	b003      	add	sp, #12
 800c3da:	4770      	bx	lr
 800c3dc:	0800c3e5 	.word	0x0800c3e5
 800c3e0:	20000184 	.word	0x20000184

0800c3e4 <__seofread>:
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	4770      	bx	lr

0800c3e8 <quorem>:
 800c3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	6903      	ldr	r3, [r0, #16]
 800c3ee:	690c      	ldr	r4, [r1, #16]
 800c3f0:	4680      	mov	r8, r0
 800c3f2:	42a3      	cmp	r3, r4
 800c3f4:	f2c0 8084 	blt.w	800c500 <quorem+0x118>
 800c3f8:	3c01      	subs	r4, #1
 800c3fa:	f101 0714 	add.w	r7, r1, #20
 800c3fe:	f100 0614 	add.w	r6, r0, #20
 800c402:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c406:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c40a:	3501      	adds	r5, #1
 800c40c:	fbb0 f5f5 	udiv	r5, r0, r5
 800c410:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c414:	eb06 030c 	add.w	r3, r6, ip
 800c418:	eb07 090c 	add.w	r9, r7, ip
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	b39d      	cbz	r5, 800c488 <quorem+0xa0>
 800c420:	f04f 0a00 	mov.w	sl, #0
 800c424:	4638      	mov	r0, r7
 800c426:	46b6      	mov	lr, r6
 800c428:	46d3      	mov	fp, sl
 800c42a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c42e:	b293      	uxth	r3, r2
 800c430:	fb05 a303 	mla	r3, r5, r3, sl
 800c434:	0c12      	lsrs	r2, r2, #16
 800c436:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c43a:	fb05 a202 	mla	r2, r5, r2, sl
 800c43e:	b29b      	uxth	r3, r3
 800c440:	ebab 0303 	sub.w	r3, fp, r3
 800c444:	f8de b000 	ldr.w	fp, [lr]
 800c448:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c44c:	fa1f fb8b 	uxth.w	fp, fp
 800c450:	445b      	add	r3, fp
 800c452:	fa1f fb82 	uxth.w	fp, r2
 800c456:	f8de 2000 	ldr.w	r2, [lr]
 800c45a:	4581      	cmp	r9, r0
 800c45c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c464:	b29b      	uxth	r3, r3
 800c466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c46a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c46e:	f84e 3b04 	str.w	r3, [lr], #4
 800c472:	d2da      	bcs.n	800c42a <quorem+0x42>
 800c474:	f856 300c 	ldr.w	r3, [r6, ip]
 800c478:	b933      	cbnz	r3, 800c488 <quorem+0xa0>
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	3b04      	subs	r3, #4
 800c47e:	429e      	cmp	r6, r3
 800c480:	461a      	mov	r2, r3
 800c482:	d331      	bcc.n	800c4e8 <quorem+0x100>
 800c484:	f8c8 4010 	str.w	r4, [r8, #16]
 800c488:	4640      	mov	r0, r8
 800c48a:	f001 f829 	bl	800d4e0 <__mcmp>
 800c48e:	2800      	cmp	r0, #0
 800c490:	db26      	blt.n	800c4e0 <quorem+0xf8>
 800c492:	4630      	mov	r0, r6
 800c494:	f04f 0c00 	mov.w	ip, #0
 800c498:	3501      	adds	r5, #1
 800c49a:	f857 1b04 	ldr.w	r1, [r7], #4
 800c49e:	f8d0 e000 	ldr.w	lr, [r0]
 800c4a2:	b28b      	uxth	r3, r1
 800c4a4:	ebac 0303 	sub.w	r3, ip, r3
 800c4a8:	fa1f f28e 	uxth.w	r2, lr
 800c4ac:	4413      	add	r3, r2
 800c4ae:	0c0a      	lsrs	r2, r1, #16
 800c4b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4be:	45b9      	cmp	r9, r7
 800c4c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4c4:	f840 3b04 	str.w	r3, [r0], #4
 800c4c8:	d2e7      	bcs.n	800c49a <quorem+0xb2>
 800c4ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c4ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c4d2:	b92a      	cbnz	r2, 800c4e0 <quorem+0xf8>
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	429e      	cmp	r6, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	d30b      	bcc.n	800c4f4 <quorem+0x10c>
 800c4dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	b003      	add	sp, #12
 800c4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	3b04      	subs	r3, #4
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	d1c9      	bne.n	800c484 <quorem+0x9c>
 800c4f0:	3c01      	subs	r4, #1
 800c4f2:	e7c4      	b.n	800c47e <quorem+0x96>
 800c4f4:	6812      	ldr	r2, [r2, #0]
 800c4f6:	3b04      	subs	r3, #4
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	d1ef      	bne.n	800c4dc <quorem+0xf4>
 800c4fc:	3c01      	subs	r4, #1
 800c4fe:	e7ea      	b.n	800c4d6 <quorem+0xee>
 800c500:	2000      	movs	r0, #0
 800c502:	e7ee      	b.n	800c4e2 <quorem+0xfa>
 800c504:	0000      	movs	r0, r0
	...

0800c508 <_dtoa_r>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	4616      	mov	r6, r2
 800c50e:	461f      	mov	r7, r3
 800c510:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c512:	b095      	sub	sp, #84	; 0x54
 800c514:	4604      	mov	r4, r0
 800c516:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c51a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c51e:	b93d      	cbnz	r5, 800c530 <_dtoa_r+0x28>
 800c520:	2010      	movs	r0, #16
 800c522:	f000 fdb3 	bl	800d08c <malloc>
 800c526:	6260      	str	r0, [r4, #36]	; 0x24
 800c528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c52c:	6005      	str	r5, [r0, #0]
 800c52e:	60c5      	str	r5, [r0, #12]
 800c530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c532:	6819      	ldr	r1, [r3, #0]
 800c534:	b151      	cbz	r1, 800c54c <_dtoa_r+0x44>
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	2301      	movs	r3, #1
 800c53a:	4093      	lsls	r3, r2
 800c53c:	604a      	str	r2, [r1, #4]
 800c53e:	608b      	str	r3, [r1, #8]
 800c540:	4620      	mov	r0, r4
 800c542:	f000 fded 	bl	800d120 <_Bfree>
 800c546:	2200      	movs	r2, #0
 800c548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	1e3b      	subs	r3, r7, #0
 800c54e:	bfaf      	iteee	ge
 800c550:	2300      	movge	r3, #0
 800c552:	2201      	movlt	r2, #1
 800c554:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c558:	9303      	strlt	r3, [sp, #12]
 800c55a:	bfac      	ite	ge
 800c55c:	f8c8 3000 	strge.w	r3, [r8]
 800c560:	f8c8 2000 	strlt.w	r2, [r8]
 800c564:	4bae      	ldr	r3, [pc, #696]	; (800c820 <_dtoa_r+0x318>)
 800c566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c56a:	ea33 0308 	bics.w	r3, r3, r8
 800c56e:	d11b      	bne.n	800c5a8 <_dtoa_r+0xa0>
 800c570:	f242 730f 	movw	r3, #9999	; 0x270f
 800c574:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	b923      	cbnz	r3, 800c586 <_dtoa_r+0x7e>
 800c57c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c580:	2800      	cmp	r0, #0
 800c582:	f000 8545 	beq.w	800d010 <_dtoa_r+0xb08>
 800c586:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c588:	b953      	cbnz	r3, 800c5a0 <_dtoa_r+0x98>
 800c58a:	4ba6      	ldr	r3, [pc, #664]	; (800c824 <_dtoa_r+0x31c>)
 800c58c:	e021      	b.n	800c5d2 <_dtoa_r+0xca>
 800c58e:	4ba6      	ldr	r3, [pc, #664]	; (800c828 <_dtoa_r+0x320>)
 800c590:	9306      	str	r3, [sp, #24]
 800c592:	3308      	adds	r3, #8
 800c594:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	9806      	ldr	r0, [sp, #24]
 800c59a:	b015      	add	sp, #84	; 0x54
 800c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	4ba0      	ldr	r3, [pc, #640]	; (800c824 <_dtoa_r+0x31c>)
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	3303      	adds	r3, #3
 800c5a6:	e7f5      	b.n	800c594 <_dtoa_r+0x8c>
 800c5a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f4 f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 800c5b8:	4682      	mov	sl, r0
 800c5ba:	b160      	cbz	r0, 800c5d6 <_dtoa_r+0xce>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 8520 	beq.w	800d00a <_dtoa_r+0xb02>
 800c5ca:	4b98      	ldr	r3, [pc, #608]	; (800c82c <_dtoa_r+0x324>)
 800c5cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	9306      	str	r3, [sp, #24]
 800c5d4:	e7e0      	b.n	800c598 <_dtoa_r+0x90>
 800c5d6:	ab12      	add	r3, sp, #72	; 0x48
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	ab13      	add	r3, sp, #76	; 0x4c
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	4632      	mov	r2, r6
 800c5e0:	463b      	mov	r3, r7
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fff4 	bl	800d5d0 <__d2b>
 800c5e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c5ec:	4683      	mov	fp, r0
 800c5ee:	2d00      	cmp	r5, #0
 800c5f0:	d07d      	beq.n	800c6ee <_dtoa_r+0x1e6>
 800c5f2:	46b0      	mov	r8, r6
 800c5f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c5fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c600:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c604:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c608:	2200      	movs	r2, #0
 800c60a:	4b89      	ldr	r3, [pc, #548]	; (800c830 <_dtoa_r+0x328>)
 800c60c:	4640      	mov	r0, r8
 800c60e:	4649      	mov	r1, r9
 800c610:	f7f3 fdaa 	bl	8000168 <__aeabi_dsub>
 800c614:	a37c      	add	r3, pc, #496	; (adr r3, 800c808 <_dtoa_r+0x300>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	f7f3 ff5d 	bl	80004d8 <__aeabi_dmul>
 800c61e:	a37c      	add	r3, pc, #496	; (adr r3, 800c810 <_dtoa_r+0x308>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	f7f3 fda2 	bl	800016c <__adddf3>
 800c628:	4606      	mov	r6, r0
 800c62a:	4628      	mov	r0, r5
 800c62c:	460f      	mov	r7, r1
 800c62e:	f7f3 fee9 	bl	8000404 <__aeabi_i2d>
 800c632:	a379      	add	r3, pc, #484	; (adr r3, 800c818 <_dtoa_r+0x310>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 ff4e 	bl	80004d8 <__aeabi_dmul>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4630      	mov	r0, r6
 800c642:	4639      	mov	r1, r7
 800c644:	f7f3 fd92 	bl	800016c <__adddf3>
 800c648:	4606      	mov	r6, r0
 800c64a:	460f      	mov	r7, r1
 800c64c:	f7f4 f9f4 	bl	8000a38 <__aeabi_d2iz>
 800c650:	2200      	movs	r2, #0
 800c652:	4682      	mov	sl, r0
 800c654:	2300      	movs	r3, #0
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f4 f9af 	bl	80009bc <__aeabi_dcmplt>
 800c65e:	b148      	cbz	r0, 800c674 <_dtoa_r+0x16c>
 800c660:	4650      	mov	r0, sl
 800c662:	f7f3 fecf 	bl	8000404 <__aeabi_i2d>
 800c666:	4632      	mov	r2, r6
 800c668:	463b      	mov	r3, r7
 800c66a:	f7f4 f99d 	bl	80009a8 <__aeabi_dcmpeq>
 800c66e:	b908      	cbnz	r0, 800c674 <_dtoa_r+0x16c>
 800c670:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c674:	f1ba 0f16 	cmp.w	sl, #22
 800c678:	d85a      	bhi.n	800c730 <_dtoa_r+0x228>
 800c67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c67e:	496d      	ldr	r1, [pc, #436]	; (800c834 <_dtoa_r+0x32c>)
 800c680:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c688:	f7f4 f9b6 	bl	80009f8 <__aeabi_dcmpgt>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d051      	beq.n	800c734 <_dtoa_r+0x22c>
 800c690:	2300      	movs	r3, #0
 800c692:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c696:	930d      	str	r3, [sp, #52]	; 0x34
 800c698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c69a:	1b5d      	subs	r5, r3, r5
 800c69c:	1e6b      	subs	r3, r5, #1
 800c69e:	9307      	str	r3, [sp, #28]
 800c6a0:	bf43      	ittte	mi
 800c6a2:	2300      	movmi	r3, #0
 800c6a4:	f1c5 0901 	rsbmi	r9, r5, #1
 800c6a8:	9307      	strmi	r3, [sp, #28]
 800c6aa:	f04f 0900 	movpl.w	r9, #0
 800c6ae:	f1ba 0f00 	cmp.w	sl, #0
 800c6b2:	db41      	blt.n	800c738 <_dtoa_r+0x230>
 800c6b4:	9b07      	ldr	r3, [sp, #28]
 800c6b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c6ba:	4453      	add	r3, sl
 800c6bc:	9307      	str	r3, [sp, #28]
 800c6be:	2300      	movs	r3, #0
 800c6c0:	9308      	str	r3, [sp, #32]
 800c6c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c6c4:	2b09      	cmp	r3, #9
 800c6c6:	f200 808f 	bhi.w	800c7e8 <_dtoa_r+0x2e0>
 800c6ca:	2b05      	cmp	r3, #5
 800c6cc:	bfc4      	itt	gt
 800c6ce:	3b04      	subgt	r3, #4
 800c6d0:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c6d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c6d4:	bfc8      	it	gt
 800c6d6:	2500      	movgt	r5, #0
 800c6d8:	f1a3 0302 	sub.w	r3, r3, #2
 800c6dc:	bfd8      	it	le
 800c6de:	2501      	movle	r5, #1
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	f200 808d 	bhi.w	800c800 <_dtoa_r+0x2f8>
 800c6e6:	e8df f003 	tbb	[pc, r3]
 800c6ea:	7d7b      	.short	0x7d7b
 800c6ec:	6f2f      	.short	0x6f2f
 800c6ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c6f2:	441d      	add	r5, r3
 800c6f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c6f8:	2820      	cmp	r0, #32
 800c6fa:	dd13      	ble.n	800c724 <_dtoa_r+0x21c>
 800c6fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	fa08 f800 	lsl.w	r8, r8, r0
 800c706:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c70a:	fa23 f000 	lsr.w	r0, r3, r0
 800c70e:	ea48 0000 	orr.w	r0, r8, r0
 800c712:	f7f3 fe67 	bl	80003e4 <__aeabi_ui2d>
 800c716:	2301      	movs	r3, #1
 800c718:	4680      	mov	r8, r0
 800c71a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c71e:	3d01      	subs	r5, #1
 800c720:	9310      	str	r3, [sp, #64]	; 0x40
 800c722:	e771      	b.n	800c608 <_dtoa_r+0x100>
 800c724:	9b02      	ldr	r3, [sp, #8]
 800c726:	f1c0 0020 	rsb	r0, r0, #32
 800c72a:	fa03 f000 	lsl.w	r0, r3, r0
 800c72e:	e7f0      	b.n	800c712 <_dtoa_r+0x20a>
 800c730:	2301      	movs	r3, #1
 800c732:	e7b0      	b.n	800c696 <_dtoa_r+0x18e>
 800c734:	900d      	str	r0, [sp, #52]	; 0x34
 800c736:	e7af      	b.n	800c698 <_dtoa_r+0x190>
 800c738:	f1ca 0300 	rsb	r3, sl, #0
 800c73c:	9308      	str	r3, [sp, #32]
 800c73e:	2300      	movs	r3, #0
 800c740:	eba9 090a 	sub.w	r9, r9, sl
 800c744:	930c      	str	r3, [sp, #48]	; 0x30
 800c746:	e7bc      	b.n	800c6c2 <_dtoa_r+0x1ba>
 800c748:	2301      	movs	r3, #1
 800c74a:	9309      	str	r3, [sp, #36]	; 0x24
 800c74c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dd74      	ble.n	800c83c <_dtoa_r+0x334>
 800c752:	4698      	mov	r8, r3
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	2200      	movs	r2, #0
 800c758:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c75a:	6072      	str	r2, [r6, #4]
 800c75c:	2204      	movs	r2, #4
 800c75e:	f102 0014 	add.w	r0, r2, #20
 800c762:	4298      	cmp	r0, r3
 800c764:	6871      	ldr	r1, [r6, #4]
 800c766:	d96e      	bls.n	800c846 <_dtoa_r+0x33e>
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fca5 	bl	800d0b8 <_Balloc>
 800c76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c770:	6030      	str	r0, [r6, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f1b8 0f0e 	cmp.w	r8, #14
 800c778:	9306      	str	r3, [sp, #24]
 800c77a:	f200 80ed 	bhi.w	800c958 <_dtoa_r+0x450>
 800c77e:	2d00      	cmp	r5, #0
 800c780:	f000 80ea 	beq.w	800c958 <_dtoa_r+0x450>
 800c784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c788:	f1ba 0f00 	cmp.w	sl, #0
 800c78c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c790:	dd77      	ble.n	800c882 <_dtoa_r+0x37a>
 800c792:	4a28      	ldr	r2, [pc, #160]	; (800c834 <_dtoa_r+0x32c>)
 800c794:	f00a 030f 	and.w	r3, sl, #15
 800c798:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c79c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7a0:	06f0      	lsls	r0, r6, #27
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c7aa:	d568      	bpl.n	800c87e <_dtoa_r+0x376>
 800c7ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c7b0:	4b21      	ldr	r3, [pc, #132]	; (800c838 <_dtoa_r+0x330>)
 800c7b2:	2503      	movs	r5, #3
 800c7b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7b8:	f7f3 ffb8 	bl	800072c <__aeabi_ddiv>
 800c7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7c0:	f006 060f 	and.w	r6, r6, #15
 800c7c4:	4f1c      	ldr	r7, [pc, #112]	; (800c838 <_dtoa_r+0x330>)
 800c7c6:	e04f      	b.n	800c868 <_dtoa_r+0x360>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c7cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c7ce:	4453      	add	r3, sl
 800c7d0:	f103 0801 	add.w	r8, r3, #1
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	4643      	mov	r3, r8
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	bfb8      	it	lt
 800c7dc:	2301      	movlt	r3, #1
 800c7de:	e7ba      	b.n	800c756 <_dtoa_r+0x24e>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e7b2      	b.n	800c74a <_dtoa_r+0x242>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e7f0      	b.n	800c7ca <_dtoa_r+0x2c2>
 800c7e8:	2501      	movs	r5, #1
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	9509      	str	r5, [sp, #36]	; 0x24
 800c7ee:	931e      	str	r3, [sp, #120]	; 0x78
 800c7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	9304      	str	r3, [sp, #16]
 800c7f8:	4698      	mov	r8, r3
 800c7fa:	2312      	movs	r3, #18
 800c7fc:	921f      	str	r2, [sp, #124]	; 0x7c
 800c7fe:	e7aa      	b.n	800c756 <_dtoa_r+0x24e>
 800c800:	2301      	movs	r3, #1
 800c802:	9309      	str	r3, [sp, #36]	; 0x24
 800c804:	e7f4      	b.n	800c7f0 <_dtoa_r+0x2e8>
 800c806:	bf00      	nop
 800c808:	636f4361 	.word	0x636f4361
 800c80c:	3fd287a7 	.word	0x3fd287a7
 800c810:	8b60c8b3 	.word	0x8b60c8b3
 800c814:	3fc68a28 	.word	0x3fc68a28
 800c818:	509f79fb 	.word	0x509f79fb
 800c81c:	3fd34413 	.word	0x3fd34413
 800c820:	7ff00000 	.word	0x7ff00000
 800c824:	0800e653 	.word	0x0800e653
 800c828:	0800e64a 	.word	0x0800e64a
 800c82c:	0800e77c 	.word	0x0800e77c
 800c830:	3ff80000 	.word	0x3ff80000
 800c834:	0800e680 	.word	0x0800e680
 800c838:	0800e658 	.word	0x0800e658
 800c83c:	2301      	movs	r3, #1
 800c83e:	9304      	str	r3, [sp, #16]
 800c840:	4698      	mov	r8, r3
 800c842:	461a      	mov	r2, r3
 800c844:	e7da      	b.n	800c7fc <_dtoa_r+0x2f4>
 800c846:	3101      	adds	r1, #1
 800c848:	6071      	str	r1, [r6, #4]
 800c84a:	0052      	lsls	r2, r2, #1
 800c84c:	e787      	b.n	800c75e <_dtoa_r+0x256>
 800c84e:	07f1      	lsls	r1, r6, #31
 800c850:	d508      	bpl.n	800c864 <_dtoa_r+0x35c>
 800c852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c85a:	f7f3 fe3d 	bl	80004d8 <__aeabi_dmul>
 800c85e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c862:	3501      	adds	r5, #1
 800c864:	1076      	asrs	r6, r6, #1
 800c866:	3708      	adds	r7, #8
 800c868:	2e00      	cmp	r6, #0
 800c86a:	d1f0      	bne.n	800c84e <_dtoa_r+0x346>
 800c86c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c874:	f7f3 ff5a 	bl	800072c <__aeabi_ddiv>
 800c878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c87c:	e01b      	b.n	800c8b6 <_dtoa_r+0x3ae>
 800c87e:	2502      	movs	r5, #2
 800c880:	e7a0      	b.n	800c7c4 <_dtoa_r+0x2bc>
 800c882:	f000 80a4 	beq.w	800c9ce <_dtoa_r+0x4c6>
 800c886:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c88a:	f1ca 0600 	rsb	r6, sl, #0
 800c88e:	4ba0      	ldr	r3, [pc, #640]	; (800cb10 <_dtoa_r+0x608>)
 800c890:	f006 020f 	and.w	r2, r6, #15
 800c894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f7f3 fe1c 	bl	80004d8 <__aeabi_dmul>
 800c8a0:	2502      	movs	r5, #2
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8a8:	4f9a      	ldr	r7, [pc, #616]	; (800cb14 <_dtoa_r+0x60c>)
 800c8aa:	1136      	asrs	r6, r6, #4
 800c8ac:	2e00      	cmp	r6, #0
 800c8ae:	f040 8083 	bne.w	800c9b8 <_dtoa_r+0x4b0>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e0      	bne.n	800c878 <_dtoa_r+0x370>
 800c8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 808a 	beq.w	800c9d2 <_dtoa_r+0x4ca>
 800c8be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c8c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	4b92      	ldr	r3, [pc, #584]	; (800cb18 <_dtoa_r+0x610>)
 800c8ce:	f7f4 f875 	bl	80009bc <__aeabi_dcmplt>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d07d      	beq.n	800c9d2 <_dtoa_r+0x4ca>
 800c8d6:	f1b8 0f00 	cmp.w	r8, #0
 800c8da:	d07a      	beq.n	800c9d2 <_dtoa_r+0x4ca>
 800c8dc:	9b04      	ldr	r3, [sp, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	dd36      	ble.n	800c950 <_dtoa_r+0x448>
 800c8e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	4b8c      	ldr	r3, [pc, #560]	; (800cb1c <_dtoa_r+0x614>)
 800c8ea:	f7f3 fdf5 	bl	80004d8 <__aeabi_dmul>
 800c8ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8f2:	9e04      	ldr	r6, [sp, #16]
 800c8f4:	f10a 37ff 	add.w	r7, sl, #4294967295
 800c8f8:	3501      	adds	r5, #1
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f7f3 fd82 	bl	8000404 <__aeabi_i2d>
 800c900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c904:	f7f3 fde8 	bl	80004d8 <__aeabi_dmul>
 800c908:	2200      	movs	r2, #0
 800c90a:	4b85      	ldr	r3, [pc, #532]	; (800cb20 <_dtoa_r+0x618>)
 800c90c:	f7f3 fc2e 	bl	800016c <__adddf3>
 800c910:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c914:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c918:	950b      	str	r5, [sp, #44]	; 0x2c
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	d15c      	bne.n	800c9d8 <_dtoa_r+0x4d0>
 800c91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c922:	2200      	movs	r2, #0
 800c924:	4b7f      	ldr	r3, [pc, #508]	; (800cb24 <_dtoa_r+0x61c>)
 800c926:	f7f3 fc1f 	bl	8000168 <__aeabi_dsub>
 800c92a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c92c:	462b      	mov	r3, r5
 800c92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c932:	f7f4 f861 	bl	80009f8 <__aeabi_dcmpgt>
 800c936:	2800      	cmp	r0, #0
 800c938:	f040 8281 	bne.w	800ce3e <_dtoa_r+0x936>
 800c93c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c942:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c946:	f7f4 f839 	bl	80009bc <__aeabi_dcmplt>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f040 8275 	bne.w	800ce3a <_dtoa_r+0x932>
 800c950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f2c0 814b 	blt.w	800cbf6 <_dtoa_r+0x6ee>
 800c960:	f1ba 0f0e 	cmp.w	sl, #14
 800c964:	f300 8147 	bgt.w	800cbf6 <_dtoa_r+0x6ee>
 800c968:	4b69      	ldr	r3, [pc, #420]	; (800cb10 <_dtoa_r+0x608>)
 800c96a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f280 80d7 	bge.w	800cb2c <_dtoa_r+0x624>
 800c97e:	f1b8 0f00 	cmp.w	r8, #0
 800c982:	f300 80d3 	bgt.w	800cb2c <_dtoa_r+0x624>
 800c986:	f040 8257 	bne.w	800ce38 <_dtoa_r+0x930>
 800c98a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c98e:	2200      	movs	r2, #0
 800c990:	4b64      	ldr	r3, [pc, #400]	; (800cb24 <_dtoa_r+0x61c>)
 800c992:	f7f3 fda1 	bl	80004d8 <__aeabi_dmul>
 800c996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c99a:	f7f4 f823 	bl	80009e4 <__aeabi_dcmpge>
 800c99e:	4646      	mov	r6, r8
 800c9a0:	4647      	mov	r7, r8
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f040 822d 	bne.w	800ce02 <_dtoa_r+0x8fa>
 800c9a8:	9b06      	ldr	r3, [sp, #24]
 800c9aa:	9a06      	ldr	r2, [sp, #24]
 800c9ac:	1c5d      	adds	r5, r3, #1
 800c9ae:	2331      	movs	r3, #49	; 0x31
 800c9b0:	f10a 0a01 	add.w	sl, sl, #1
 800c9b4:	7013      	strb	r3, [r2, #0]
 800c9b6:	e228      	b.n	800ce0a <_dtoa_r+0x902>
 800c9b8:	07f2      	lsls	r2, r6, #31
 800c9ba:	d505      	bpl.n	800c9c8 <_dtoa_r+0x4c0>
 800c9bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9c0:	f7f3 fd8a 	bl	80004d8 <__aeabi_dmul>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	3501      	adds	r5, #1
 800c9c8:	1076      	asrs	r6, r6, #1
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	e76e      	b.n	800c8ac <_dtoa_r+0x3a4>
 800c9ce:	2502      	movs	r5, #2
 800c9d0:	e771      	b.n	800c8b6 <_dtoa_r+0x3ae>
 800c9d2:	4657      	mov	r7, sl
 800c9d4:	4646      	mov	r6, r8
 800c9d6:	e790      	b.n	800c8fa <_dtoa_r+0x3f2>
 800c9d8:	4b4d      	ldr	r3, [pc, #308]	; (800cb10 <_dtoa_r+0x608>)
 800c9da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d048      	beq.n	800ca7a <_dtoa_r+0x572>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	494e      	ldr	r1, [pc, #312]	; (800cb28 <_dtoa_r+0x620>)
 800c9f0:	f7f3 fe9c 	bl	800072c <__aeabi_ddiv>
 800c9f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c9f8:	f7f3 fbb6 	bl	8000168 <__aeabi_dsub>
 800c9fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca00:	9d06      	ldr	r5, [sp, #24]
 800ca02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca06:	f7f4 f817 	bl	8000a38 <__aeabi_d2iz>
 800ca0a:	9011      	str	r0, [sp, #68]	; 0x44
 800ca0c:	f7f3 fcfa 	bl	8000404 <__aeabi_i2d>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca18:	f7f3 fba6 	bl	8000168 <__aeabi_dsub>
 800ca1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca22:	3330      	adds	r3, #48	; 0x30
 800ca24:	f805 3b01 	strb.w	r3, [r5], #1
 800ca28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca2c:	f7f3 ffc6 	bl	80009bc <__aeabi_dcmplt>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d163      	bne.n	800cafc <_dtoa_r+0x5f4>
 800ca34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca38:	2000      	movs	r0, #0
 800ca3a:	4937      	ldr	r1, [pc, #220]	; (800cb18 <_dtoa_r+0x610>)
 800ca3c:	f7f3 fb94 	bl	8000168 <__aeabi_dsub>
 800ca40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca44:	f7f3 ffba 	bl	80009bc <__aeabi_dcmplt>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	f040 80b5 	bne.w	800cbb8 <_dtoa_r+0x6b0>
 800ca4e:	9b06      	ldr	r3, [sp, #24]
 800ca50:	1aeb      	subs	r3, r5, r3
 800ca52:	429e      	cmp	r6, r3
 800ca54:	f77f af7c 	ble.w	800c950 <_dtoa_r+0x448>
 800ca58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	4b2f      	ldr	r3, [pc, #188]	; (800cb1c <_dtoa_r+0x614>)
 800ca60:	f7f3 fd3a 	bl	80004d8 <__aeabi_dmul>
 800ca64:	2200      	movs	r2, #0
 800ca66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6e:	4b2b      	ldr	r3, [pc, #172]	; (800cb1c <_dtoa_r+0x614>)
 800ca70:	f7f3 fd32 	bl	80004d8 <__aeabi_dmul>
 800ca74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca78:	e7c3      	b.n	800ca02 <_dtoa_r+0x4fa>
 800ca7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca7e:	f7f3 fd2b 	bl	80004d8 <__aeabi_dmul>
 800ca82:	9b06      	ldr	r3, [sp, #24]
 800ca84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca88:	199d      	adds	r5, r3, r6
 800ca8a:	461e      	mov	r6, r3
 800ca8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca90:	f7f3 ffd2 	bl	8000a38 <__aeabi_d2iz>
 800ca94:	9011      	str	r0, [sp, #68]	; 0x44
 800ca96:	f7f3 fcb5 	bl	8000404 <__aeabi_i2d>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caa2:	f7f3 fb61 	bl	8000168 <__aeabi_dsub>
 800caa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800caa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caac:	3330      	adds	r3, #48	; 0x30
 800caae:	f806 3b01 	strb.w	r3, [r6], #1
 800cab2:	42ae      	cmp	r6, r5
 800cab4:	f04f 0200 	mov.w	r2, #0
 800cab8:	d124      	bne.n	800cb04 <_dtoa_r+0x5fc>
 800caba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cabe:	4b1a      	ldr	r3, [pc, #104]	; (800cb28 <_dtoa_r+0x620>)
 800cac0:	f7f3 fb54 	bl	800016c <__adddf3>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cacc:	f7f3 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d171      	bne.n	800cbb8 <_dtoa_r+0x6b0>
 800cad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cad8:	2000      	movs	r0, #0
 800cada:	4913      	ldr	r1, [pc, #76]	; (800cb28 <_dtoa_r+0x620>)
 800cadc:	f7f3 fb44 	bl	8000168 <__aeabi_dsub>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae8:	f7f3 ff68 	bl	80009bc <__aeabi_dcmplt>
 800caec:	2800      	cmp	r0, #0
 800caee:	f43f af2f 	beq.w	800c950 <_dtoa_r+0x448>
 800caf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800caf6:	1e6a      	subs	r2, r5, #1
 800caf8:	2b30      	cmp	r3, #48	; 0x30
 800cafa:	d001      	beq.n	800cb00 <_dtoa_r+0x5f8>
 800cafc:	46ba      	mov	sl, r7
 800cafe:	e04a      	b.n	800cb96 <_dtoa_r+0x68e>
 800cb00:	4615      	mov	r5, r2
 800cb02:	e7f6      	b.n	800caf2 <_dtoa_r+0x5ea>
 800cb04:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <_dtoa_r+0x614>)
 800cb06:	f7f3 fce7 	bl	80004d8 <__aeabi_dmul>
 800cb0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb0e:	e7bd      	b.n	800ca8c <_dtoa_r+0x584>
 800cb10:	0800e680 	.word	0x0800e680
 800cb14:	0800e658 	.word	0x0800e658
 800cb18:	3ff00000 	.word	0x3ff00000
 800cb1c:	40240000 	.word	0x40240000
 800cb20:	401c0000 	.word	0x401c0000
 800cb24:	40140000 	.word	0x40140000
 800cb28:	3fe00000 	.word	0x3fe00000
 800cb2c:	9d06      	ldr	r5, [sp, #24]
 800cb2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb36:	4630      	mov	r0, r6
 800cb38:	4639      	mov	r1, r7
 800cb3a:	f7f3 fdf7 	bl	800072c <__aeabi_ddiv>
 800cb3e:	f7f3 ff7b 	bl	8000a38 <__aeabi_d2iz>
 800cb42:	4681      	mov	r9, r0
 800cb44:	f7f3 fc5e 	bl	8000404 <__aeabi_i2d>
 800cb48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb4c:	f7f3 fcc4 	bl	80004d8 <__aeabi_dmul>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4630      	mov	r0, r6
 800cb56:	4639      	mov	r1, r7
 800cb58:	f7f3 fb06 	bl	8000168 <__aeabi_dsub>
 800cb5c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800cb60:	f805 6b01 	strb.w	r6, [r5], #1
 800cb64:	9e06      	ldr	r6, [sp, #24]
 800cb66:	4602      	mov	r2, r0
 800cb68:	1bae      	subs	r6, r5, r6
 800cb6a:	45b0      	cmp	r8, r6
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	d135      	bne.n	800cbdc <_dtoa_r+0x6d4>
 800cb70:	f7f3 fafc 	bl	800016c <__adddf3>
 800cb74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb78:	4606      	mov	r6, r0
 800cb7a:	460f      	mov	r7, r1
 800cb7c:	f7f3 ff3c 	bl	80009f8 <__aeabi_dcmpgt>
 800cb80:	b9c8      	cbnz	r0, 800cbb6 <_dtoa_r+0x6ae>
 800cb82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 ff0d 	bl	80009a8 <__aeabi_dcmpeq>
 800cb8e:	b110      	cbz	r0, 800cb96 <_dtoa_r+0x68e>
 800cb90:	f019 0f01 	tst.w	r9, #1
 800cb94:	d10f      	bne.n	800cbb6 <_dtoa_r+0x6ae>
 800cb96:	4659      	mov	r1, fp
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 fac1 	bl	800d120 <_Bfree>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cba2:	702b      	strb	r3, [r5, #0]
 800cba4:	f10a 0301 	add.w	r3, sl, #1
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f43f acf3 	beq.w	800c598 <_dtoa_r+0x90>
 800cbb2:	601d      	str	r5, [r3, #0]
 800cbb4:	e4f0      	b.n	800c598 <_dtoa_r+0x90>
 800cbb6:	4657      	mov	r7, sl
 800cbb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbbc:	1e6b      	subs	r3, r5, #1
 800cbbe:	2a39      	cmp	r2, #57	; 0x39
 800cbc0:	d106      	bne.n	800cbd0 <_dtoa_r+0x6c8>
 800cbc2:	9a06      	ldr	r2, [sp, #24]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d107      	bne.n	800cbd8 <_dtoa_r+0x6d0>
 800cbc8:	2330      	movs	r3, #48	; 0x30
 800cbca:	7013      	strb	r3, [r2, #0]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	3701      	adds	r7, #1
 800cbd0:	781a      	ldrb	r2, [r3, #0]
 800cbd2:	3201      	adds	r2, #1
 800cbd4:	701a      	strb	r2, [r3, #0]
 800cbd6:	e791      	b.n	800cafc <_dtoa_r+0x5f4>
 800cbd8:	461d      	mov	r5, r3
 800cbda:	e7ed      	b.n	800cbb8 <_dtoa_r+0x6b0>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4b99      	ldr	r3, [pc, #612]	; (800ce44 <_dtoa_r+0x93c>)
 800cbe0:	f7f3 fc7a 	bl	80004d8 <__aeabi_dmul>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	4606      	mov	r6, r0
 800cbea:	460f      	mov	r7, r1
 800cbec:	f7f3 fedc 	bl	80009a8 <__aeabi_dcmpeq>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d09e      	beq.n	800cb32 <_dtoa_r+0x62a>
 800cbf4:	e7cf      	b.n	800cb96 <_dtoa_r+0x68e>
 800cbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	f000 8088 	beq.w	800cd0e <_dtoa_r+0x806>
 800cbfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cc00:	2a01      	cmp	r2, #1
 800cc02:	dc6d      	bgt.n	800cce0 <_dtoa_r+0x7d8>
 800cc04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	d066      	beq.n	800ccd8 <_dtoa_r+0x7d0>
 800cc0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc0e:	464d      	mov	r5, r9
 800cc10:	9e08      	ldr	r6, [sp, #32]
 800cc12:	9a07      	ldr	r2, [sp, #28]
 800cc14:	2101      	movs	r1, #1
 800cc16:	441a      	add	r2, r3
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4499      	add	r9, r3
 800cc1c:	9207      	str	r2, [sp, #28]
 800cc1e:	f000 fb1f 	bl	800d260 <__i2b>
 800cc22:	4607      	mov	r7, r0
 800cc24:	2d00      	cmp	r5, #0
 800cc26:	dd0b      	ble.n	800cc40 <_dtoa_r+0x738>
 800cc28:	9b07      	ldr	r3, [sp, #28]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	dd08      	ble.n	800cc40 <_dtoa_r+0x738>
 800cc2e:	42ab      	cmp	r3, r5
 800cc30:	bfa8      	it	ge
 800cc32:	462b      	movge	r3, r5
 800cc34:	9a07      	ldr	r2, [sp, #28]
 800cc36:	eba9 0903 	sub.w	r9, r9, r3
 800cc3a:	1aed      	subs	r5, r5, r3
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	9307      	str	r3, [sp, #28]
 800cc40:	9b08      	ldr	r3, [sp, #32]
 800cc42:	b1eb      	cbz	r3, 800cc80 <_dtoa_r+0x778>
 800cc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d065      	beq.n	800cd16 <_dtoa_r+0x80e>
 800cc4a:	b18e      	cbz	r6, 800cc70 <_dtoa_r+0x768>
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	4632      	mov	r2, r6
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 fba3 	bl	800d39c <__pow5mult>
 800cc56:	465a      	mov	r2, fp
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4607      	mov	r7, r0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 fb08 	bl	800d272 <__multiply>
 800cc62:	4659      	mov	r1, fp
 800cc64:	900a      	str	r0, [sp, #40]	; 0x28
 800cc66:	4620      	mov	r0, r4
 800cc68:	f000 fa5a 	bl	800d120 <_Bfree>
 800cc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc6e:	469b      	mov	fp, r3
 800cc70:	9b08      	ldr	r3, [sp, #32]
 800cc72:	1b9a      	subs	r2, r3, r6
 800cc74:	d004      	beq.n	800cc80 <_dtoa_r+0x778>
 800cc76:	4659      	mov	r1, fp
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 fb8f 	bl	800d39c <__pow5mult>
 800cc7e:	4683      	mov	fp, r0
 800cc80:	2101      	movs	r1, #1
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 faec 	bl	800d260 <__i2b>
 800cc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f000 81c6 	beq.w	800d01e <_dtoa_r+0xb16>
 800cc92:	461a      	mov	r2, r3
 800cc94:	4601      	mov	r1, r0
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 fb80 	bl	800d39c <__pow5mult>
 800cc9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc9e:	4606      	mov	r6, r0
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	dc3e      	bgt.n	800cd22 <_dtoa_r+0x81a>
 800cca4:	9b02      	ldr	r3, [sp, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d137      	bne.n	800cd1a <_dtoa_r+0x812>
 800ccaa:	9b03      	ldr	r3, [sp, #12]
 800ccac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d134      	bne.n	800cd1e <_dtoa_r+0x816>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccba:	0d1b      	lsrs	r3, r3, #20
 800ccbc:	051b      	lsls	r3, r3, #20
 800ccbe:	b12b      	cbz	r3, 800cccc <_dtoa_r+0x7c4>
 800ccc0:	9b07      	ldr	r3, [sp, #28]
 800ccc2:	f109 0901 	add.w	r9, r9, #1
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	9307      	str	r3, [sp, #28]
 800ccca:	2301      	movs	r3, #1
 800cccc:	9308      	str	r3, [sp, #32]
 800ccce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d128      	bne.n	800cd26 <_dtoa_r+0x81e>
 800ccd4:	2001      	movs	r0, #1
 800ccd6:	e02e      	b.n	800cd36 <_dtoa_r+0x82e>
 800ccd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ccda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccde:	e796      	b.n	800cc0e <_dtoa_r+0x706>
 800cce0:	9b08      	ldr	r3, [sp, #32]
 800cce2:	f108 36ff 	add.w	r6, r8, #4294967295
 800cce6:	42b3      	cmp	r3, r6
 800cce8:	bfb7      	itett	lt
 800ccea:	9b08      	ldrlt	r3, [sp, #32]
 800ccec:	1b9e      	subge	r6, r3, r6
 800ccee:	1af2      	sublt	r2, r6, r3
 800ccf0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ccf2:	bfbf      	itttt	lt
 800ccf4:	9608      	strlt	r6, [sp, #32]
 800ccf6:	189b      	addlt	r3, r3, r2
 800ccf8:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ccfa:	2600      	movlt	r6, #0
 800ccfc:	f1b8 0f00 	cmp.w	r8, #0
 800cd00:	bfb9      	ittee	lt
 800cd02:	eba9 0508 	sublt.w	r5, r9, r8
 800cd06:	2300      	movlt	r3, #0
 800cd08:	464d      	movge	r5, r9
 800cd0a:	4643      	movge	r3, r8
 800cd0c:	e781      	b.n	800cc12 <_dtoa_r+0x70a>
 800cd0e:	9e08      	ldr	r6, [sp, #32]
 800cd10:	464d      	mov	r5, r9
 800cd12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd14:	e786      	b.n	800cc24 <_dtoa_r+0x71c>
 800cd16:	9a08      	ldr	r2, [sp, #32]
 800cd18:	e7ad      	b.n	800cc76 <_dtoa_r+0x76e>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e7d6      	b.n	800cccc <_dtoa_r+0x7c4>
 800cd1e:	9b02      	ldr	r3, [sp, #8]
 800cd20:	e7d4      	b.n	800cccc <_dtoa_r+0x7c4>
 800cd22:	2300      	movs	r3, #0
 800cd24:	9308      	str	r3, [sp, #32]
 800cd26:	6933      	ldr	r3, [r6, #16]
 800cd28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd2c:	6918      	ldr	r0, [r3, #16]
 800cd2e:	f000 fa49 	bl	800d1c4 <__hi0bits>
 800cd32:	f1c0 0020 	rsb	r0, r0, #32
 800cd36:	9b07      	ldr	r3, [sp, #28]
 800cd38:	4418      	add	r0, r3
 800cd3a:	f010 001f 	ands.w	r0, r0, #31
 800cd3e:	d047      	beq.n	800cdd0 <_dtoa_r+0x8c8>
 800cd40:	f1c0 0320 	rsb	r3, r0, #32
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	dd3b      	ble.n	800cdc0 <_dtoa_r+0x8b8>
 800cd48:	9b07      	ldr	r3, [sp, #28]
 800cd4a:	f1c0 001c 	rsb	r0, r0, #28
 800cd4e:	4481      	add	r9, r0
 800cd50:	4405      	add	r5, r0
 800cd52:	4403      	add	r3, r0
 800cd54:	9307      	str	r3, [sp, #28]
 800cd56:	f1b9 0f00 	cmp.w	r9, #0
 800cd5a:	dd05      	ble.n	800cd68 <_dtoa_r+0x860>
 800cd5c:	4659      	mov	r1, fp
 800cd5e:	464a      	mov	r2, r9
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fb69 	bl	800d438 <__lshift>
 800cd66:	4683      	mov	fp, r0
 800cd68:	9b07      	ldr	r3, [sp, #28]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd05      	ble.n	800cd7a <_dtoa_r+0x872>
 800cd6e:	4631      	mov	r1, r6
 800cd70:	461a      	mov	r2, r3
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 fb60 	bl	800d438 <__lshift>
 800cd78:	4606      	mov	r6, r0
 800cd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd7c:	b353      	cbz	r3, 800cdd4 <_dtoa_r+0x8cc>
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4658      	mov	r0, fp
 800cd82:	f000 fbad 	bl	800d4e0 <__mcmp>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	da24      	bge.n	800cdd4 <_dtoa_r+0x8cc>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	4659      	mov	r1, fp
 800cd8e:	220a      	movs	r2, #10
 800cd90:	4620      	mov	r0, r4
 800cd92:	f000 f9dc 	bl	800d14e <__multadd>
 800cd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd9c:	4683      	mov	fp, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 8144 	beq.w	800d02c <_dtoa_r+0xb24>
 800cda4:	2300      	movs	r3, #0
 800cda6:	4639      	mov	r1, r7
 800cda8:	220a      	movs	r2, #10
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 f9cf 	bl	800d14e <__multadd>
 800cdb0:	9b04      	ldr	r3, [sp, #16]
 800cdb2:	4607      	mov	r7, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dc4d      	bgt.n	800ce54 <_dtoa_r+0x94c>
 800cdb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	dd4a      	ble.n	800ce54 <_dtoa_r+0x94c>
 800cdbe:	e011      	b.n	800cde4 <_dtoa_r+0x8dc>
 800cdc0:	d0c9      	beq.n	800cd56 <_dtoa_r+0x84e>
 800cdc2:	9a07      	ldr	r2, [sp, #28]
 800cdc4:	331c      	adds	r3, #28
 800cdc6:	441a      	add	r2, r3
 800cdc8:	4499      	add	r9, r3
 800cdca:	441d      	add	r5, r3
 800cdcc:	4613      	mov	r3, r2
 800cdce:	e7c1      	b.n	800cd54 <_dtoa_r+0x84c>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	e7f6      	b.n	800cdc2 <_dtoa_r+0x8ba>
 800cdd4:	f1b8 0f00 	cmp.w	r8, #0
 800cdd8:	dc36      	bgt.n	800ce48 <_dtoa_r+0x940>
 800cdda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	dd33      	ble.n	800ce48 <_dtoa_r+0x940>
 800cde0:	f8cd 8010 	str.w	r8, [sp, #16]
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	b963      	cbnz	r3, 800ce02 <_dtoa_r+0x8fa>
 800cde8:	4631      	mov	r1, r6
 800cdea:	2205      	movs	r2, #5
 800cdec:	4620      	mov	r0, r4
 800cdee:	f000 f9ae 	bl	800d14e <__multadd>
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	4658      	mov	r0, fp
 800cdf8:	f000 fb72 	bl	800d4e0 <__mcmp>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	f73f add3 	bgt.w	800c9a8 <_dtoa_r+0x4a0>
 800ce02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ce04:	9d06      	ldr	r5, [sp, #24]
 800ce06:	ea6f 0a03 	mvn.w	sl, r3
 800ce0a:	f04f 0900 	mov.w	r9, #0
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 f985 	bl	800d120 <_Bfree>
 800ce16:	2f00      	cmp	r7, #0
 800ce18:	f43f aebd 	beq.w	800cb96 <_dtoa_r+0x68e>
 800ce1c:	f1b9 0f00 	cmp.w	r9, #0
 800ce20:	d005      	beq.n	800ce2e <_dtoa_r+0x926>
 800ce22:	45b9      	cmp	r9, r7
 800ce24:	d003      	beq.n	800ce2e <_dtoa_r+0x926>
 800ce26:	4649      	mov	r1, r9
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 f979 	bl	800d120 <_Bfree>
 800ce2e:	4639      	mov	r1, r7
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 f975 	bl	800d120 <_Bfree>
 800ce36:	e6ae      	b.n	800cb96 <_dtoa_r+0x68e>
 800ce38:	2600      	movs	r6, #0
 800ce3a:	4637      	mov	r7, r6
 800ce3c:	e7e1      	b.n	800ce02 <_dtoa_r+0x8fa>
 800ce3e:	46ba      	mov	sl, r7
 800ce40:	4637      	mov	r7, r6
 800ce42:	e5b1      	b.n	800c9a8 <_dtoa_r+0x4a0>
 800ce44:	40240000 	.word	0x40240000
 800ce48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 80f3 	beq.w	800d03a <_dtoa_r+0xb32>
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	dd05      	ble.n	800ce64 <_dtoa_r+0x95c>
 800ce58:	4639      	mov	r1, r7
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f000 faeb 	bl	800d438 <__lshift>
 800ce62:	4607      	mov	r7, r0
 800ce64:	9b08      	ldr	r3, [sp, #32]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d04c      	beq.n	800cf04 <_dtoa_r+0x9fc>
 800ce6a:	6879      	ldr	r1, [r7, #4]
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 f923 	bl	800d0b8 <_Balloc>
 800ce72:	4605      	mov	r5, r0
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	f107 010c 	add.w	r1, r7, #12
 800ce7a:	3202      	adds	r2, #2
 800ce7c:	0092      	lsls	r2, r2, #2
 800ce7e:	300c      	adds	r0, #12
 800ce80:	f7fe fe04 	bl	800ba8c <memcpy>
 800ce84:	2201      	movs	r2, #1
 800ce86:	4629      	mov	r1, r5
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 fad5 	bl	800d438 <__lshift>
 800ce8e:	46b9      	mov	r9, r7
 800ce90:	4607      	mov	r7, r0
 800ce92:	9b06      	ldr	r3, [sp, #24]
 800ce94:	9307      	str	r3, [sp, #28]
 800ce96:	9b02      	ldr	r3, [sp, #8]
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	9308      	str	r3, [sp, #32]
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4658      	mov	r0, fp
 800cea2:	f7ff faa1 	bl	800c3e8 <quorem>
 800cea6:	4649      	mov	r1, r9
 800cea8:	4605      	mov	r5, r0
 800ceaa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ceae:	4658      	mov	r0, fp
 800ceb0:	f000 fb16 	bl	800d4e0 <__mcmp>
 800ceb4:	463a      	mov	r2, r7
 800ceb6:	9002      	str	r0, [sp, #8]
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4620      	mov	r0, r4
 800cebc:	f000 fb2a 	bl	800d514 <__mdiff>
 800cec0:	68c3      	ldr	r3, [r0, #12]
 800cec2:	4602      	mov	r2, r0
 800cec4:	bb03      	cbnz	r3, 800cf08 <_dtoa_r+0xa00>
 800cec6:	4601      	mov	r1, r0
 800cec8:	9009      	str	r0, [sp, #36]	; 0x24
 800ceca:	4658      	mov	r0, fp
 800cecc:	f000 fb08 	bl	800d4e0 <__mcmp>
 800ced0:	4603      	mov	r3, r0
 800ced2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced4:	4611      	mov	r1, r2
 800ced6:	4620      	mov	r0, r4
 800ced8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceda:	f000 f921 	bl	800d120 <_Bfree>
 800cede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee0:	b9a3      	cbnz	r3, 800cf0c <_dtoa_r+0xa04>
 800cee2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cee4:	b992      	cbnz	r2, 800cf0c <_dtoa_r+0xa04>
 800cee6:	9a08      	ldr	r2, [sp, #32]
 800cee8:	b982      	cbnz	r2, 800cf0c <_dtoa_r+0xa04>
 800ceea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ceee:	d029      	beq.n	800cf44 <_dtoa_r+0xa3c>
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	dd01      	ble.n	800cefa <_dtoa_r+0x9f2>
 800cef6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cefa:	9b07      	ldr	r3, [sp, #28]
 800cefc:	1c5d      	adds	r5, r3, #1
 800cefe:	f883 8000 	strb.w	r8, [r3]
 800cf02:	e784      	b.n	800ce0e <_dtoa_r+0x906>
 800cf04:	4638      	mov	r0, r7
 800cf06:	e7c2      	b.n	800ce8e <_dtoa_r+0x986>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e7e3      	b.n	800ced4 <_dtoa_r+0x9cc>
 800cf0c:	9a02      	ldr	r2, [sp, #8]
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	db04      	blt.n	800cf1c <_dtoa_r+0xa14>
 800cf12:	d123      	bne.n	800cf5c <_dtoa_r+0xa54>
 800cf14:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cf16:	bb0a      	cbnz	r2, 800cf5c <_dtoa_r+0xa54>
 800cf18:	9a08      	ldr	r2, [sp, #32]
 800cf1a:	b9fa      	cbnz	r2, 800cf5c <_dtoa_r+0xa54>
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	ddec      	ble.n	800cefa <_dtoa_r+0x9f2>
 800cf20:	4659      	mov	r1, fp
 800cf22:	2201      	movs	r2, #1
 800cf24:	4620      	mov	r0, r4
 800cf26:	f000 fa87 	bl	800d438 <__lshift>
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4683      	mov	fp, r0
 800cf2e:	f000 fad7 	bl	800d4e0 <__mcmp>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	dc03      	bgt.n	800cf3e <_dtoa_r+0xa36>
 800cf36:	d1e0      	bne.n	800cefa <_dtoa_r+0x9f2>
 800cf38:	f018 0f01 	tst.w	r8, #1
 800cf3c:	d0dd      	beq.n	800cefa <_dtoa_r+0x9f2>
 800cf3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf42:	d1d8      	bne.n	800cef6 <_dtoa_r+0x9ee>
 800cf44:	9b07      	ldr	r3, [sp, #28]
 800cf46:	9a07      	ldr	r2, [sp, #28]
 800cf48:	1c5d      	adds	r5, r3, #1
 800cf4a:	2339      	movs	r3, #57	; 0x39
 800cf4c:	7013      	strb	r3, [r2, #0]
 800cf4e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf52:	1e6a      	subs	r2, r5, #1
 800cf54:	2b39      	cmp	r3, #57	; 0x39
 800cf56:	d04d      	beq.n	800cff4 <_dtoa_r+0xaec>
 800cf58:	3301      	adds	r3, #1
 800cf5a:	e052      	b.n	800d002 <_dtoa_r+0xafa>
 800cf5c:	9a07      	ldr	r2, [sp, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f102 0501 	add.w	r5, r2, #1
 800cf64:	dd06      	ble.n	800cf74 <_dtoa_r+0xa6c>
 800cf66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf6a:	d0eb      	beq.n	800cf44 <_dtoa_r+0xa3c>
 800cf6c:	f108 0801 	add.w	r8, r8, #1
 800cf70:	9b07      	ldr	r3, [sp, #28]
 800cf72:	e7c4      	b.n	800cefe <_dtoa_r+0x9f6>
 800cf74:	9b06      	ldr	r3, [sp, #24]
 800cf76:	9a04      	ldr	r2, [sp, #16]
 800cf78:	1aeb      	subs	r3, r5, r3
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cf80:	d021      	beq.n	800cfc6 <_dtoa_r+0xabe>
 800cf82:	4659      	mov	r1, fp
 800cf84:	2300      	movs	r3, #0
 800cf86:	220a      	movs	r2, #10
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 f8e0 	bl	800d14e <__multadd>
 800cf8e:	45b9      	cmp	r9, r7
 800cf90:	4683      	mov	fp, r0
 800cf92:	f04f 0300 	mov.w	r3, #0
 800cf96:	f04f 020a 	mov.w	r2, #10
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	d105      	bne.n	800cfac <_dtoa_r+0xaa4>
 800cfa0:	f000 f8d5 	bl	800d14e <__multadd>
 800cfa4:	4681      	mov	r9, r0
 800cfa6:	4607      	mov	r7, r0
 800cfa8:	9507      	str	r5, [sp, #28]
 800cfaa:	e778      	b.n	800ce9e <_dtoa_r+0x996>
 800cfac:	f000 f8cf 	bl	800d14e <__multadd>
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	4681      	mov	r9, r0
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	220a      	movs	r2, #10
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 f8c8 	bl	800d14e <__multadd>
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	e7f2      	b.n	800cfa8 <_dtoa_r+0xaa0>
 800cfc2:	f04f 0900 	mov.w	r9, #0
 800cfc6:	4659      	mov	r1, fp
 800cfc8:	2201      	movs	r2, #1
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f000 fa34 	bl	800d438 <__lshift>
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4683      	mov	fp, r0
 800cfd4:	f000 fa84 	bl	800d4e0 <__mcmp>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	dcb8      	bgt.n	800cf4e <_dtoa_r+0xa46>
 800cfdc:	d102      	bne.n	800cfe4 <_dtoa_r+0xadc>
 800cfde:	f018 0f01 	tst.w	r8, #1
 800cfe2:	d1b4      	bne.n	800cf4e <_dtoa_r+0xa46>
 800cfe4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfe8:	1e6a      	subs	r2, r5, #1
 800cfea:	2b30      	cmp	r3, #48	; 0x30
 800cfec:	f47f af0f 	bne.w	800ce0e <_dtoa_r+0x906>
 800cff0:	4615      	mov	r5, r2
 800cff2:	e7f7      	b.n	800cfe4 <_dtoa_r+0xadc>
 800cff4:	9b06      	ldr	r3, [sp, #24]
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d105      	bne.n	800d006 <_dtoa_r+0xafe>
 800cffa:	2331      	movs	r3, #49	; 0x31
 800cffc:	9a06      	ldr	r2, [sp, #24]
 800cffe:	f10a 0a01 	add.w	sl, sl, #1
 800d002:	7013      	strb	r3, [r2, #0]
 800d004:	e703      	b.n	800ce0e <_dtoa_r+0x906>
 800d006:	4615      	mov	r5, r2
 800d008:	e7a1      	b.n	800cf4e <_dtoa_r+0xa46>
 800d00a:	4b17      	ldr	r3, [pc, #92]	; (800d068 <_dtoa_r+0xb60>)
 800d00c:	f7ff bae1 	b.w	800c5d2 <_dtoa_r+0xca>
 800d010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d012:	2b00      	cmp	r3, #0
 800d014:	f47f aabb 	bne.w	800c58e <_dtoa_r+0x86>
 800d018:	4b14      	ldr	r3, [pc, #80]	; (800d06c <_dtoa_r+0xb64>)
 800d01a:	f7ff bada 	b.w	800c5d2 <_dtoa_r+0xca>
 800d01e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d020:	2b01      	cmp	r3, #1
 800d022:	f77f ae3f 	ble.w	800cca4 <_dtoa_r+0x79c>
 800d026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d028:	9308      	str	r3, [sp, #32]
 800d02a:	e653      	b.n	800ccd4 <_dtoa_r+0x7cc>
 800d02c:	9b04      	ldr	r3, [sp, #16]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	dc03      	bgt.n	800d03a <_dtoa_r+0xb32>
 800d032:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d034:	2b02      	cmp	r3, #2
 800d036:	f73f aed5 	bgt.w	800cde4 <_dtoa_r+0x8dc>
 800d03a:	9d06      	ldr	r5, [sp, #24]
 800d03c:	4631      	mov	r1, r6
 800d03e:	4658      	mov	r0, fp
 800d040:	f7ff f9d2 	bl	800c3e8 <quorem>
 800d044:	9b06      	ldr	r3, [sp, #24]
 800d046:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d04a:	f805 8b01 	strb.w	r8, [r5], #1
 800d04e:	9a04      	ldr	r2, [sp, #16]
 800d050:	1aeb      	subs	r3, r5, r3
 800d052:	429a      	cmp	r2, r3
 800d054:	ddb5      	ble.n	800cfc2 <_dtoa_r+0xaba>
 800d056:	4659      	mov	r1, fp
 800d058:	2300      	movs	r3, #0
 800d05a:	220a      	movs	r2, #10
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 f876 	bl	800d14e <__multadd>
 800d062:	4683      	mov	fp, r0
 800d064:	e7ea      	b.n	800d03c <_dtoa_r+0xb34>
 800d066:	bf00      	nop
 800d068:	0800e77b 	.word	0x0800e77b
 800d06c:	0800e64a 	.word	0x0800e64a

0800d070 <_localeconv_r>:
 800d070:	4b04      	ldr	r3, [pc, #16]	; (800d084 <_localeconv_r+0x14>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6a18      	ldr	r0, [r3, #32]
 800d076:	4b04      	ldr	r3, [pc, #16]	; (800d088 <_localeconv_r+0x18>)
 800d078:	2800      	cmp	r0, #0
 800d07a:	bf08      	it	eq
 800d07c:	4618      	moveq	r0, r3
 800d07e:	30f0      	adds	r0, #240	; 0xf0
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	20000184 	.word	0x20000184
 800d088:	200001e8 	.word	0x200001e8

0800d08c <malloc>:
 800d08c:	4b02      	ldr	r3, [pc, #8]	; (800d098 <malloc+0xc>)
 800d08e:	4601      	mov	r1, r0
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	f000 bb47 	b.w	800d724 <_malloc_r>
 800d096:	bf00      	nop
 800d098:	20000184 	.word	0x20000184

0800d09c <memchr>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	b2c9      	uxtb	r1, r1
 800d0a0:	4402      	add	r2, r0
 800d0a2:	4290      	cmp	r0, r2
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	d101      	bne.n	800d0ac <memchr+0x10>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	e003      	b.n	800d0b4 <memchr+0x18>
 800d0ac:	781c      	ldrb	r4, [r3, #0]
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	428c      	cmp	r4, r1
 800d0b2:	d1f6      	bne.n	800d0a2 <memchr+0x6>
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	bd10      	pop	{r4, pc}

0800d0b8 <_Balloc>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d0bc:	4604      	mov	r4, r0
 800d0be:	460e      	mov	r6, r1
 800d0c0:	b93d      	cbnz	r5, 800d0d2 <_Balloc+0x1a>
 800d0c2:	2010      	movs	r0, #16
 800d0c4:	f7ff ffe2 	bl	800d08c <malloc>
 800d0c8:	6260      	str	r0, [r4, #36]	; 0x24
 800d0ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d0ce:	6005      	str	r5, [r0, #0]
 800d0d0:	60c5      	str	r5, [r0, #12]
 800d0d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d0d4:	68eb      	ldr	r3, [r5, #12]
 800d0d6:	b183      	cbz	r3, 800d0fa <_Balloc+0x42>
 800d0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d0e0:	b9b8      	cbnz	r0, 800d112 <_Balloc+0x5a>
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	fa01 f506 	lsl.w	r5, r1, r6
 800d0e8:	1d6a      	adds	r2, r5, #5
 800d0ea:	0092      	lsls	r2, r2, #2
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f000 fabe 	bl	800d66e <_calloc_r>
 800d0f2:	b160      	cbz	r0, 800d10e <_Balloc+0x56>
 800d0f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d0f8:	e00e      	b.n	800d118 <_Balloc+0x60>
 800d0fa:	2221      	movs	r2, #33	; 0x21
 800d0fc:	2104      	movs	r1, #4
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 fab5 	bl	800d66e <_calloc_r>
 800d104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d106:	60e8      	str	r0, [r5, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1e4      	bne.n	800d0d8 <_Balloc+0x20>
 800d10e:	2000      	movs	r0, #0
 800d110:	bd70      	pop	{r4, r5, r6, pc}
 800d112:	6802      	ldr	r2, [r0, #0]
 800d114:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d118:	2300      	movs	r3, #0
 800d11a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d11e:	e7f7      	b.n	800d110 <_Balloc+0x58>

0800d120 <_Bfree>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d124:	4606      	mov	r6, r0
 800d126:	460d      	mov	r5, r1
 800d128:	b93c      	cbnz	r4, 800d13a <_Bfree+0x1a>
 800d12a:	2010      	movs	r0, #16
 800d12c:	f7ff ffae 	bl	800d08c <malloc>
 800d130:	6270      	str	r0, [r6, #36]	; 0x24
 800d132:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d136:	6004      	str	r4, [r0, #0]
 800d138:	60c4      	str	r4, [r0, #12]
 800d13a:	b13d      	cbz	r5, 800d14c <_Bfree+0x2c>
 800d13c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d13e:	686a      	ldr	r2, [r5, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d146:	6029      	str	r1, [r5, #0]
 800d148:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d14c:	bd70      	pop	{r4, r5, r6, pc}

0800d14e <__multadd>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	461f      	mov	r7, r3
 800d154:	4606      	mov	r6, r0
 800d156:	460c      	mov	r4, r1
 800d158:	2300      	movs	r3, #0
 800d15a:	690d      	ldr	r5, [r1, #16]
 800d15c:	f101 0c14 	add.w	ip, r1, #20
 800d160:	f8dc 0000 	ldr.w	r0, [ip]
 800d164:	3301      	adds	r3, #1
 800d166:	b281      	uxth	r1, r0
 800d168:	fb02 7101 	mla	r1, r2, r1, r7
 800d16c:	0c00      	lsrs	r0, r0, #16
 800d16e:	0c0f      	lsrs	r7, r1, #16
 800d170:	fb02 7000 	mla	r0, r2, r0, r7
 800d174:	b289      	uxth	r1, r1
 800d176:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d17a:	429d      	cmp	r5, r3
 800d17c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d180:	f84c 1b04 	str.w	r1, [ip], #4
 800d184:	dcec      	bgt.n	800d160 <__multadd+0x12>
 800d186:	b1d7      	cbz	r7, 800d1be <__multadd+0x70>
 800d188:	68a3      	ldr	r3, [r4, #8]
 800d18a:	42ab      	cmp	r3, r5
 800d18c:	dc12      	bgt.n	800d1b4 <__multadd+0x66>
 800d18e:	6861      	ldr	r1, [r4, #4]
 800d190:	4630      	mov	r0, r6
 800d192:	3101      	adds	r1, #1
 800d194:	f7ff ff90 	bl	800d0b8 <_Balloc>
 800d198:	4680      	mov	r8, r0
 800d19a:	6922      	ldr	r2, [r4, #16]
 800d19c:	f104 010c 	add.w	r1, r4, #12
 800d1a0:	3202      	adds	r2, #2
 800d1a2:	0092      	lsls	r2, r2, #2
 800d1a4:	300c      	adds	r0, #12
 800d1a6:	f7fe fc71 	bl	800ba8c <memcpy>
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff ffb7 	bl	800d120 <_Bfree>
 800d1b2:	4644      	mov	r4, r8
 800d1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	615f      	str	r7, [r3, #20]
 800d1bc:	6125      	str	r5, [r4, #16]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1c4 <__hi0bits>:
 800d1c4:	0c02      	lsrs	r2, r0, #16
 800d1c6:	0412      	lsls	r2, r2, #16
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	b9b2      	cbnz	r2, 800d1fa <__hi0bits+0x36>
 800d1cc:	0403      	lsls	r3, r0, #16
 800d1ce:	2010      	movs	r0, #16
 800d1d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d1d4:	bf04      	itt	eq
 800d1d6:	021b      	lsleq	r3, r3, #8
 800d1d8:	3008      	addeq	r0, #8
 800d1da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d1de:	bf04      	itt	eq
 800d1e0:	011b      	lsleq	r3, r3, #4
 800d1e2:	3004      	addeq	r0, #4
 800d1e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d1e8:	bf04      	itt	eq
 800d1ea:	009b      	lsleq	r3, r3, #2
 800d1ec:	3002      	addeq	r0, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	db06      	blt.n	800d200 <__hi0bits+0x3c>
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	d503      	bpl.n	800d1fe <__hi0bits+0x3a>
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	4770      	bx	lr
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e7e8      	b.n	800d1d0 <__hi0bits+0xc>
 800d1fe:	2020      	movs	r0, #32
 800d200:	4770      	bx	lr

0800d202 <__lo0bits>:
 800d202:	6803      	ldr	r3, [r0, #0]
 800d204:	4601      	mov	r1, r0
 800d206:	f013 0207 	ands.w	r2, r3, #7
 800d20a:	d00b      	beq.n	800d224 <__lo0bits+0x22>
 800d20c:	07da      	lsls	r2, r3, #31
 800d20e:	d423      	bmi.n	800d258 <__lo0bits+0x56>
 800d210:	0798      	lsls	r0, r3, #30
 800d212:	bf49      	itett	mi
 800d214:	085b      	lsrmi	r3, r3, #1
 800d216:	089b      	lsrpl	r3, r3, #2
 800d218:	2001      	movmi	r0, #1
 800d21a:	600b      	strmi	r3, [r1, #0]
 800d21c:	bf5c      	itt	pl
 800d21e:	600b      	strpl	r3, [r1, #0]
 800d220:	2002      	movpl	r0, #2
 800d222:	4770      	bx	lr
 800d224:	b298      	uxth	r0, r3
 800d226:	b9a8      	cbnz	r0, 800d254 <__lo0bits+0x52>
 800d228:	2010      	movs	r0, #16
 800d22a:	0c1b      	lsrs	r3, r3, #16
 800d22c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d230:	bf04      	itt	eq
 800d232:	0a1b      	lsreq	r3, r3, #8
 800d234:	3008      	addeq	r0, #8
 800d236:	071a      	lsls	r2, r3, #28
 800d238:	bf04      	itt	eq
 800d23a:	091b      	lsreq	r3, r3, #4
 800d23c:	3004      	addeq	r0, #4
 800d23e:	079a      	lsls	r2, r3, #30
 800d240:	bf04      	itt	eq
 800d242:	089b      	lsreq	r3, r3, #2
 800d244:	3002      	addeq	r0, #2
 800d246:	07da      	lsls	r2, r3, #31
 800d248:	d402      	bmi.n	800d250 <__lo0bits+0x4e>
 800d24a:	085b      	lsrs	r3, r3, #1
 800d24c:	d006      	beq.n	800d25c <__lo0bits+0x5a>
 800d24e:	3001      	adds	r0, #1
 800d250:	600b      	str	r3, [r1, #0]
 800d252:	4770      	bx	lr
 800d254:	4610      	mov	r0, r2
 800d256:	e7e9      	b.n	800d22c <__lo0bits+0x2a>
 800d258:	2000      	movs	r0, #0
 800d25a:	4770      	bx	lr
 800d25c:	2020      	movs	r0, #32
 800d25e:	4770      	bx	lr

0800d260 <__i2b>:
 800d260:	b510      	push	{r4, lr}
 800d262:	460c      	mov	r4, r1
 800d264:	2101      	movs	r1, #1
 800d266:	f7ff ff27 	bl	800d0b8 <_Balloc>
 800d26a:	2201      	movs	r2, #1
 800d26c:	6144      	str	r4, [r0, #20]
 800d26e:	6102      	str	r2, [r0, #16]
 800d270:	bd10      	pop	{r4, pc}

0800d272 <__multiply>:
 800d272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d276:	4614      	mov	r4, r2
 800d278:	690a      	ldr	r2, [r1, #16]
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	4688      	mov	r8, r1
 800d27e:	429a      	cmp	r2, r3
 800d280:	bfbe      	ittt	lt
 800d282:	460b      	movlt	r3, r1
 800d284:	46a0      	movlt	r8, r4
 800d286:	461c      	movlt	r4, r3
 800d288:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d28c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d290:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d298:	eb07 0609 	add.w	r6, r7, r9
 800d29c:	42b3      	cmp	r3, r6
 800d29e:	bfb8      	it	lt
 800d2a0:	3101      	addlt	r1, #1
 800d2a2:	f7ff ff09 	bl	800d0b8 <_Balloc>
 800d2a6:	f100 0514 	add.w	r5, r0, #20
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d2b2:	4573      	cmp	r3, lr
 800d2b4:	d316      	bcc.n	800d2e4 <__multiply+0x72>
 800d2b6:	f104 0214 	add.w	r2, r4, #20
 800d2ba:	f108 0114 	add.w	r1, r8, #20
 800d2be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d2c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	9b00      	ldr	r3, [sp, #0]
 800d2ca:	9201      	str	r2, [sp, #4]
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d80c      	bhi.n	800d2ea <__multiply+0x78>
 800d2d0:	2e00      	cmp	r6, #0
 800d2d2:	dd03      	ble.n	800d2dc <__multiply+0x6a>
 800d2d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d05d      	beq.n	800d398 <__multiply+0x126>
 800d2dc:	6106      	str	r6, [r0, #16]
 800d2de:	b003      	add	sp, #12
 800d2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e4:	f843 2b04 	str.w	r2, [r3], #4
 800d2e8:	e7e3      	b.n	800d2b2 <__multiply+0x40>
 800d2ea:	f8b2 b000 	ldrh.w	fp, [r2]
 800d2ee:	f1bb 0f00 	cmp.w	fp, #0
 800d2f2:	d023      	beq.n	800d33c <__multiply+0xca>
 800d2f4:	4689      	mov	r9, r1
 800d2f6:	46ac      	mov	ip, r5
 800d2f8:	f04f 0800 	mov.w	r8, #0
 800d2fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800d300:	f8dc a000 	ldr.w	sl, [ip]
 800d304:	b2a3      	uxth	r3, r4
 800d306:	fa1f fa8a 	uxth.w	sl, sl
 800d30a:	fb0b a303 	mla	r3, fp, r3, sl
 800d30e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d312:	f8dc 4000 	ldr.w	r4, [ip]
 800d316:	4443      	add	r3, r8
 800d318:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d31c:	fb0b 840a 	mla	r4, fp, sl, r8
 800d320:	46e2      	mov	sl, ip
 800d322:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d326:	b29b      	uxth	r3, r3
 800d328:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d32c:	454f      	cmp	r7, r9
 800d32e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d332:	f84a 3b04 	str.w	r3, [sl], #4
 800d336:	d82b      	bhi.n	800d390 <__multiply+0x11e>
 800d338:	f8cc 8004 	str.w	r8, [ip, #4]
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	3204      	adds	r2, #4
 800d340:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d344:	f1ba 0f00 	cmp.w	sl, #0
 800d348:	d020      	beq.n	800d38c <__multiply+0x11a>
 800d34a:	4689      	mov	r9, r1
 800d34c:	46a8      	mov	r8, r5
 800d34e:	f04f 0b00 	mov.w	fp, #0
 800d352:	682b      	ldr	r3, [r5, #0]
 800d354:	f8b9 c000 	ldrh.w	ip, [r9]
 800d358:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	fb0a 440c 	mla	r4, sl, ip, r4
 800d362:	46c4      	mov	ip, r8
 800d364:	445c      	add	r4, fp
 800d366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d36a:	f84c 3b04 	str.w	r3, [ip], #4
 800d36e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d372:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d376:	0c1b      	lsrs	r3, r3, #16
 800d378:	fb0a b303 	mla	r3, sl, r3, fp
 800d37c:	454f      	cmp	r7, r9
 800d37e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d382:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d386:	d805      	bhi.n	800d394 <__multiply+0x122>
 800d388:	f8c8 3004 	str.w	r3, [r8, #4]
 800d38c:	3504      	adds	r5, #4
 800d38e:	e79b      	b.n	800d2c8 <__multiply+0x56>
 800d390:	46d4      	mov	ip, sl
 800d392:	e7b3      	b.n	800d2fc <__multiply+0x8a>
 800d394:	46e0      	mov	r8, ip
 800d396:	e7dd      	b.n	800d354 <__multiply+0xe2>
 800d398:	3e01      	subs	r6, #1
 800d39a:	e799      	b.n	800d2d0 <__multiply+0x5e>

0800d39c <__pow5mult>:
 800d39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a0:	4615      	mov	r5, r2
 800d3a2:	f012 0203 	ands.w	r2, r2, #3
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	460f      	mov	r7, r1
 800d3aa:	d007      	beq.n	800d3bc <__pow5mult+0x20>
 800d3ac:	4c21      	ldr	r4, [pc, #132]	; (800d434 <__pow5mult+0x98>)
 800d3ae:	3a01      	subs	r2, #1
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3b6:	f7ff feca 	bl	800d14e <__multadd>
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	10ad      	asrs	r5, r5, #2
 800d3be:	d035      	beq.n	800d42c <__pow5mult+0x90>
 800d3c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3c2:	b93c      	cbnz	r4, 800d3d4 <__pow5mult+0x38>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f7ff fe61 	bl	800d08c <malloc>
 800d3ca:	6270      	str	r0, [r6, #36]	; 0x24
 800d3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3d0:	6004      	str	r4, [r0, #0]
 800d3d2:	60c4      	str	r4, [r0, #12]
 800d3d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3dc:	b94c      	cbnz	r4, 800d3f2 <__pow5mult+0x56>
 800d3de:	f240 2171 	movw	r1, #625	; 0x271
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f7ff ff3c 	bl	800d260 <__i2b>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3f0:	6003      	str	r3, [r0, #0]
 800d3f2:	f04f 0800 	mov.w	r8, #0
 800d3f6:	07eb      	lsls	r3, r5, #31
 800d3f8:	d50a      	bpl.n	800d410 <__pow5mult+0x74>
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4630      	mov	r0, r6
 800d400:	f7ff ff37 	bl	800d272 <__multiply>
 800d404:	4681      	mov	r9, r0
 800d406:	4639      	mov	r1, r7
 800d408:	4630      	mov	r0, r6
 800d40a:	f7ff fe89 	bl	800d120 <_Bfree>
 800d40e:	464f      	mov	r7, r9
 800d410:	106d      	asrs	r5, r5, #1
 800d412:	d00b      	beq.n	800d42c <__pow5mult+0x90>
 800d414:	6820      	ldr	r0, [r4, #0]
 800d416:	b938      	cbnz	r0, 800d428 <__pow5mult+0x8c>
 800d418:	4622      	mov	r2, r4
 800d41a:	4621      	mov	r1, r4
 800d41c:	4630      	mov	r0, r6
 800d41e:	f7ff ff28 	bl	800d272 <__multiply>
 800d422:	6020      	str	r0, [r4, #0]
 800d424:	f8c0 8000 	str.w	r8, [r0]
 800d428:	4604      	mov	r4, r0
 800d42a:	e7e4      	b.n	800d3f6 <__pow5mult+0x5a>
 800d42c:	4638      	mov	r0, r7
 800d42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d432:	bf00      	nop
 800d434:	0800e748 	.word	0x0800e748

0800d438 <__lshift>:
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	460c      	mov	r4, r1
 800d43e:	4607      	mov	r7, r0
 800d440:	4616      	mov	r6, r2
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d448:	eb0a 0903 	add.w	r9, sl, r3
 800d44c:	6849      	ldr	r1, [r1, #4]
 800d44e:	68a3      	ldr	r3, [r4, #8]
 800d450:	f109 0501 	add.w	r5, r9, #1
 800d454:	42ab      	cmp	r3, r5
 800d456:	db32      	blt.n	800d4be <__lshift+0x86>
 800d458:	4638      	mov	r0, r7
 800d45a:	f7ff fe2d 	bl	800d0b8 <_Balloc>
 800d45e:	2300      	movs	r3, #0
 800d460:	4680      	mov	r8, r0
 800d462:	461a      	mov	r2, r3
 800d464:	f100 0114 	add.w	r1, r0, #20
 800d468:	4553      	cmp	r3, sl
 800d46a:	db2b      	blt.n	800d4c4 <__lshift+0x8c>
 800d46c:	6920      	ldr	r0, [r4, #16]
 800d46e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d472:	f104 0314 	add.w	r3, r4, #20
 800d476:	f016 021f 	ands.w	r2, r6, #31
 800d47a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d47e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d482:	d025      	beq.n	800d4d0 <__lshift+0x98>
 800d484:	2000      	movs	r0, #0
 800d486:	f1c2 0e20 	rsb	lr, r2, #32
 800d48a:	468a      	mov	sl, r1
 800d48c:	681e      	ldr	r6, [r3, #0]
 800d48e:	4096      	lsls	r6, r2
 800d490:	4330      	orrs	r0, r6
 800d492:	f84a 0b04 	str.w	r0, [sl], #4
 800d496:	f853 0b04 	ldr.w	r0, [r3], #4
 800d49a:	459c      	cmp	ip, r3
 800d49c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d4a0:	d814      	bhi.n	800d4cc <__lshift+0x94>
 800d4a2:	6048      	str	r0, [r1, #4]
 800d4a4:	b108      	cbz	r0, 800d4aa <__lshift+0x72>
 800d4a6:	f109 0502 	add.w	r5, r9, #2
 800d4aa:	3d01      	subs	r5, #1
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f7ff fe34 	bl	800d120 <_Bfree>
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4be:	3101      	adds	r1, #1
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	e7c7      	b.n	800d454 <__lshift+0x1c>
 800d4c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	e7cd      	b.n	800d468 <__lshift+0x30>
 800d4cc:	4651      	mov	r1, sl
 800d4ce:	e7dc      	b.n	800d48a <__lshift+0x52>
 800d4d0:	3904      	subs	r1, #4
 800d4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4d6:	459c      	cmp	ip, r3
 800d4d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4dc:	d8f9      	bhi.n	800d4d2 <__lshift+0x9a>
 800d4de:	e7e4      	b.n	800d4aa <__lshift+0x72>

0800d4e0 <__mcmp>:
 800d4e0:	6903      	ldr	r3, [r0, #16]
 800d4e2:	690a      	ldr	r2, [r1, #16]
 800d4e4:	b530      	push	{r4, r5, lr}
 800d4e6:	1a9b      	subs	r3, r3, r2
 800d4e8:	d10c      	bne.n	800d504 <__mcmp+0x24>
 800d4ea:	0092      	lsls	r2, r2, #2
 800d4ec:	3014      	adds	r0, #20
 800d4ee:	3114      	adds	r1, #20
 800d4f0:	1884      	adds	r4, r0, r2
 800d4f2:	4411      	add	r1, r2
 800d4f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4fc:	4295      	cmp	r5, r2
 800d4fe:	d003      	beq.n	800d508 <__mcmp+0x28>
 800d500:	d305      	bcc.n	800d50e <__mcmp+0x2e>
 800d502:	2301      	movs	r3, #1
 800d504:	4618      	mov	r0, r3
 800d506:	bd30      	pop	{r4, r5, pc}
 800d508:	42a0      	cmp	r0, r4
 800d50a:	d3f3      	bcc.n	800d4f4 <__mcmp+0x14>
 800d50c:	e7fa      	b.n	800d504 <__mcmp+0x24>
 800d50e:	f04f 33ff 	mov.w	r3, #4294967295
 800d512:	e7f7      	b.n	800d504 <__mcmp+0x24>

0800d514 <__mdiff>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	460d      	mov	r5, r1
 800d51a:	4607      	mov	r7, r0
 800d51c:	4611      	mov	r1, r2
 800d51e:	4628      	mov	r0, r5
 800d520:	4614      	mov	r4, r2
 800d522:	f7ff ffdd 	bl	800d4e0 <__mcmp>
 800d526:	1e06      	subs	r6, r0, #0
 800d528:	d108      	bne.n	800d53c <__mdiff+0x28>
 800d52a:	4631      	mov	r1, r6
 800d52c:	4638      	mov	r0, r7
 800d52e:	f7ff fdc3 	bl	800d0b8 <_Balloc>
 800d532:	2301      	movs	r3, #1
 800d534:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53c:	bfa4      	itt	ge
 800d53e:	4623      	movge	r3, r4
 800d540:	462c      	movge	r4, r5
 800d542:	4638      	mov	r0, r7
 800d544:	6861      	ldr	r1, [r4, #4]
 800d546:	bfa6      	itte	ge
 800d548:	461d      	movge	r5, r3
 800d54a:	2600      	movge	r6, #0
 800d54c:	2601      	movlt	r6, #1
 800d54e:	f7ff fdb3 	bl	800d0b8 <_Balloc>
 800d552:	f04f 0e00 	mov.w	lr, #0
 800d556:	60c6      	str	r6, [r0, #12]
 800d558:	692b      	ldr	r3, [r5, #16]
 800d55a:	6926      	ldr	r6, [r4, #16]
 800d55c:	f104 0214 	add.w	r2, r4, #20
 800d560:	f105 0914 	add.w	r9, r5, #20
 800d564:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d568:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d56c:	f100 0114 	add.w	r1, r0, #20
 800d570:	f852 ab04 	ldr.w	sl, [r2], #4
 800d574:	f859 5b04 	ldr.w	r5, [r9], #4
 800d578:	fa1f f38a 	uxth.w	r3, sl
 800d57c:	4473      	add	r3, lr
 800d57e:	b2ac      	uxth	r4, r5
 800d580:	1b1b      	subs	r3, r3, r4
 800d582:	0c2c      	lsrs	r4, r5, #16
 800d584:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800d588:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800d592:	45c8      	cmp	r8, r9
 800d594:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d598:	4694      	mov	ip, r2
 800d59a:	f841 4b04 	str.w	r4, [r1], #4
 800d59e:	d8e7      	bhi.n	800d570 <__mdiff+0x5c>
 800d5a0:	45bc      	cmp	ip, r7
 800d5a2:	d304      	bcc.n	800d5ae <__mdiff+0x9a>
 800d5a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d5a8:	b183      	cbz	r3, 800d5cc <__mdiff+0xb8>
 800d5aa:	6106      	str	r6, [r0, #16]
 800d5ac:	e7c4      	b.n	800d538 <__mdiff+0x24>
 800d5ae:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d5b2:	b2a2      	uxth	r2, r4
 800d5b4:	4472      	add	r2, lr
 800d5b6:	1413      	asrs	r3, r2, #16
 800d5b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d5bc:	b292      	uxth	r2, r2
 800d5be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d5c2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d5c6:	f841 2b04 	str.w	r2, [r1], #4
 800d5ca:	e7e9      	b.n	800d5a0 <__mdiff+0x8c>
 800d5cc:	3e01      	subs	r6, #1
 800d5ce:	e7e9      	b.n	800d5a4 <__mdiff+0x90>

0800d5d0 <__d2b>:
 800d5d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d5d4:	461c      	mov	r4, r3
 800d5d6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d5da:	2101      	movs	r1, #1
 800d5dc:	4690      	mov	r8, r2
 800d5de:	f7ff fd6b 	bl	800d0b8 <_Balloc>
 800d5e2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d5e6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d5ea:	4607      	mov	r7, r0
 800d5ec:	bb34      	cbnz	r4, 800d63c <__d2b+0x6c>
 800d5ee:	9201      	str	r2, [sp, #4]
 800d5f0:	f1b8 0200 	subs.w	r2, r8, #0
 800d5f4:	d027      	beq.n	800d646 <__d2b+0x76>
 800d5f6:	a802      	add	r0, sp, #8
 800d5f8:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d5fc:	f7ff fe01 	bl	800d202 <__lo0bits>
 800d600:	9900      	ldr	r1, [sp, #0]
 800d602:	b1f0      	cbz	r0, 800d642 <__d2b+0x72>
 800d604:	9a01      	ldr	r2, [sp, #4]
 800d606:	f1c0 0320 	rsb	r3, r0, #32
 800d60a:	fa02 f303 	lsl.w	r3, r2, r3
 800d60e:	430b      	orrs	r3, r1
 800d610:	40c2      	lsrs	r2, r0
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	9201      	str	r2, [sp, #4]
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	bf14      	ite	ne
 800d61c:	2102      	movne	r1, #2
 800d61e:	2101      	moveq	r1, #1
 800d620:	61bb      	str	r3, [r7, #24]
 800d622:	6139      	str	r1, [r7, #16]
 800d624:	b1c4      	cbz	r4, 800d658 <__d2b+0x88>
 800d626:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d62a:	4404      	add	r4, r0
 800d62c:	6034      	str	r4, [r6, #0]
 800d62e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d632:	6028      	str	r0, [r5, #0]
 800d634:	4638      	mov	r0, r7
 800d636:	b002      	add	sp, #8
 800d638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d63c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d640:	e7d5      	b.n	800d5ee <__d2b+0x1e>
 800d642:	6179      	str	r1, [r7, #20]
 800d644:	e7e7      	b.n	800d616 <__d2b+0x46>
 800d646:	a801      	add	r0, sp, #4
 800d648:	f7ff fddb 	bl	800d202 <__lo0bits>
 800d64c:	2101      	movs	r1, #1
 800d64e:	9b01      	ldr	r3, [sp, #4]
 800d650:	6139      	str	r1, [r7, #16]
 800d652:	617b      	str	r3, [r7, #20]
 800d654:	3020      	adds	r0, #32
 800d656:	e7e5      	b.n	800d624 <__d2b+0x54>
 800d658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d65c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d660:	6030      	str	r0, [r6, #0]
 800d662:	6918      	ldr	r0, [r3, #16]
 800d664:	f7ff fdae 	bl	800d1c4 <__hi0bits>
 800d668:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d66c:	e7e1      	b.n	800d632 <__d2b+0x62>

0800d66e <_calloc_r>:
 800d66e:	b538      	push	{r3, r4, r5, lr}
 800d670:	fb02 f401 	mul.w	r4, r2, r1
 800d674:	4621      	mov	r1, r4
 800d676:	f000 f855 	bl	800d724 <_malloc_r>
 800d67a:	4605      	mov	r5, r0
 800d67c:	b118      	cbz	r0, 800d686 <_calloc_r+0x18>
 800d67e:	4622      	mov	r2, r4
 800d680:	2100      	movs	r1, #0
 800d682:	f7fe fa0e 	bl	800baa2 <memset>
 800d686:	4628      	mov	r0, r5
 800d688:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d68c <_free_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4605      	mov	r5, r0
 800d690:	2900      	cmp	r1, #0
 800d692:	d043      	beq.n	800d71c <_free_r+0x90>
 800d694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d698:	1f0c      	subs	r4, r1, #4
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bfb8      	it	lt
 800d69e:	18e4      	addlt	r4, r4, r3
 800d6a0:	f000 febd 	bl	800e41e <__malloc_lock>
 800d6a4:	4a1e      	ldr	r2, [pc, #120]	; (800d720 <_free_r+0x94>)
 800d6a6:	6813      	ldr	r3, [r2, #0]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	b933      	cbnz	r3, 800d6ba <_free_r+0x2e>
 800d6ac:	6063      	str	r3, [r4, #4]
 800d6ae:	6014      	str	r4, [r2, #0]
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6b6:	f000 beb3 	b.w	800e420 <__malloc_unlock>
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	d90b      	bls.n	800d6d6 <_free_r+0x4a>
 800d6be:	6821      	ldr	r1, [r4, #0]
 800d6c0:	1862      	adds	r2, r4, r1
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	bf01      	itttt	eq
 800d6c6:	681a      	ldreq	r2, [r3, #0]
 800d6c8:	685b      	ldreq	r3, [r3, #4]
 800d6ca:	1852      	addeq	r2, r2, r1
 800d6cc:	6022      	streq	r2, [r4, #0]
 800d6ce:	6063      	str	r3, [r4, #4]
 800d6d0:	6004      	str	r4, [r0, #0]
 800d6d2:	e7ed      	b.n	800d6b0 <_free_r+0x24>
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	685a      	ldr	r2, [r3, #4]
 800d6d8:	b10a      	cbz	r2, 800d6de <_free_r+0x52>
 800d6da:	42a2      	cmp	r2, r4
 800d6dc:	d9fa      	bls.n	800d6d4 <_free_r+0x48>
 800d6de:	6819      	ldr	r1, [r3, #0]
 800d6e0:	1858      	adds	r0, r3, r1
 800d6e2:	42a0      	cmp	r0, r4
 800d6e4:	d10b      	bne.n	800d6fe <_free_r+0x72>
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	4401      	add	r1, r0
 800d6ea:	1858      	adds	r0, r3, r1
 800d6ec:	4282      	cmp	r2, r0
 800d6ee:	6019      	str	r1, [r3, #0]
 800d6f0:	d1de      	bne.n	800d6b0 <_free_r+0x24>
 800d6f2:	6810      	ldr	r0, [r2, #0]
 800d6f4:	6852      	ldr	r2, [r2, #4]
 800d6f6:	4401      	add	r1, r0
 800d6f8:	6019      	str	r1, [r3, #0]
 800d6fa:	605a      	str	r2, [r3, #4]
 800d6fc:	e7d8      	b.n	800d6b0 <_free_r+0x24>
 800d6fe:	d902      	bls.n	800d706 <_free_r+0x7a>
 800d700:	230c      	movs	r3, #12
 800d702:	602b      	str	r3, [r5, #0]
 800d704:	e7d4      	b.n	800d6b0 <_free_r+0x24>
 800d706:	6820      	ldr	r0, [r4, #0]
 800d708:	1821      	adds	r1, r4, r0
 800d70a:	428a      	cmp	r2, r1
 800d70c:	bf01      	itttt	eq
 800d70e:	6811      	ldreq	r1, [r2, #0]
 800d710:	6852      	ldreq	r2, [r2, #4]
 800d712:	1809      	addeq	r1, r1, r0
 800d714:	6021      	streq	r1, [r4, #0]
 800d716:	6062      	str	r2, [r4, #4]
 800d718:	605c      	str	r4, [r3, #4]
 800d71a:	e7c9      	b.n	800d6b0 <_free_r+0x24>
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop
 800d720:	200005a0 	.word	0x200005a0

0800d724 <_malloc_r>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	1ccd      	adds	r5, r1, #3
 800d728:	f025 0503 	bic.w	r5, r5, #3
 800d72c:	3508      	adds	r5, #8
 800d72e:	2d0c      	cmp	r5, #12
 800d730:	bf38      	it	cc
 800d732:	250c      	movcc	r5, #12
 800d734:	2d00      	cmp	r5, #0
 800d736:	4606      	mov	r6, r0
 800d738:	db01      	blt.n	800d73e <_malloc_r+0x1a>
 800d73a:	42a9      	cmp	r1, r5
 800d73c:	d903      	bls.n	800d746 <_malloc_r+0x22>
 800d73e:	230c      	movs	r3, #12
 800d740:	6033      	str	r3, [r6, #0]
 800d742:	2000      	movs	r0, #0
 800d744:	bd70      	pop	{r4, r5, r6, pc}
 800d746:	f000 fe6a 	bl	800e41e <__malloc_lock>
 800d74a:	4a21      	ldr	r2, [pc, #132]	; (800d7d0 <_malloc_r+0xac>)
 800d74c:	6814      	ldr	r4, [r2, #0]
 800d74e:	4621      	mov	r1, r4
 800d750:	b991      	cbnz	r1, 800d778 <_malloc_r+0x54>
 800d752:	4c20      	ldr	r4, [pc, #128]	; (800d7d4 <_malloc_r+0xb0>)
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	b91b      	cbnz	r3, 800d760 <_malloc_r+0x3c>
 800d758:	4630      	mov	r0, r6
 800d75a:	f000 fc91 	bl	800e080 <_sbrk_r>
 800d75e:	6020      	str	r0, [r4, #0]
 800d760:	4629      	mov	r1, r5
 800d762:	4630      	mov	r0, r6
 800d764:	f000 fc8c 	bl	800e080 <_sbrk_r>
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d124      	bne.n	800d7b6 <_malloc_r+0x92>
 800d76c:	230c      	movs	r3, #12
 800d76e:	4630      	mov	r0, r6
 800d770:	6033      	str	r3, [r6, #0]
 800d772:	f000 fe55 	bl	800e420 <__malloc_unlock>
 800d776:	e7e4      	b.n	800d742 <_malloc_r+0x1e>
 800d778:	680b      	ldr	r3, [r1, #0]
 800d77a:	1b5b      	subs	r3, r3, r5
 800d77c:	d418      	bmi.n	800d7b0 <_malloc_r+0x8c>
 800d77e:	2b0b      	cmp	r3, #11
 800d780:	d90f      	bls.n	800d7a2 <_malloc_r+0x7e>
 800d782:	600b      	str	r3, [r1, #0]
 800d784:	18cc      	adds	r4, r1, r3
 800d786:	50cd      	str	r5, [r1, r3]
 800d788:	4630      	mov	r0, r6
 800d78a:	f000 fe49 	bl	800e420 <__malloc_unlock>
 800d78e:	f104 000b 	add.w	r0, r4, #11
 800d792:	1d23      	adds	r3, r4, #4
 800d794:	f020 0007 	bic.w	r0, r0, #7
 800d798:	1ac3      	subs	r3, r0, r3
 800d79a:	d0d3      	beq.n	800d744 <_malloc_r+0x20>
 800d79c:	425a      	negs	r2, r3
 800d79e:	50e2      	str	r2, [r4, r3]
 800d7a0:	e7d0      	b.n	800d744 <_malloc_r+0x20>
 800d7a2:	684b      	ldr	r3, [r1, #4]
 800d7a4:	428c      	cmp	r4, r1
 800d7a6:	bf16      	itet	ne
 800d7a8:	6063      	strne	r3, [r4, #4]
 800d7aa:	6013      	streq	r3, [r2, #0]
 800d7ac:	460c      	movne	r4, r1
 800d7ae:	e7eb      	b.n	800d788 <_malloc_r+0x64>
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	6849      	ldr	r1, [r1, #4]
 800d7b4:	e7cc      	b.n	800d750 <_malloc_r+0x2c>
 800d7b6:	1cc4      	adds	r4, r0, #3
 800d7b8:	f024 0403 	bic.w	r4, r4, #3
 800d7bc:	42a0      	cmp	r0, r4
 800d7be:	d005      	beq.n	800d7cc <_malloc_r+0xa8>
 800d7c0:	1a21      	subs	r1, r4, r0
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	f000 fc5c 	bl	800e080 <_sbrk_r>
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d0cf      	beq.n	800d76c <_malloc_r+0x48>
 800d7cc:	6025      	str	r5, [r4, #0]
 800d7ce:	e7db      	b.n	800d788 <_malloc_r+0x64>
 800d7d0:	200005a0 	.word	0x200005a0
 800d7d4:	200005a4 	.word	0x200005a4

0800d7d8 <__ssputs_r>:
 800d7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7dc:	688e      	ldr	r6, [r1, #8]
 800d7de:	4682      	mov	sl, r0
 800d7e0:	429e      	cmp	r6, r3
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	4690      	mov	r8, r2
 800d7e6:	4699      	mov	r9, r3
 800d7e8:	d837      	bhi.n	800d85a <__ssputs_r+0x82>
 800d7ea:	898a      	ldrh	r2, [r1, #12]
 800d7ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7f0:	d031      	beq.n	800d856 <__ssputs_r+0x7e>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	6825      	ldr	r5, [r4, #0]
 800d7f6:	6909      	ldr	r1, [r1, #16]
 800d7f8:	1a6f      	subs	r7, r5, r1
 800d7fa:	6965      	ldr	r5, [r4, #20]
 800d7fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d800:	fb95 f5f3 	sdiv	r5, r5, r3
 800d804:	f109 0301 	add.w	r3, r9, #1
 800d808:	443b      	add	r3, r7
 800d80a:	429d      	cmp	r5, r3
 800d80c:	bf38      	it	cc
 800d80e:	461d      	movcc	r5, r3
 800d810:	0553      	lsls	r3, r2, #21
 800d812:	d530      	bpl.n	800d876 <__ssputs_r+0x9e>
 800d814:	4629      	mov	r1, r5
 800d816:	f7ff ff85 	bl	800d724 <_malloc_r>
 800d81a:	4606      	mov	r6, r0
 800d81c:	b950      	cbnz	r0, 800d834 <__ssputs_r+0x5c>
 800d81e:	230c      	movs	r3, #12
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	f8ca 3000 	str.w	r3, [sl]
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d82e:	81a3      	strh	r3, [r4, #12]
 800d830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d834:	463a      	mov	r2, r7
 800d836:	6921      	ldr	r1, [r4, #16]
 800d838:	f7fe f928 	bl	800ba8c <memcpy>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d846:	81a3      	strh	r3, [r4, #12]
 800d848:	6126      	str	r6, [r4, #16]
 800d84a:	443e      	add	r6, r7
 800d84c:	6026      	str	r6, [r4, #0]
 800d84e:	464e      	mov	r6, r9
 800d850:	6165      	str	r5, [r4, #20]
 800d852:	1bed      	subs	r5, r5, r7
 800d854:	60a5      	str	r5, [r4, #8]
 800d856:	454e      	cmp	r6, r9
 800d858:	d900      	bls.n	800d85c <__ssputs_r+0x84>
 800d85a:	464e      	mov	r6, r9
 800d85c:	4632      	mov	r2, r6
 800d85e:	4641      	mov	r1, r8
 800d860:	6820      	ldr	r0, [r4, #0]
 800d862:	f000 fdc3 	bl	800e3ec <memmove>
 800d866:	68a3      	ldr	r3, [r4, #8]
 800d868:	2000      	movs	r0, #0
 800d86a:	1b9b      	subs	r3, r3, r6
 800d86c:	60a3      	str	r3, [r4, #8]
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	441e      	add	r6, r3
 800d872:	6026      	str	r6, [r4, #0]
 800d874:	e7dc      	b.n	800d830 <__ssputs_r+0x58>
 800d876:	462a      	mov	r2, r5
 800d878:	f000 fdd3 	bl	800e422 <_realloc_r>
 800d87c:	4606      	mov	r6, r0
 800d87e:	2800      	cmp	r0, #0
 800d880:	d1e2      	bne.n	800d848 <__ssputs_r+0x70>
 800d882:	6921      	ldr	r1, [r4, #16]
 800d884:	4650      	mov	r0, sl
 800d886:	f7ff ff01 	bl	800d68c <_free_r>
 800d88a:	e7c8      	b.n	800d81e <__ssputs_r+0x46>

0800d88c <_svfiprintf_r>:
 800d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	461d      	mov	r5, r3
 800d892:	898b      	ldrh	r3, [r1, #12]
 800d894:	b09d      	sub	sp, #116	; 0x74
 800d896:	061f      	lsls	r7, r3, #24
 800d898:	4680      	mov	r8, r0
 800d89a:	460c      	mov	r4, r1
 800d89c:	4616      	mov	r6, r2
 800d89e:	d50f      	bpl.n	800d8c0 <_svfiprintf_r+0x34>
 800d8a0:	690b      	ldr	r3, [r1, #16]
 800d8a2:	b96b      	cbnz	r3, 800d8c0 <_svfiprintf_r+0x34>
 800d8a4:	2140      	movs	r1, #64	; 0x40
 800d8a6:	f7ff ff3d 	bl	800d724 <_malloc_r>
 800d8aa:	6020      	str	r0, [r4, #0]
 800d8ac:	6120      	str	r0, [r4, #16]
 800d8ae:	b928      	cbnz	r0, 800d8bc <_svfiprintf_r+0x30>
 800d8b0:	230c      	movs	r3, #12
 800d8b2:	f8c8 3000 	str.w	r3, [r8]
 800d8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ba:	e0c8      	b.n	800da4e <_svfiprintf_r+0x1c2>
 800d8bc:	2340      	movs	r3, #64	; 0x40
 800d8be:	6163      	str	r3, [r4, #20]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c4:	2320      	movs	r3, #32
 800d8c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8ca:	2330      	movs	r3, #48	; 0x30
 800d8cc:	f04f 0b01 	mov.w	fp, #1
 800d8d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8d4:	9503      	str	r5, [sp, #12]
 800d8d6:	4637      	mov	r7, r6
 800d8d8:	463d      	mov	r5, r7
 800d8da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8de:	b10b      	cbz	r3, 800d8e4 <_svfiprintf_r+0x58>
 800d8e0:	2b25      	cmp	r3, #37	; 0x25
 800d8e2:	d13e      	bne.n	800d962 <_svfiprintf_r+0xd6>
 800d8e4:	ebb7 0a06 	subs.w	sl, r7, r6
 800d8e8:	d00b      	beq.n	800d902 <_svfiprintf_r+0x76>
 800d8ea:	4653      	mov	r3, sl
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	f7ff ff71 	bl	800d7d8 <__ssputs_r>
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	f000 80a4 	beq.w	800da44 <_svfiprintf_r+0x1b8>
 800d8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8fe:	4453      	add	r3, sl
 800d900:	9309      	str	r3, [sp, #36]	; 0x24
 800d902:	783b      	ldrb	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 809d 	beq.w	800da44 <_svfiprintf_r+0x1b8>
 800d90a:	2300      	movs	r3, #0
 800d90c:	f04f 32ff 	mov.w	r2, #4294967295
 800d910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	9307      	str	r3, [sp, #28]
 800d918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d91c:	931a      	str	r3, [sp, #104]	; 0x68
 800d91e:	462f      	mov	r7, r5
 800d920:	2205      	movs	r2, #5
 800d922:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d926:	4850      	ldr	r0, [pc, #320]	; (800da68 <_svfiprintf_r+0x1dc>)
 800d928:	f7ff fbb8 	bl	800d09c <memchr>
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	b9d0      	cbnz	r0, 800d966 <_svfiprintf_r+0xda>
 800d930:	06d9      	lsls	r1, r3, #27
 800d932:	bf44      	itt	mi
 800d934:	2220      	movmi	r2, #32
 800d936:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d93a:	071a      	lsls	r2, r3, #28
 800d93c:	bf44      	itt	mi
 800d93e:	222b      	movmi	r2, #43	; 0x2b
 800d940:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d944:	782a      	ldrb	r2, [r5, #0]
 800d946:	2a2a      	cmp	r2, #42	; 0x2a
 800d948:	d015      	beq.n	800d976 <_svfiprintf_r+0xea>
 800d94a:	462f      	mov	r7, r5
 800d94c:	2000      	movs	r0, #0
 800d94e:	250a      	movs	r5, #10
 800d950:	9a07      	ldr	r2, [sp, #28]
 800d952:	4639      	mov	r1, r7
 800d954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d958:	3b30      	subs	r3, #48	; 0x30
 800d95a:	2b09      	cmp	r3, #9
 800d95c:	d94d      	bls.n	800d9fa <_svfiprintf_r+0x16e>
 800d95e:	b1b8      	cbz	r0, 800d990 <_svfiprintf_r+0x104>
 800d960:	e00f      	b.n	800d982 <_svfiprintf_r+0xf6>
 800d962:	462f      	mov	r7, r5
 800d964:	e7b8      	b.n	800d8d8 <_svfiprintf_r+0x4c>
 800d966:	4a40      	ldr	r2, [pc, #256]	; (800da68 <_svfiprintf_r+0x1dc>)
 800d968:	463d      	mov	r5, r7
 800d96a:	1a80      	subs	r0, r0, r2
 800d96c:	fa0b f000 	lsl.w	r0, fp, r0
 800d970:	4318      	orrs	r0, r3
 800d972:	9004      	str	r0, [sp, #16]
 800d974:	e7d3      	b.n	800d91e <_svfiprintf_r+0x92>
 800d976:	9a03      	ldr	r2, [sp, #12]
 800d978:	1d11      	adds	r1, r2, #4
 800d97a:	6812      	ldr	r2, [r2, #0]
 800d97c:	9103      	str	r1, [sp, #12]
 800d97e:	2a00      	cmp	r2, #0
 800d980:	db01      	blt.n	800d986 <_svfiprintf_r+0xfa>
 800d982:	9207      	str	r2, [sp, #28]
 800d984:	e004      	b.n	800d990 <_svfiprintf_r+0x104>
 800d986:	4252      	negs	r2, r2
 800d988:	f043 0302 	orr.w	r3, r3, #2
 800d98c:	9207      	str	r2, [sp, #28]
 800d98e:	9304      	str	r3, [sp, #16]
 800d990:	783b      	ldrb	r3, [r7, #0]
 800d992:	2b2e      	cmp	r3, #46	; 0x2e
 800d994:	d10c      	bne.n	800d9b0 <_svfiprintf_r+0x124>
 800d996:	787b      	ldrb	r3, [r7, #1]
 800d998:	2b2a      	cmp	r3, #42	; 0x2a
 800d99a:	d133      	bne.n	800da04 <_svfiprintf_r+0x178>
 800d99c:	9b03      	ldr	r3, [sp, #12]
 800d99e:	3702      	adds	r7, #2
 800d9a0:	1d1a      	adds	r2, r3, #4
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	9203      	str	r2, [sp, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bfb8      	it	lt
 800d9aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9ae:	9305      	str	r3, [sp, #20]
 800d9b0:	4d2e      	ldr	r5, [pc, #184]	; (800da6c <_svfiprintf_r+0x1e0>)
 800d9b2:	2203      	movs	r2, #3
 800d9b4:	7839      	ldrb	r1, [r7, #0]
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f7ff fb70 	bl	800d09c <memchr>
 800d9bc:	b138      	cbz	r0, 800d9ce <_svfiprintf_r+0x142>
 800d9be:	2340      	movs	r3, #64	; 0x40
 800d9c0:	1b40      	subs	r0, r0, r5
 800d9c2:	fa03 f000 	lsl.w	r0, r3, r0
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	3701      	adds	r7, #1
 800d9ca:	4303      	orrs	r3, r0
 800d9cc:	9304      	str	r3, [sp, #16]
 800d9ce:	7839      	ldrb	r1, [r7, #0]
 800d9d0:	2206      	movs	r2, #6
 800d9d2:	4827      	ldr	r0, [pc, #156]	; (800da70 <_svfiprintf_r+0x1e4>)
 800d9d4:	1c7e      	adds	r6, r7, #1
 800d9d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9da:	f7ff fb5f 	bl	800d09c <memchr>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d038      	beq.n	800da54 <_svfiprintf_r+0x1c8>
 800d9e2:	4b24      	ldr	r3, [pc, #144]	; (800da74 <_svfiprintf_r+0x1e8>)
 800d9e4:	bb13      	cbnz	r3, 800da2c <_svfiprintf_r+0x1a0>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	3307      	adds	r3, #7
 800d9ea:	f023 0307 	bic.w	r3, r3, #7
 800d9ee:	3308      	adds	r3, #8
 800d9f0:	9303      	str	r3, [sp, #12]
 800d9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f4:	444b      	add	r3, r9
 800d9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f8:	e76d      	b.n	800d8d6 <_svfiprintf_r+0x4a>
 800d9fa:	fb05 3202 	mla	r2, r5, r2, r3
 800d9fe:	2001      	movs	r0, #1
 800da00:	460f      	mov	r7, r1
 800da02:	e7a6      	b.n	800d952 <_svfiprintf_r+0xc6>
 800da04:	2300      	movs	r3, #0
 800da06:	250a      	movs	r5, #10
 800da08:	4619      	mov	r1, r3
 800da0a:	3701      	adds	r7, #1
 800da0c:	9305      	str	r3, [sp, #20]
 800da0e:	4638      	mov	r0, r7
 800da10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da14:	3a30      	subs	r2, #48	; 0x30
 800da16:	2a09      	cmp	r2, #9
 800da18:	d903      	bls.n	800da22 <_svfiprintf_r+0x196>
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d0c8      	beq.n	800d9b0 <_svfiprintf_r+0x124>
 800da1e:	9105      	str	r1, [sp, #20]
 800da20:	e7c6      	b.n	800d9b0 <_svfiprintf_r+0x124>
 800da22:	fb05 2101 	mla	r1, r5, r1, r2
 800da26:	2301      	movs	r3, #1
 800da28:	4607      	mov	r7, r0
 800da2a:	e7f0      	b.n	800da0e <_svfiprintf_r+0x182>
 800da2c:	ab03      	add	r3, sp, #12
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	4622      	mov	r2, r4
 800da32:	4b11      	ldr	r3, [pc, #68]	; (800da78 <_svfiprintf_r+0x1ec>)
 800da34:	a904      	add	r1, sp, #16
 800da36:	4640      	mov	r0, r8
 800da38:	f7fe f8cc 	bl	800bbd4 <_printf_float>
 800da3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800da40:	4681      	mov	r9, r0
 800da42:	d1d6      	bne.n	800d9f2 <_svfiprintf_r+0x166>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	065b      	lsls	r3, r3, #25
 800da48:	f53f af35 	bmi.w	800d8b6 <_svfiprintf_r+0x2a>
 800da4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4e:	b01d      	add	sp, #116	; 0x74
 800da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da54:	ab03      	add	r3, sp, #12
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	4622      	mov	r2, r4
 800da5a:	4b07      	ldr	r3, [pc, #28]	; (800da78 <_svfiprintf_r+0x1ec>)
 800da5c:	a904      	add	r1, sp, #16
 800da5e:	4640      	mov	r0, r8
 800da60:	f7fe fb64 	bl	800c12c <_printf_i>
 800da64:	e7ea      	b.n	800da3c <_svfiprintf_r+0x1b0>
 800da66:	bf00      	nop
 800da68:	0800e754 	.word	0x0800e754
 800da6c:	0800e75a 	.word	0x0800e75a
 800da70:	0800e75e 	.word	0x0800e75e
 800da74:	0800bbd5 	.word	0x0800bbd5
 800da78:	0800d7d9 	.word	0x0800d7d9

0800da7c <_sungetc_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	1c4b      	adds	r3, r1, #1
 800da80:	4614      	mov	r4, r2
 800da82:	d103      	bne.n	800da8c <_sungetc_r+0x10>
 800da84:	f04f 35ff 	mov.w	r5, #4294967295
 800da88:	4628      	mov	r0, r5
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	8993      	ldrh	r3, [r2, #12]
 800da8e:	b2cd      	uxtb	r5, r1
 800da90:	f023 0320 	bic.w	r3, r3, #32
 800da94:	8193      	strh	r3, [r2, #12]
 800da96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da98:	6852      	ldr	r2, [r2, #4]
 800da9a:	b18b      	cbz	r3, 800dac0 <_sungetc_r+0x44>
 800da9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da9e:	4293      	cmp	r3, r2
 800daa0:	dd08      	ble.n	800dab4 <_sungetc_r+0x38>
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	1e5a      	subs	r2, r3, #1
 800daa6:	6022      	str	r2, [r4, #0]
 800daa8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800daac:	6863      	ldr	r3, [r4, #4]
 800daae:	3301      	adds	r3, #1
 800dab0:	6063      	str	r3, [r4, #4]
 800dab2:	e7e9      	b.n	800da88 <_sungetc_r+0xc>
 800dab4:	4621      	mov	r1, r4
 800dab6:	f000 fc3d 	bl	800e334 <__submore>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d0f1      	beq.n	800daa2 <_sungetc_r+0x26>
 800dabe:	e7e1      	b.n	800da84 <_sungetc_r+0x8>
 800dac0:	6921      	ldr	r1, [r4, #16]
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	b151      	cbz	r1, 800dadc <_sungetc_r+0x60>
 800dac6:	4299      	cmp	r1, r3
 800dac8:	d208      	bcs.n	800dadc <_sungetc_r+0x60>
 800daca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dace:	42a9      	cmp	r1, r5
 800dad0:	d104      	bne.n	800dadc <_sungetc_r+0x60>
 800dad2:	3b01      	subs	r3, #1
 800dad4:	3201      	adds	r2, #1
 800dad6:	6023      	str	r3, [r4, #0]
 800dad8:	6062      	str	r2, [r4, #4]
 800dada:	e7d5      	b.n	800da88 <_sungetc_r+0xc>
 800dadc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800dae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dae4:	6363      	str	r3, [r4, #52]	; 0x34
 800dae6:	2303      	movs	r3, #3
 800dae8:	63a3      	str	r3, [r4, #56]	; 0x38
 800daea:	4623      	mov	r3, r4
 800daec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	2301      	movs	r3, #1
 800daf4:	e7dc      	b.n	800dab0 <_sungetc_r+0x34>

0800daf6 <__ssrefill_r>:
 800daf6:	b510      	push	{r4, lr}
 800daf8:	460c      	mov	r4, r1
 800dafa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dafc:	b169      	cbz	r1, 800db1a <__ssrefill_r+0x24>
 800dafe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db02:	4299      	cmp	r1, r3
 800db04:	d001      	beq.n	800db0a <__ssrefill_r+0x14>
 800db06:	f7ff fdc1 	bl	800d68c <_free_r>
 800db0a:	2000      	movs	r0, #0
 800db0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db0e:	6360      	str	r0, [r4, #52]	; 0x34
 800db10:	6063      	str	r3, [r4, #4]
 800db12:	b113      	cbz	r3, 800db1a <__ssrefill_r+0x24>
 800db14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db16:	6023      	str	r3, [r4, #0]
 800db18:	bd10      	pop	{r4, pc}
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	2300      	movs	r3, #0
 800db24:	6063      	str	r3, [r4, #4]
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	f043 0320 	orr.w	r3, r3, #32
 800db2c:	81a3      	strh	r3, [r4, #12]
 800db2e:	e7f3      	b.n	800db18 <__ssrefill_r+0x22>

0800db30 <__ssvfiscanf_r>:
 800db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	460c      	mov	r4, r1
 800db36:	2100      	movs	r1, #0
 800db38:	4606      	mov	r6, r0
 800db3a:	4692      	mov	sl, r2
 800db3c:	270a      	movs	r7, #10
 800db3e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800db42:	9144      	str	r1, [sp, #272]	; 0x110
 800db44:	9145      	str	r1, [sp, #276]	; 0x114
 800db46:	499e      	ldr	r1, [pc, #632]	; (800ddc0 <__ssvfiscanf_r+0x290>)
 800db48:	f10d 0804 	add.w	r8, sp, #4
 800db4c:	91a0      	str	r1, [sp, #640]	; 0x280
 800db4e:	499d      	ldr	r1, [pc, #628]	; (800ddc4 <__ssvfiscanf_r+0x294>)
 800db50:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800ddc8 <__ssvfiscanf_r+0x298>
 800db54:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800db58:	91a1      	str	r1, [sp, #644]	; 0x284
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	f89a 3000 	ldrb.w	r3, [sl]
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 812a 	beq.w	800ddba <__ssvfiscanf_r+0x28a>
 800db66:	4655      	mov	r5, sl
 800db68:	f000 fc20 	bl	800e3ac <__locale_ctype_ptr>
 800db6c:	f815 bb01 	ldrb.w	fp, [r5], #1
 800db70:	4458      	add	r0, fp
 800db72:	7843      	ldrb	r3, [r0, #1]
 800db74:	f013 0308 	ands.w	r3, r3, #8
 800db78:	d01c      	beq.n	800dbb4 <__ssvfiscanf_r+0x84>
 800db7a:	6863      	ldr	r3, [r4, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd12      	ble.n	800dba6 <__ssvfiscanf_r+0x76>
 800db80:	f000 fc14 	bl	800e3ac <__locale_ctype_ptr>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	781a      	ldrb	r2, [r3, #0]
 800db88:	4410      	add	r0, r2
 800db8a:	7842      	ldrb	r2, [r0, #1]
 800db8c:	0712      	lsls	r2, r2, #28
 800db8e:	d401      	bmi.n	800db94 <__ssvfiscanf_r+0x64>
 800db90:	46aa      	mov	sl, r5
 800db92:	e7e3      	b.n	800db5c <__ssvfiscanf_r+0x2c>
 800db94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800db96:	3301      	adds	r3, #1
 800db98:	3201      	adds	r2, #1
 800db9a:	9245      	str	r2, [sp, #276]	; 0x114
 800db9c:	6862      	ldr	r2, [r4, #4]
 800db9e:	6023      	str	r3, [r4, #0]
 800dba0:	3a01      	subs	r2, #1
 800dba2:	6062      	str	r2, [r4, #4]
 800dba4:	e7e9      	b.n	800db7a <__ssvfiscanf_r+0x4a>
 800dba6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4630      	mov	r0, r6
 800dbac:	4798      	blx	r3
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d0e6      	beq.n	800db80 <__ssvfiscanf_r+0x50>
 800dbb2:	e7ed      	b.n	800db90 <__ssvfiscanf_r+0x60>
 800dbb4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800dbb8:	f040 8082 	bne.w	800dcc0 <__ssvfiscanf_r+0x190>
 800dbbc:	9343      	str	r3, [sp, #268]	; 0x10c
 800dbbe:	9341      	str	r3, [sp, #260]	; 0x104
 800dbc0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800dbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc6:	d103      	bne.n	800dbd0 <__ssvfiscanf_r+0xa0>
 800dbc8:	2310      	movs	r3, #16
 800dbca:	f10a 0502 	add.w	r5, sl, #2
 800dbce:	9341      	str	r3, [sp, #260]	; 0x104
 800dbd0:	46aa      	mov	sl, r5
 800dbd2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800dbd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dbda:	2a09      	cmp	r2, #9
 800dbdc:	d922      	bls.n	800dc24 <__ssvfiscanf_r+0xf4>
 800dbde:	2203      	movs	r2, #3
 800dbe0:	4879      	ldr	r0, [pc, #484]	; (800ddc8 <__ssvfiscanf_r+0x298>)
 800dbe2:	f7ff fa5b 	bl	800d09c <memchr>
 800dbe6:	b138      	cbz	r0, 800dbf8 <__ssvfiscanf_r+0xc8>
 800dbe8:	eba0 0309 	sub.w	r3, r0, r9
 800dbec:	2001      	movs	r0, #1
 800dbee:	46aa      	mov	sl, r5
 800dbf0:	4098      	lsls	r0, r3
 800dbf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dbf4:	4318      	orrs	r0, r3
 800dbf6:	9041      	str	r0, [sp, #260]	; 0x104
 800dbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfc:	f10a 0501 	add.w	r5, sl, #1
 800dc00:	2b67      	cmp	r3, #103	; 0x67
 800dc02:	d82b      	bhi.n	800dc5c <__ssvfiscanf_r+0x12c>
 800dc04:	2b65      	cmp	r3, #101	; 0x65
 800dc06:	f080 809f 	bcs.w	800dd48 <__ssvfiscanf_r+0x218>
 800dc0a:	2b47      	cmp	r3, #71	; 0x47
 800dc0c:	d810      	bhi.n	800dc30 <__ssvfiscanf_r+0x100>
 800dc0e:	2b45      	cmp	r3, #69	; 0x45
 800dc10:	f080 809a 	bcs.w	800dd48 <__ssvfiscanf_r+0x218>
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d06c      	beq.n	800dcf2 <__ssvfiscanf_r+0x1c2>
 800dc18:	2b25      	cmp	r3, #37	; 0x25
 800dc1a:	d051      	beq.n	800dcc0 <__ssvfiscanf_r+0x190>
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	9742      	str	r7, [sp, #264]	; 0x108
 800dc20:	9347      	str	r3, [sp, #284]	; 0x11c
 800dc22:	e027      	b.n	800dc74 <__ssvfiscanf_r+0x144>
 800dc24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dc26:	fb07 1303 	mla	r3, r7, r3, r1
 800dc2a:	3b30      	subs	r3, #48	; 0x30
 800dc2c:	9343      	str	r3, [sp, #268]	; 0x10c
 800dc2e:	e7cf      	b.n	800dbd0 <__ssvfiscanf_r+0xa0>
 800dc30:	2b5b      	cmp	r3, #91	; 0x5b
 800dc32:	d06a      	beq.n	800dd0a <__ssvfiscanf_r+0x1da>
 800dc34:	d80c      	bhi.n	800dc50 <__ssvfiscanf_r+0x120>
 800dc36:	2b58      	cmp	r3, #88	; 0x58
 800dc38:	d1f0      	bne.n	800dc1c <__ssvfiscanf_r+0xec>
 800dc3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dc3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc40:	9241      	str	r2, [sp, #260]	; 0x104
 800dc42:	2210      	movs	r2, #16
 800dc44:	9242      	str	r2, [sp, #264]	; 0x108
 800dc46:	2b6e      	cmp	r3, #110	; 0x6e
 800dc48:	bf8c      	ite	hi
 800dc4a:	2304      	movhi	r3, #4
 800dc4c:	2303      	movls	r3, #3
 800dc4e:	e010      	b.n	800dc72 <__ssvfiscanf_r+0x142>
 800dc50:	2b63      	cmp	r3, #99	; 0x63
 800dc52:	d065      	beq.n	800dd20 <__ssvfiscanf_r+0x1f0>
 800dc54:	2b64      	cmp	r3, #100	; 0x64
 800dc56:	d1e1      	bne.n	800dc1c <__ssvfiscanf_r+0xec>
 800dc58:	9742      	str	r7, [sp, #264]	; 0x108
 800dc5a:	e7f4      	b.n	800dc46 <__ssvfiscanf_r+0x116>
 800dc5c:	2b70      	cmp	r3, #112	; 0x70
 800dc5e:	d04b      	beq.n	800dcf8 <__ssvfiscanf_r+0x1c8>
 800dc60:	d826      	bhi.n	800dcb0 <__ssvfiscanf_r+0x180>
 800dc62:	2b6e      	cmp	r3, #110	; 0x6e
 800dc64:	d062      	beq.n	800dd2c <__ssvfiscanf_r+0x1fc>
 800dc66:	d84c      	bhi.n	800dd02 <__ssvfiscanf_r+0x1d2>
 800dc68:	2b69      	cmp	r3, #105	; 0x69
 800dc6a:	d1d7      	bne.n	800dc1c <__ssvfiscanf_r+0xec>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9342      	str	r3, [sp, #264]	; 0x108
 800dc70:	2303      	movs	r3, #3
 800dc72:	9347      	str	r3, [sp, #284]	; 0x11c
 800dc74:	6863      	ldr	r3, [r4, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dd68      	ble.n	800dd4c <__ssvfiscanf_r+0x21c>
 800dc7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dc7c:	0659      	lsls	r1, r3, #25
 800dc7e:	d407      	bmi.n	800dc90 <__ssvfiscanf_r+0x160>
 800dc80:	f000 fb94 	bl	800e3ac <__locale_ctype_ptr>
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	781a      	ldrb	r2, [r3, #0]
 800dc88:	4410      	add	r0, r2
 800dc8a:	7842      	ldrb	r2, [r0, #1]
 800dc8c:	0712      	lsls	r2, r2, #28
 800dc8e:	d464      	bmi.n	800dd5a <__ssvfiscanf_r+0x22a>
 800dc90:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	dc73      	bgt.n	800dd7e <__ssvfiscanf_r+0x24e>
 800dc96:	466b      	mov	r3, sp
 800dc98:	4622      	mov	r2, r4
 800dc9a:	a941      	add	r1, sp, #260	; 0x104
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f000 f897 	bl	800ddd0 <_scanf_chars>
 800dca2:	2801      	cmp	r0, #1
 800dca4:	f000 8089 	beq.w	800ddba <__ssvfiscanf_r+0x28a>
 800dca8:	2802      	cmp	r0, #2
 800dcaa:	f47f af71 	bne.w	800db90 <__ssvfiscanf_r+0x60>
 800dcae:	e01d      	b.n	800dcec <__ssvfiscanf_r+0x1bc>
 800dcb0:	2b75      	cmp	r3, #117	; 0x75
 800dcb2:	d0d1      	beq.n	800dc58 <__ssvfiscanf_r+0x128>
 800dcb4:	2b78      	cmp	r3, #120	; 0x78
 800dcb6:	d0c0      	beq.n	800dc3a <__ssvfiscanf_r+0x10a>
 800dcb8:	2b73      	cmp	r3, #115	; 0x73
 800dcba:	d1af      	bne.n	800dc1c <__ssvfiscanf_r+0xec>
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	e7d8      	b.n	800dc72 <__ssvfiscanf_r+0x142>
 800dcc0:	6863      	ldr	r3, [r4, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	dd0c      	ble.n	800dce0 <__ssvfiscanf_r+0x1b0>
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	781a      	ldrb	r2, [r3, #0]
 800dcca:	455a      	cmp	r2, fp
 800dccc:	d175      	bne.n	800ddba <__ssvfiscanf_r+0x28a>
 800dcce:	3301      	adds	r3, #1
 800dcd0:	6862      	ldr	r2, [r4, #4]
 800dcd2:	6023      	str	r3, [r4, #0]
 800dcd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800dcd6:	3a01      	subs	r2, #1
 800dcd8:	3301      	adds	r3, #1
 800dcda:	6062      	str	r2, [r4, #4]
 800dcdc:	9345      	str	r3, [sp, #276]	; 0x114
 800dcde:	e757      	b.n	800db90 <__ssvfiscanf_r+0x60>
 800dce0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dce2:	4621      	mov	r1, r4
 800dce4:	4630      	mov	r0, r6
 800dce6:	4798      	blx	r3
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d0ec      	beq.n	800dcc6 <__ssvfiscanf_r+0x196>
 800dcec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d159      	bne.n	800dda6 <__ssvfiscanf_r+0x276>
 800dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf6:	e05c      	b.n	800ddb2 <__ssvfiscanf_r+0x282>
 800dcf8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dcfa:	f042 0220 	orr.w	r2, r2, #32
 800dcfe:	9241      	str	r2, [sp, #260]	; 0x104
 800dd00:	e79b      	b.n	800dc3a <__ssvfiscanf_r+0x10a>
 800dd02:	2308      	movs	r3, #8
 800dd04:	9342      	str	r3, [sp, #264]	; 0x108
 800dd06:	2304      	movs	r3, #4
 800dd08:	e7b3      	b.n	800dc72 <__ssvfiscanf_r+0x142>
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	4640      	mov	r0, r8
 800dd0e:	f000 f9c7 	bl	800e0a0 <__sccl>
 800dd12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dd14:	4605      	mov	r5, r0
 800dd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1a:	9341      	str	r3, [sp, #260]	; 0x104
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e7a8      	b.n	800dc72 <__ssvfiscanf_r+0x142>
 800dd20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd26:	9341      	str	r3, [sp, #260]	; 0x104
 800dd28:	2300      	movs	r3, #0
 800dd2a:	e7a2      	b.n	800dc72 <__ssvfiscanf_r+0x142>
 800dd2c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800dd2e:	06c3      	lsls	r3, r0, #27
 800dd30:	f53f af2e 	bmi.w	800db90 <__ssvfiscanf_r+0x60>
 800dd34:	9b00      	ldr	r3, [sp, #0]
 800dd36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd38:	1d19      	adds	r1, r3, #4
 800dd3a:	9100      	str	r1, [sp, #0]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	07c0      	lsls	r0, r0, #31
 800dd40:	bf4c      	ite	mi
 800dd42:	801a      	strhmi	r2, [r3, #0]
 800dd44:	601a      	strpl	r2, [r3, #0]
 800dd46:	e723      	b.n	800db90 <__ssvfiscanf_r+0x60>
 800dd48:	2305      	movs	r3, #5
 800dd4a:	e792      	b.n	800dc72 <__ssvfiscanf_r+0x142>
 800dd4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4630      	mov	r0, r6
 800dd52:	4798      	blx	r3
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d090      	beq.n	800dc7a <__ssvfiscanf_r+0x14a>
 800dd58:	e7c8      	b.n	800dcec <__ssvfiscanf_r+0x1bc>
 800dd5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd5c:	3201      	adds	r2, #1
 800dd5e:	9245      	str	r2, [sp, #276]	; 0x114
 800dd60:	6862      	ldr	r2, [r4, #4]
 800dd62:	3a01      	subs	r2, #1
 800dd64:	2a00      	cmp	r2, #0
 800dd66:	6062      	str	r2, [r4, #4]
 800dd68:	dd02      	ble.n	800dd70 <__ssvfiscanf_r+0x240>
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	e787      	b.n	800dc80 <__ssvfiscanf_r+0x150>
 800dd70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd72:	4621      	mov	r1, r4
 800dd74:	4630      	mov	r0, r6
 800dd76:	4798      	blx	r3
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d081      	beq.n	800dc80 <__ssvfiscanf_r+0x150>
 800dd7c:	e7b6      	b.n	800dcec <__ssvfiscanf_r+0x1bc>
 800dd7e:	2b04      	cmp	r3, #4
 800dd80:	dc06      	bgt.n	800dd90 <__ssvfiscanf_r+0x260>
 800dd82:	466b      	mov	r3, sp
 800dd84:	4622      	mov	r2, r4
 800dd86:	a941      	add	r1, sp, #260	; 0x104
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f000 f883 	bl	800de94 <_scanf_i>
 800dd8e:	e788      	b.n	800dca2 <__ssvfiscanf_r+0x172>
 800dd90:	4b0e      	ldr	r3, [pc, #56]	; (800ddcc <__ssvfiscanf_r+0x29c>)
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f43f aefc 	beq.w	800db90 <__ssvfiscanf_r+0x60>
 800dd98:	466b      	mov	r3, sp
 800dd9a:	4622      	mov	r2, r4
 800dd9c:	a941      	add	r1, sp, #260	; 0x104
 800dd9e:	4630      	mov	r0, r6
 800dda0:	f3af 8000 	nop.w
 800dda4:	e77d      	b.n	800dca2 <__ssvfiscanf_r+0x172>
 800dda6:	89a3      	ldrh	r3, [r4, #12]
 800dda8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ddac:	bf18      	it	ne
 800ddae:	f04f 30ff 	movne.w	r0, #4294967295
 800ddb2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddba:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ddbc:	e7f9      	b.n	800ddb2 <__ssvfiscanf_r+0x282>
 800ddbe:	bf00      	nop
 800ddc0:	0800da7d 	.word	0x0800da7d
 800ddc4:	0800daf7 	.word	0x0800daf7
 800ddc8:	0800e75a 	.word	0x0800e75a
 800ddcc:	00000000 	.word	0x00000000

0800ddd0 <_scanf_chars>:
 800ddd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd4:	4615      	mov	r5, r2
 800ddd6:	688a      	ldr	r2, [r1, #8]
 800ddd8:	4680      	mov	r8, r0
 800ddda:	460c      	mov	r4, r1
 800dddc:	b932      	cbnz	r2, 800ddec <_scanf_chars+0x1c>
 800ddde:	698a      	ldr	r2, [r1, #24]
 800dde0:	2a00      	cmp	r2, #0
 800dde2:	bf14      	ite	ne
 800dde4:	f04f 32ff 	movne.w	r2, #4294967295
 800dde8:	2201      	moveq	r2, #1
 800ddea:	608a      	str	r2, [r1, #8]
 800ddec:	2600      	movs	r6, #0
 800ddee:	6822      	ldr	r2, [r4, #0]
 800ddf0:	06d1      	lsls	r1, r2, #27
 800ddf2:	bf5f      	itttt	pl
 800ddf4:	681a      	ldrpl	r2, [r3, #0]
 800ddf6:	1d11      	addpl	r1, r2, #4
 800ddf8:	6019      	strpl	r1, [r3, #0]
 800ddfa:	6817      	ldrpl	r7, [r2, #0]
 800ddfc:	69a3      	ldr	r3, [r4, #24]
 800ddfe:	b1db      	cbz	r3, 800de38 <_scanf_chars+0x68>
 800de00:	2b01      	cmp	r3, #1
 800de02:	d107      	bne.n	800de14 <_scanf_chars+0x44>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	6962      	ldr	r2, [r4, #20]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	5cd3      	ldrb	r3, [r2, r3]
 800de0c:	b9a3      	cbnz	r3, 800de38 <_scanf_chars+0x68>
 800de0e:	2e00      	cmp	r6, #0
 800de10:	d131      	bne.n	800de76 <_scanf_chars+0xa6>
 800de12:	e006      	b.n	800de22 <_scanf_chars+0x52>
 800de14:	2b02      	cmp	r3, #2
 800de16:	d007      	beq.n	800de28 <_scanf_chars+0x58>
 800de18:	2e00      	cmp	r6, #0
 800de1a:	d12c      	bne.n	800de76 <_scanf_chars+0xa6>
 800de1c:	69a3      	ldr	r3, [r4, #24]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d129      	bne.n	800de76 <_scanf_chars+0xa6>
 800de22:	2001      	movs	r0, #1
 800de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de28:	f000 fac0 	bl	800e3ac <__locale_ctype_ptr>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	4418      	add	r0, r3
 800de32:	7843      	ldrb	r3, [r0, #1]
 800de34:	071b      	lsls	r3, r3, #28
 800de36:	d4ef      	bmi.n	800de18 <_scanf_chars+0x48>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	3601      	adds	r6, #1
 800de3c:	06da      	lsls	r2, r3, #27
 800de3e:	bf5e      	ittt	pl
 800de40:	682b      	ldrpl	r3, [r5, #0]
 800de42:	781b      	ldrbpl	r3, [r3, #0]
 800de44:	703b      	strbpl	r3, [r7, #0]
 800de46:	682a      	ldr	r2, [r5, #0]
 800de48:	686b      	ldr	r3, [r5, #4]
 800de4a:	f102 0201 	add.w	r2, r2, #1
 800de4e:	602a      	str	r2, [r5, #0]
 800de50:	68a2      	ldr	r2, [r4, #8]
 800de52:	f103 33ff 	add.w	r3, r3, #4294967295
 800de56:	f102 32ff 	add.w	r2, r2, #4294967295
 800de5a:	606b      	str	r3, [r5, #4]
 800de5c:	bf58      	it	pl
 800de5e:	3701      	addpl	r7, #1
 800de60:	60a2      	str	r2, [r4, #8]
 800de62:	b142      	cbz	r2, 800de76 <_scanf_chars+0xa6>
 800de64:	2b00      	cmp	r3, #0
 800de66:	dcc9      	bgt.n	800ddfc <_scanf_chars+0x2c>
 800de68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de6c:	4629      	mov	r1, r5
 800de6e:	4640      	mov	r0, r8
 800de70:	4798      	blx	r3
 800de72:	2800      	cmp	r0, #0
 800de74:	d0c2      	beq.n	800ddfc <_scanf_chars+0x2c>
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	f013 0310 	ands.w	r3, r3, #16
 800de7c:	d105      	bne.n	800de8a <_scanf_chars+0xba>
 800de7e:	68e2      	ldr	r2, [r4, #12]
 800de80:	3201      	adds	r2, #1
 800de82:	60e2      	str	r2, [r4, #12]
 800de84:	69a2      	ldr	r2, [r4, #24]
 800de86:	b102      	cbz	r2, 800de8a <_scanf_chars+0xba>
 800de88:	703b      	strb	r3, [r7, #0]
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	2000      	movs	r0, #0
 800de8e:	441e      	add	r6, r3
 800de90:	6126      	str	r6, [r4, #16]
 800de92:	e7c7      	b.n	800de24 <_scanf_chars+0x54>

0800de94 <_scanf_i>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	460c      	mov	r4, r1
 800de9a:	469a      	mov	sl, r3
 800de9c:	4b74      	ldr	r3, [pc, #464]	; (800e070 <_scanf_i+0x1dc>)
 800de9e:	b087      	sub	sp, #28
 800dea0:	4683      	mov	fp, r0
 800dea2:	4616      	mov	r6, r2
 800dea4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dea8:	ab03      	add	r3, sp, #12
 800deaa:	68a7      	ldr	r7, [r4, #8]
 800deac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800deb0:	4b70      	ldr	r3, [pc, #448]	; (800e074 <_scanf_i+0x1e0>)
 800deb2:	69a1      	ldr	r1, [r4, #24]
 800deb4:	4a70      	ldr	r2, [pc, #448]	; (800e078 <_scanf_i+0x1e4>)
 800deb6:	f104 091c 	add.w	r9, r4, #28
 800deba:	2903      	cmp	r1, #3
 800debc:	bf08      	it	eq
 800debe:	461a      	moveq	r2, r3
 800dec0:	1e7b      	subs	r3, r7, #1
 800dec2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800dec6:	bf84      	itt	hi
 800dec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800decc:	60a3      	strhi	r3, [r4, #8]
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	bf88      	it	hi
 800ded2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ded6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	bf98      	it	ls
 800dede:	2700      	movls	r7, #0
 800dee0:	464b      	mov	r3, r9
 800dee2:	f04f 0800 	mov.w	r8, #0
 800dee6:	9200      	str	r2, [sp, #0]
 800dee8:	bf88      	it	hi
 800deea:	197f      	addhi	r7, r7, r5
 800deec:	6831      	ldr	r1, [r6, #0]
 800deee:	9301      	str	r3, [sp, #4]
 800def0:	ab03      	add	r3, sp, #12
 800def2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800def6:	2202      	movs	r2, #2
 800def8:	7809      	ldrb	r1, [r1, #0]
 800defa:	f7ff f8cf 	bl	800d09c <memchr>
 800defe:	9b01      	ldr	r3, [sp, #4]
 800df00:	b330      	cbz	r0, 800df50 <_scanf_i+0xbc>
 800df02:	f1b8 0f01 	cmp.w	r8, #1
 800df06:	d15a      	bne.n	800dfbe <_scanf_i+0x12a>
 800df08:	6862      	ldr	r2, [r4, #4]
 800df0a:	b92a      	cbnz	r2, 800df18 <_scanf_i+0x84>
 800df0c:	2108      	movs	r1, #8
 800df0e:	6822      	ldr	r2, [r4, #0]
 800df10:	6061      	str	r1, [r4, #4]
 800df12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df16:	6022      	str	r2, [r4, #0]
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800df1e:	6022      	str	r2, [r4, #0]
 800df20:	68a2      	ldr	r2, [r4, #8]
 800df22:	1e51      	subs	r1, r2, #1
 800df24:	60a1      	str	r1, [r4, #8]
 800df26:	b19a      	cbz	r2, 800df50 <_scanf_i+0xbc>
 800df28:	6832      	ldr	r2, [r6, #0]
 800df2a:	1c5d      	adds	r5, r3, #1
 800df2c:	1c51      	adds	r1, r2, #1
 800df2e:	6031      	str	r1, [r6, #0]
 800df30:	7812      	ldrb	r2, [r2, #0]
 800df32:	701a      	strb	r2, [r3, #0]
 800df34:	6873      	ldr	r3, [r6, #4]
 800df36:	3b01      	subs	r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	6073      	str	r3, [r6, #4]
 800df3c:	dc07      	bgt.n	800df4e <_scanf_i+0xba>
 800df3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df42:	4631      	mov	r1, r6
 800df44:	4658      	mov	r0, fp
 800df46:	4798      	blx	r3
 800df48:	2800      	cmp	r0, #0
 800df4a:	f040 8087 	bne.w	800e05c <_scanf_i+0x1c8>
 800df4e:	462b      	mov	r3, r5
 800df50:	f108 0801 	add.w	r8, r8, #1
 800df54:	f1b8 0f03 	cmp.w	r8, #3
 800df58:	d1c8      	bne.n	800deec <_scanf_i+0x58>
 800df5a:	6862      	ldr	r2, [r4, #4]
 800df5c:	b90a      	cbnz	r2, 800df62 <_scanf_i+0xce>
 800df5e:	220a      	movs	r2, #10
 800df60:	6062      	str	r2, [r4, #4]
 800df62:	6862      	ldr	r2, [r4, #4]
 800df64:	4945      	ldr	r1, [pc, #276]	; (800e07c <_scanf_i+0x1e8>)
 800df66:	6960      	ldr	r0, [r4, #20]
 800df68:	1a89      	subs	r1, r1, r2
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	f000 f898 	bl	800e0a0 <__sccl>
 800df70:	9b01      	ldr	r3, [sp, #4]
 800df72:	f04f 0800 	mov.w	r8, #0
 800df76:	461d      	mov	r5, r3
 800df78:	68a3      	ldr	r3, [r4, #8]
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d03b      	beq.n	800dff8 <_scanf_i+0x164>
 800df80:	6831      	ldr	r1, [r6, #0]
 800df82:	6960      	ldr	r0, [r4, #20]
 800df84:	f891 c000 	ldrb.w	ip, [r1]
 800df88:	f810 000c 	ldrb.w	r0, [r0, ip]
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d033      	beq.n	800dff8 <_scanf_i+0x164>
 800df90:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800df94:	d121      	bne.n	800dfda <_scanf_i+0x146>
 800df96:	0510      	lsls	r0, r2, #20
 800df98:	d51f      	bpl.n	800dfda <_scanf_i+0x146>
 800df9a:	f108 0801 	add.w	r8, r8, #1
 800df9e:	b117      	cbz	r7, 800dfa6 <_scanf_i+0x112>
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	3f01      	subs	r7, #1
 800dfa4:	60a3      	str	r3, [r4, #8]
 800dfa6:	6873      	ldr	r3, [r6, #4]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	6073      	str	r3, [r6, #4]
 800dfae:	dd1c      	ble.n	800dfea <_scanf_i+0x156>
 800dfb0:	6833      	ldr	r3, [r6, #0]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	6033      	str	r3, [r6, #0]
 800dfb6:	68a3      	ldr	r3, [r4, #8]
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	60a3      	str	r3, [r4, #8]
 800dfbc:	e7dc      	b.n	800df78 <_scanf_i+0xe4>
 800dfbe:	f1b8 0f02 	cmp.w	r8, #2
 800dfc2:	d1ad      	bne.n	800df20 <_scanf_i+0x8c>
 800dfc4:	6822      	ldr	r2, [r4, #0]
 800dfc6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dfca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dfce:	d1bf      	bne.n	800df50 <_scanf_i+0xbc>
 800dfd0:	2110      	movs	r1, #16
 800dfd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfd6:	6061      	str	r1, [r4, #4]
 800dfd8:	e7a1      	b.n	800df1e <_scanf_i+0x8a>
 800dfda:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dfde:	6022      	str	r2, [r4, #0]
 800dfe0:	780b      	ldrb	r3, [r1, #0]
 800dfe2:	3501      	adds	r5, #1
 800dfe4:	f805 3c01 	strb.w	r3, [r5, #-1]
 800dfe8:	e7dd      	b.n	800dfa6 <_scanf_i+0x112>
 800dfea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dfee:	4631      	mov	r1, r6
 800dff0:	4658      	mov	r0, fp
 800dff2:	4798      	blx	r3
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d0de      	beq.n	800dfb6 <_scanf_i+0x122>
 800dff8:	6823      	ldr	r3, [r4, #0]
 800dffa:	05d9      	lsls	r1, r3, #23
 800dffc:	d50c      	bpl.n	800e018 <_scanf_i+0x184>
 800dffe:	454d      	cmp	r5, r9
 800e000:	d908      	bls.n	800e014 <_scanf_i+0x180>
 800e002:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e006:	1e6f      	subs	r7, r5, #1
 800e008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e00c:	4632      	mov	r2, r6
 800e00e:	4658      	mov	r0, fp
 800e010:	4798      	blx	r3
 800e012:	463d      	mov	r5, r7
 800e014:	454d      	cmp	r5, r9
 800e016:	d029      	beq.n	800e06c <_scanf_i+0x1d8>
 800e018:	6822      	ldr	r2, [r4, #0]
 800e01a:	f012 0210 	ands.w	r2, r2, #16
 800e01e:	d113      	bne.n	800e048 <_scanf_i+0x1b4>
 800e020:	702a      	strb	r2, [r5, #0]
 800e022:	6863      	ldr	r3, [r4, #4]
 800e024:	4649      	mov	r1, r9
 800e026:	4658      	mov	r0, fp
 800e028:	9e00      	ldr	r6, [sp, #0]
 800e02a:	47b0      	blx	r6
 800e02c:	f8da 3000 	ldr.w	r3, [sl]
 800e030:	6821      	ldr	r1, [r4, #0]
 800e032:	1d1a      	adds	r2, r3, #4
 800e034:	f8ca 2000 	str.w	r2, [sl]
 800e038:	f011 0f20 	tst.w	r1, #32
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	d010      	beq.n	800e062 <_scanf_i+0x1ce>
 800e040:	6018      	str	r0, [r3, #0]
 800e042:	68e3      	ldr	r3, [r4, #12]
 800e044:	3301      	adds	r3, #1
 800e046:	60e3      	str	r3, [r4, #12]
 800e048:	2000      	movs	r0, #0
 800e04a:	eba5 0509 	sub.w	r5, r5, r9
 800e04e:	44a8      	add	r8, r5
 800e050:	6925      	ldr	r5, [r4, #16]
 800e052:	4445      	add	r5, r8
 800e054:	6125      	str	r5, [r4, #16]
 800e056:	b007      	add	sp, #28
 800e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	f04f 0800 	mov.w	r8, #0
 800e060:	e7ca      	b.n	800dff8 <_scanf_i+0x164>
 800e062:	07ca      	lsls	r2, r1, #31
 800e064:	bf4c      	ite	mi
 800e066:	8018      	strhmi	r0, [r3, #0]
 800e068:	6018      	strpl	r0, [r3, #0]
 800e06a:	e7ea      	b.n	800e042 <_scanf_i+0x1ae>
 800e06c:	2001      	movs	r0, #1
 800e06e:	e7f2      	b.n	800e056 <_scanf_i+0x1c2>
 800e070:	0800e5f4 	.word	0x0800e5f4
 800e074:	0800e1f9 	.word	0x0800e1f9
 800e078:	0800e311 	.word	0x0800e311
 800e07c:	0800e775 	.word	0x0800e775

0800e080 <_sbrk_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	2300      	movs	r3, #0
 800e084:	4c05      	ldr	r4, [pc, #20]	; (800e09c <_sbrk_r+0x1c>)
 800e086:	4605      	mov	r5, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	f7f4 fde6 	bl	8002c5c <_sbrk>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	d102      	bne.n	800e09a <_sbrk_r+0x1a>
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	b103      	cbz	r3, 800e09a <_sbrk_r+0x1a>
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	20001784 	.word	0x20001784

0800e0a0 <__sccl>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	780b      	ldrb	r3, [r1, #0]
 800e0a4:	1e44      	subs	r4, r0, #1
 800e0a6:	2b5e      	cmp	r3, #94	; 0x5e
 800e0a8:	bf13      	iteet	ne
 800e0aa:	1c4a      	addne	r2, r1, #1
 800e0ac:	1c8a      	addeq	r2, r1, #2
 800e0ae:	784b      	ldrbeq	r3, [r1, #1]
 800e0b0:	2100      	movne	r1, #0
 800e0b2:	bf08      	it	eq
 800e0b4:	2101      	moveq	r1, #1
 800e0b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800e0ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 800e0be:	42ac      	cmp	r4, r5
 800e0c0:	d1fb      	bne.n	800e0ba <__sccl+0x1a>
 800e0c2:	b913      	cbnz	r3, 800e0ca <__sccl+0x2a>
 800e0c4:	3a01      	subs	r2, #1
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	f081 0401 	eor.w	r4, r1, #1
 800e0ce:	54c4      	strb	r4, [r0, r3]
 800e0d0:	1c51      	adds	r1, r2, #1
 800e0d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800e0d6:	1e4e      	subs	r6, r1, #1
 800e0d8:	2d2d      	cmp	r5, #45	; 0x2d
 800e0da:	460a      	mov	r2, r1
 800e0dc:	d006      	beq.n	800e0ec <__sccl+0x4c>
 800e0de:	2d5d      	cmp	r5, #93	; 0x5d
 800e0e0:	d0f1      	beq.n	800e0c6 <__sccl+0x26>
 800e0e2:	b90d      	cbnz	r5, 800e0e8 <__sccl+0x48>
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	e7ee      	b.n	800e0c6 <__sccl+0x26>
 800e0e8:	462b      	mov	r3, r5
 800e0ea:	e7f0      	b.n	800e0ce <__sccl+0x2e>
 800e0ec:	780e      	ldrb	r6, [r1, #0]
 800e0ee:	2e5d      	cmp	r6, #93	; 0x5d
 800e0f0:	d0fa      	beq.n	800e0e8 <__sccl+0x48>
 800e0f2:	42b3      	cmp	r3, r6
 800e0f4:	dcf8      	bgt.n	800e0e8 <__sccl+0x48>
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	429e      	cmp	r6, r3
 800e0fa:	54c4      	strb	r4, [r0, r3]
 800e0fc:	dcfb      	bgt.n	800e0f6 <__sccl+0x56>
 800e0fe:	3102      	adds	r1, #2
 800e100:	e7e7      	b.n	800e0d2 <__sccl+0x32>

0800e102 <_strtol_l.isra.0>:
 800e102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e106:	4680      	mov	r8, r0
 800e108:	4689      	mov	r9, r1
 800e10a:	4692      	mov	sl, r2
 800e10c:	461e      	mov	r6, r3
 800e10e:	460f      	mov	r7, r1
 800e110:	463d      	mov	r5, r7
 800e112:	9808      	ldr	r0, [sp, #32]
 800e114:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e118:	f000 f944 	bl	800e3a4 <__locale_ctype_ptr_l>
 800e11c:	4420      	add	r0, r4
 800e11e:	7843      	ldrb	r3, [r0, #1]
 800e120:	f013 0308 	ands.w	r3, r3, #8
 800e124:	d132      	bne.n	800e18c <_strtol_l.isra.0+0x8a>
 800e126:	2c2d      	cmp	r4, #45	; 0x2d
 800e128:	d132      	bne.n	800e190 <_strtol_l.isra.0+0x8e>
 800e12a:	2201      	movs	r2, #1
 800e12c:	787c      	ldrb	r4, [r7, #1]
 800e12e:	1cbd      	adds	r5, r7, #2
 800e130:	2e00      	cmp	r6, #0
 800e132:	d05d      	beq.n	800e1f0 <_strtol_l.isra.0+0xee>
 800e134:	2e10      	cmp	r6, #16
 800e136:	d109      	bne.n	800e14c <_strtol_l.isra.0+0x4a>
 800e138:	2c30      	cmp	r4, #48	; 0x30
 800e13a:	d107      	bne.n	800e14c <_strtol_l.isra.0+0x4a>
 800e13c:	782b      	ldrb	r3, [r5, #0]
 800e13e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e142:	2b58      	cmp	r3, #88	; 0x58
 800e144:	d14f      	bne.n	800e1e6 <_strtol_l.isra.0+0xe4>
 800e146:	2610      	movs	r6, #16
 800e148:	786c      	ldrb	r4, [r5, #1]
 800e14a:	3502      	adds	r5, #2
 800e14c:	2a00      	cmp	r2, #0
 800e14e:	bf14      	ite	ne
 800e150:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e154:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e158:	2700      	movs	r7, #0
 800e15a:	fbb1 fcf6 	udiv	ip, r1, r6
 800e15e:	4638      	mov	r0, r7
 800e160:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e164:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e168:	2b09      	cmp	r3, #9
 800e16a:	d817      	bhi.n	800e19c <_strtol_l.isra.0+0x9a>
 800e16c:	461c      	mov	r4, r3
 800e16e:	42a6      	cmp	r6, r4
 800e170:	dd23      	ble.n	800e1ba <_strtol_l.isra.0+0xb8>
 800e172:	1c7b      	adds	r3, r7, #1
 800e174:	d007      	beq.n	800e186 <_strtol_l.isra.0+0x84>
 800e176:	4584      	cmp	ip, r0
 800e178:	d31c      	bcc.n	800e1b4 <_strtol_l.isra.0+0xb2>
 800e17a:	d101      	bne.n	800e180 <_strtol_l.isra.0+0x7e>
 800e17c:	45a6      	cmp	lr, r4
 800e17e:	db19      	blt.n	800e1b4 <_strtol_l.isra.0+0xb2>
 800e180:	2701      	movs	r7, #1
 800e182:	fb00 4006 	mla	r0, r0, r6, r4
 800e186:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e18a:	e7eb      	b.n	800e164 <_strtol_l.isra.0+0x62>
 800e18c:	462f      	mov	r7, r5
 800e18e:	e7bf      	b.n	800e110 <_strtol_l.isra.0+0xe>
 800e190:	2c2b      	cmp	r4, #43	; 0x2b
 800e192:	bf04      	itt	eq
 800e194:	1cbd      	addeq	r5, r7, #2
 800e196:	787c      	ldrbeq	r4, [r7, #1]
 800e198:	461a      	mov	r2, r3
 800e19a:	e7c9      	b.n	800e130 <_strtol_l.isra.0+0x2e>
 800e19c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e1a0:	2b19      	cmp	r3, #25
 800e1a2:	d801      	bhi.n	800e1a8 <_strtol_l.isra.0+0xa6>
 800e1a4:	3c37      	subs	r4, #55	; 0x37
 800e1a6:	e7e2      	b.n	800e16e <_strtol_l.isra.0+0x6c>
 800e1a8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e1ac:	2b19      	cmp	r3, #25
 800e1ae:	d804      	bhi.n	800e1ba <_strtol_l.isra.0+0xb8>
 800e1b0:	3c57      	subs	r4, #87	; 0x57
 800e1b2:	e7dc      	b.n	800e16e <_strtol_l.isra.0+0x6c>
 800e1b4:	f04f 37ff 	mov.w	r7, #4294967295
 800e1b8:	e7e5      	b.n	800e186 <_strtol_l.isra.0+0x84>
 800e1ba:	1c7b      	adds	r3, r7, #1
 800e1bc:	d108      	bne.n	800e1d0 <_strtol_l.isra.0+0xce>
 800e1be:	2322      	movs	r3, #34	; 0x22
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	f8c8 3000 	str.w	r3, [r8]
 800e1c6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ca:	d107      	bne.n	800e1dc <_strtol_l.isra.0+0xda>
 800e1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1d0:	b102      	cbz	r2, 800e1d4 <_strtol_l.isra.0+0xd2>
 800e1d2:	4240      	negs	r0, r0
 800e1d4:	f1ba 0f00 	cmp.w	sl, #0
 800e1d8:	d0f8      	beq.n	800e1cc <_strtol_l.isra.0+0xca>
 800e1da:	b10f      	cbz	r7, 800e1e0 <_strtol_l.isra.0+0xde>
 800e1dc:	f105 39ff 	add.w	r9, r5, #4294967295
 800e1e0:	f8ca 9000 	str.w	r9, [sl]
 800e1e4:	e7f2      	b.n	800e1cc <_strtol_l.isra.0+0xca>
 800e1e6:	2430      	movs	r4, #48	; 0x30
 800e1e8:	2e00      	cmp	r6, #0
 800e1ea:	d1af      	bne.n	800e14c <_strtol_l.isra.0+0x4a>
 800e1ec:	2608      	movs	r6, #8
 800e1ee:	e7ad      	b.n	800e14c <_strtol_l.isra.0+0x4a>
 800e1f0:	2c30      	cmp	r4, #48	; 0x30
 800e1f2:	d0a3      	beq.n	800e13c <_strtol_l.isra.0+0x3a>
 800e1f4:	260a      	movs	r6, #10
 800e1f6:	e7a9      	b.n	800e14c <_strtol_l.isra.0+0x4a>

0800e1f8 <_strtol_r>:
 800e1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1fa:	4c06      	ldr	r4, [pc, #24]	; (800e214 <_strtol_r+0x1c>)
 800e1fc:	4d06      	ldr	r5, [pc, #24]	; (800e218 <_strtol_r+0x20>)
 800e1fe:	6824      	ldr	r4, [r4, #0]
 800e200:	6a24      	ldr	r4, [r4, #32]
 800e202:	2c00      	cmp	r4, #0
 800e204:	bf08      	it	eq
 800e206:	462c      	moveq	r4, r5
 800e208:	9400      	str	r4, [sp, #0]
 800e20a:	f7ff ff7a 	bl	800e102 <_strtol_l.isra.0>
 800e20e:	b003      	add	sp, #12
 800e210:	bd30      	pop	{r4, r5, pc}
 800e212:	bf00      	nop
 800e214:	20000184 	.word	0x20000184
 800e218:	200001e8 	.word	0x200001e8

0800e21c <_strtoul_l.isra.0>:
 800e21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e220:	4680      	mov	r8, r0
 800e222:	4689      	mov	r9, r1
 800e224:	4692      	mov	sl, r2
 800e226:	461e      	mov	r6, r3
 800e228:	460f      	mov	r7, r1
 800e22a:	463d      	mov	r5, r7
 800e22c:	9808      	ldr	r0, [sp, #32]
 800e22e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e232:	f000 f8b7 	bl	800e3a4 <__locale_ctype_ptr_l>
 800e236:	4420      	add	r0, r4
 800e238:	7843      	ldrb	r3, [r0, #1]
 800e23a:	f013 0308 	ands.w	r3, r3, #8
 800e23e:	d130      	bne.n	800e2a2 <_strtoul_l.isra.0+0x86>
 800e240:	2c2d      	cmp	r4, #45	; 0x2d
 800e242:	d130      	bne.n	800e2a6 <_strtoul_l.isra.0+0x8a>
 800e244:	2101      	movs	r1, #1
 800e246:	787c      	ldrb	r4, [r7, #1]
 800e248:	1cbd      	adds	r5, r7, #2
 800e24a:	2e00      	cmp	r6, #0
 800e24c:	d05c      	beq.n	800e308 <_strtoul_l.isra.0+0xec>
 800e24e:	2e10      	cmp	r6, #16
 800e250:	d109      	bne.n	800e266 <_strtoul_l.isra.0+0x4a>
 800e252:	2c30      	cmp	r4, #48	; 0x30
 800e254:	d107      	bne.n	800e266 <_strtoul_l.isra.0+0x4a>
 800e256:	782b      	ldrb	r3, [r5, #0]
 800e258:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e25c:	2b58      	cmp	r3, #88	; 0x58
 800e25e:	d14e      	bne.n	800e2fe <_strtoul_l.isra.0+0xe2>
 800e260:	2610      	movs	r6, #16
 800e262:	786c      	ldrb	r4, [r5, #1]
 800e264:	3502      	adds	r5, #2
 800e266:	f04f 32ff 	mov.w	r2, #4294967295
 800e26a:	fbb2 f2f6 	udiv	r2, r2, r6
 800e26e:	2300      	movs	r3, #0
 800e270:	fb06 fc02 	mul.w	ip, r6, r2
 800e274:	4618      	mov	r0, r3
 800e276:	ea6f 0c0c 	mvn.w	ip, ip
 800e27a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e27e:	2f09      	cmp	r7, #9
 800e280:	d817      	bhi.n	800e2b2 <_strtoul_l.isra.0+0x96>
 800e282:	463c      	mov	r4, r7
 800e284:	42a6      	cmp	r6, r4
 800e286:	dd23      	ble.n	800e2d0 <_strtoul_l.isra.0+0xb4>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	db1e      	blt.n	800e2ca <_strtoul_l.isra.0+0xae>
 800e28c:	4282      	cmp	r2, r0
 800e28e:	d31c      	bcc.n	800e2ca <_strtoul_l.isra.0+0xae>
 800e290:	d101      	bne.n	800e296 <_strtoul_l.isra.0+0x7a>
 800e292:	45a4      	cmp	ip, r4
 800e294:	db19      	blt.n	800e2ca <_strtoul_l.isra.0+0xae>
 800e296:	2301      	movs	r3, #1
 800e298:	fb00 4006 	mla	r0, r0, r6, r4
 800e29c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2a0:	e7eb      	b.n	800e27a <_strtoul_l.isra.0+0x5e>
 800e2a2:	462f      	mov	r7, r5
 800e2a4:	e7c1      	b.n	800e22a <_strtoul_l.isra.0+0xe>
 800e2a6:	2c2b      	cmp	r4, #43	; 0x2b
 800e2a8:	bf04      	itt	eq
 800e2aa:	1cbd      	addeq	r5, r7, #2
 800e2ac:	787c      	ldrbeq	r4, [r7, #1]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	e7cb      	b.n	800e24a <_strtoul_l.isra.0+0x2e>
 800e2b2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e2b6:	2f19      	cmp	r7, #25
 800e2b8:	d801      	bhi.n	800e2be <_strtoul_l.isra.0+0xa2>
 800e2ba:	3c37      	subs	r4, #55	; 0x37
 800e2bc:	e7e2      	b.n	800e284 <_strtoul_l.isra.0+0x68>
 800e2be:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e2c2:	2f19      	cmp	r7, #25
 800e2c4:	d804      	bhi.n	800e2d0 <_strtoul_l.isra.0+0xb4>
 800e2c6:	3c57      	subs	r4, #87	; 0x57
 800e2c8:	e7dc      	b.n	800e284 <_strtoul_l.isra.0+0x68>
 800e2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ce:	e7e5      	b.n	800e29c <_strtoul_l.isra.0+0x80>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	da09      	bge.n	800e2e8 <_strtoul_l.isra.0+0xcc>
 800e2d4:	2322      	movs	r3, #34	; 0x22
 800e2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2da:	f8c8 3000 	str.w	r3, [r8]
 800e2de:	f1ba 0f00 	cmp.w	sl, #0
 800e2e2:	d107      	bne.n	800e2f4 <_strtoul_l.isra.0+0xd8>
 800e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e8:	b101      	cbz	r1, 800e2ec <_strtoul_l.isra.0+0xd0>
 800e2ea:	4240      	negs	r0, r0
 800e2ec:	f1ba 0f00 	cmp.w	sl, #0
 800e2f0:	d0f8      	beq.n	800e2e4 <_strtoul_l.isra.0+0xc8>
 800e2f2:	b10b      	cbz	r3, 800e2f8 <_strtoul_l.isra.0+0xdc>
 800e2f4:	f105 39ff 	add.w	r9, r5, #4294967295
 800e2f8:	f8ca 9000 	str.w	r9, [sl]
 800e2fc:	e7f2      	b.n	800e2e4 <_strtoul_l.isra.0+0xc8>
 800e2fe:	2430      	movs	r4, #48	; 0x30
 800e300:	2e00      	cmp	r6, #0
 800e302:	d1b0      	bne.n	800e266 <_strtoul_l.isra.0+0x4a>
 800e304:	2608      	movs	r6, #8
 800e306:	e7ae      	b.n	800e266 <_strtoul_l.isra.0+0x4a>
 800e308:	2c30      	cmp	r4, #48	; 0x30
 800e30a:	d0a4      	beq.n	800e256 <_strtoul_l.isra.0+0x3a>
 800e30c:	260a      	movs	r6, #10
 800e30e:	e7aa      	b.n	800e266 <_strtoul_l.isra.0+0x4a>

0800e310 <_strtoul_r>:
 800e310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e312:	4c06      	ldr	r4, [pc, #24]	; (800e32c <_strtoul_r+0x1c>)
 800e314:	4d06      	ldr	r5, [pc, #24]	; (800e330 <_strtoul_r+0x20>)
 800e316:	6824      	ldr	r4, [r4, #0]
 800e318:	6a24      	ldr	r4, [r4, #32]
 800e31a:	2c00      	cmp	r4, #0
 800e31c:	bf08      	it	eq
 800e31e:	462c      	moveq	r4, r5
 800e320:	9400      	str	r4, [sp, #0]
 800e322:	f7ff ff7b 	bl	800e21c <_strtoul_l.isra.0>
 800e326:	b003      	add	sp, #12
 800e328:	bd30      	pop	{r4, r5, pc}
 800e32a:	bf00      	nop
 800e32c:	20000184 	.word	0x20000184
 800e330:	200001e8 	.word	0x200001e8

0800e334 <__submore>:
 800e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	460c      	mov	r4, r1
 800e33a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e340:	4299      	cmp	r1, r3
 800e342:	d11b      	bne.n	800e37c <__submore+0x48>
 800e344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e348:	f7ff f9ec 	bl	800d724 <_malloc_r>
 800e34c:	b918      	cbnz	r0, 800e356 <__submore+0x22>
 800e34e:	f04f 30ff 	mov.w	r0, #4294967295
 800e352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e35a:	63a3      	str	r3, [r4, #56]	; 0x38
 800e35c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e360:	6360      	str	r0, [r4, #52]	; 0x34
 800e362:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e366:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e36a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e36e:	7043      	strb	r3, [r0, #1]
 800e370:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e374:	7003      	strb	r3, [r0, #0]
 800e376:	6020      	str	r0, [r4, #0]
 800e378:	2000      	movs	r0, #0
 800e37a:	e7ea      	b.n	800e352 <__submore+0x1e>
 800e37c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e37e:	0077      	lsls	r7, r6, #1
 800e380:	463a      	mov	r2, r7
 800e382:	f000 f84e 	bl	800e422 <_realloc_r>
 800e386:	4605      	mov	r5, r0
 800e388:	2800      	cmp	r0, #0
 800e38a:	d0e0      	beq.n	800e34e <__submore+0x1a>
 800e38c:	eb00 0806 	add.w	r8, r0, r6
 800e390:	4601      	mov	r1, r0
 800e392:	4632      	mov	r2, r6
 800e394:	4640      	mov	r0, r8
 800e396:	f7fd fb79 	bl	800ba8c <memcpy>
 800e39a:	f8c4 8000 	str.w	r8, [r4]
 800e39e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e3a2:	e7e9      	b.n	800e378 <__submore+0x44>

0800e3a4 <__locale_ctype_ptr_l>:
 800e3a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e3a8:	4770      	bx	lr
	...

0800e3ac <__locale_ctype_ptr>:
 800e3ac:	4b04      	ldr	r3, [pc, #16]	; (800e3c0 <__locale_ctype_ptr+0x14>)
 800e3ae:	4a05      	ldr	r2, [pc, #20]	; (800e3c4 <__locale_ctype_ptr+0x18>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	6a1b      	ldr	r3, [r3, #32]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	bf08      	it	eq
 800e3b8:	4613      	moveq	r3, r2
 800e3ba:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e3be:	4770      	bx	lr
 800e3c0:	20000184 	.word	0x20000184
 800e3c4:	200001e8 	.word	0x200001e8

0800e3c8 <__ascii_mbtowc>:
 800e3c8:	b082      	sub	sp, #8
 800e3ca:	b901      	cbnz	r1, 800e3ce <__ascii_mbtowc+0x6>
 800e3cc:	a901      	add	r1, sp, #4
 800e3ce:	b142      	cbz	r2, 800e3e2 <__ascii_mbtowc+0x1a>
 800e3d0:	b14b      	cbz	r3, 800e3e6 <__ascii_mbtowc+0x1e>
 800e3d2:	7813      	ldrb	r3, [r2, #0]
 800e3d4:	600b      	str	r3, [r1, #0]
 800e3d6:	7812      	ldrb	r2, [r2, #0]
 800e3d8:	1c10      	adds	r0, r2, #0
 800e3da:	bf18      	it	ne
 800e3dc:	2001      	movne	r0, #1
 800e3de:	b002      	add	sp, #8
 800e3e0:	4770      	bx	lr
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	e7fb      	b.n	800e3de <__ascii_mbtowc+0x16>
 800e3e6:	f06f 0001 	mvn.w	r0, #1
 800e3ea:	e7f8      	b.n	800e3de <__ascii_mbtowc+0x16>

0800e3ec <memmove>:
 800e3ec:	4288      	cmp	r0, r1
 800e3ee:	b510      	push	{r4, lr}
 800e3f0:	eb01 0302 	add.w	r3, r1, r2
 800e3f4:	d807      	bhi.n	800e406 <memmove+0x1a>
 800e3f6:	1e42      	subs	r2, r0, #1
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	d00a      	beq.n	800e412 <memmove+0x26>
 800e3fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e400:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e404:	e7f8      	b.n	800e3f8 <memmove+0xc>
 800e406:	4283      	cmp	r3, r0
 800e408:	d9f5      	bls.n	800e3f6 <memmove+0xa>
 800e40a:	1881      	adds	r1, r0, r2
 800e40c:	1ad2      	subs	r2, r2, r3
 800e40e:	42d3      	cmn	r3, r2
 800e410:	d100      	bne.n	800e414 <memmove+0x28>
 800e412:	bd10      	pop	{r4, pc}
 800e414:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e418:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e41c:	e7f7      	b.n	800e40e <memmove+0x22>

0800e41e <__malloc_lock>:
 800e41e:	4770      	bx	lr

0800e420 <__malloc_unlock>:
 800e420:	4770      	bx	lr

0800e422 <_realloc_r>:
 800e422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e424:	4607      	mov	r7, r0
 800e426:	4614      	mov	r4, r2
 800e428:	460e      	mov	r6, r1
 800e42a:	b921      	cbnz	r1, 800e436 <_realloc_r+0x14>
 800e42c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e430:	4611      	mov	r1, r2
 800e432:	f7ff b977 	b.w	800d724 <_malloc_r>
 800e436:	b922      	cbnz	r2, 800e442 <_realloc_r+0x20>
 800e438:	f7ff f928 	bl	800d68c <_free_r>
 800e43c:	4625      	mov	r5, r4
 800e43e:	4628      	mov	r0, r5
 800e440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e442:	f000 f821 	bl	800e488 <_malloc_usable_size_r>
 800e446:	42a0      	cmp	r0, r4
 800e448:	d20f      	bcs.n	800e46a <_realloc_r+0x48>
 800e44a:	4621      	mov	r1, r4
 800e44c:	4638      	mov	r0, r7
 800e44e:	f7ff f969 	bl	800d724 <_malloc_r>
 800e452:	4605      	mov	r5, r0
 800e454:	2800      	cmp	r0, #0
 800e456:	d0f2      	beq.n	800e43e <_realloc_r+0x1c>
 800e458:	4631      	mov	r1, r6
 800e45a:	4622      	mov	r2, r4
 800e45c:	f7fd fb16 	bl	800ba8c <memcpy>
 800e460:	4631      	mov	r1, r6
 800e462:	4638      	mov	r0, r7
 800e464:	f7ff f912 	bl	800d68c <_free_r>
 800e468:	e7e9      	b.n	800e43e <_realloc_r+0x1c>
 800e46a:	4635      	mov	r5, r6
 800e46c:	e7e7      	b.n	800e43e <_realloc_r+0x1c>

0800e46e <__ascii_wctomb>:
 800e46e:	b149      	cbz	r1, 800e484 <__ascii_wctomb+0x16>
 800e470:	2aff      	cmp	r2, #255	; 0xff
 800e472:	bf8b      	itete	hi
 800e474:	238a      	movhi	r3, #138	; 0x8a
 800e476:	700a      	strbls	r2, [r1, #0]
 800e478:	6003      	strhi	r3, [r0, #0]
 800e47a:	2001      	movls	r0, #1
 800e47c:	bf88      	it	hi
 800e47e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e482:	4770      	bx	lr
 800e484:	4608      	mov	r0, r1
 800e486:	4770      	bx	lr

0800e488 <_malloc_usable_size_r>:
 800e488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48c:	1f18      	subs	r0, r3, #4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bfbc      	itt	lt
 800e492:	580b      	ldrlt	r3, [r1, r0]
 800e494:	18c0      	addlt	r0, r0, r3
 800e496:	4770      	bx	lr

0800e498 <_init>:
 800e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49a:	bf00      	nop
 800e49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e49e:	bc08      	pop	{r3}
 800e4a0:	469e      	mov	lr, r3
 800e4a2:	4770      	bx	lr

0800e4a4 <_fini>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	bf00      	nop
 800e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4aa:	bc08      	pop	{r3}
 800e4ac:	469e      	mov	lr, r3
 800e4ae:	4770      	bx	lr
